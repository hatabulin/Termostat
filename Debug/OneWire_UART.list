
OneWire_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  080054e0  080054e0  000154e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800586c  0800586c  0001586c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005870  08005870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c8  20000000  08005874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001c84  200001c8  08005a3c  000201c8  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20001e4c  08005a3c  00021e4c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00025d88  00000000  00000000  000201f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000051ce  00000000  00000000  00045f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b41f  00000000  00000000  0004b147  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001058  00000000  00000000  00056568  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000016c8  00000000  00000000  000575c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000996b  00000000  00000000  00058c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005528  00000000  00000000  000625f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00067b1b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000032cc  00000000  00000000  00067b98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001c8 	.word	0x200001c8
 800012c:	00000000 	.word	0x00000000
 8000130:	080054c8 	.word	0x080054c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001cc 	.word	0x200001cc
 800014c:	080054c8 	.word	0x080054c8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_llsr>:
 8000160:	40d0      	lsrs	r0, r2
 8000162:	1c0b      	adds	r3, r1, #0
 8000164:	40d1      	lsrs	r1, r2
 8000166:	469c      	mov	ip, r3
 8000168:	3a20      	subs	r2, #32
 800016a:	40d3      	lsrs	r3, r2
 800016c:	4318      	orrs	r0, r3
 800016e:	4252      	negs	r2, r2
 8000170:	4663      	mov	r3, ip
 8000172:	4093      	lsls	r3, r2
 8000174:	4318      	orrs	r0, r3
 8000176:	4770      	bx	lr

08000178 <__aeabi_drsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800017c:	e002      	b.n	8000184 <__adddf3>
 800017e:	bf00      	nop

08000180 <__aeabi_dsub>:
 8000180:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000184 <__adddf3>:
 8000184:	b530      	push	{r4, r5, lr}
 8000186:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018e:	ea94 0f05 	teq	r4, r5
 8000192:	bf08      	it	eq
 8000194:	ea90 0f02 	teqeq	r0, r2
 8000198:	bf1f      	itttt	ne
 800019a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001aa:	f000 80e2 	beq.w	8000372 <__adddf3+0x1ee>
 80001ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b6:	bfb8      	it	lt
 80001b8:	426d      	neglt	r5, r5
 80001ba:	dd0c      	ble.n	80001d6 <__adddf3+0x52>
 80001bc:	442c      	add	r4, r5
 80001be:	ea80 0202 	eor.w	r2, r0, r2
 80001c2:	ea81 0303 	eor.w	r3, r1, r3
 80001c6:	ea82 0000 	eor.w	r0, r2, r0
 80001ca:	ea83 0101 	eor.w	r1, r3, r1
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	2d36      	cmp	r5, #54	; 0x36
 80001d8:	bf88      	it	hi
 80001da:	bd30      	pophi	{r4, r5, pc}
 80001dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x70>
 80001ee:	4240      	negs	r0, r0
 80001f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000200:	d002      	beq.n	8000208 <__adddf3+0x84>
 8000202:	4252      	negs	r2, r2
 8000204:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000208:	ea94 0f05 	teq	r4, r5
 800020c:	f000 80a7 	beq.w	800035e <__adddf3+0x1da>
 8000210:	f1a4 0401 	sub.w	r4, r4, #1
 8000214:	f1d5 0e20 	rsbs	lr, r5, #32
 8000218:	db0d      	blt.n	8000236 <__adddf3+0xb2>
 800021a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021e:	fa22 f205 	lsr.w	r2, r2, r5
 8000222:	1880      	adds	r0, r0, r2
 8000224:	f141 0100 	adc.w	r1, r1, #0
 8000228:	fa03 f20e 	lsl.w	r2, r3, lr
 800022c:	1880      	adds	r0, r0, r2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	4159      	adcs	r1, r3
 8000234:	e00e      	b.n	8000254 <__adddf3+0xd0>
 8000236:	f1a5 0520 	sub.w	r5, r5, #32
 800023a:	f10e 0e20 	add.w	lr, lr, #32
 800023e:	2a01      	cmp	r2, #1
 8000240:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000244:	bf28      	it	cs
 8000246:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	18c0      	adds	r0, r0, r3
 8000250:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000254:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000258:	d507      	bpl.n	800026a <__adddf3+0xe6>
 800025a:	f04f 0e00 	mov.w	lr, #0
 800025e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000262:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000266:	eb6e 0101 	sbc.w	r1, lr, r1
 800026a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026e:	d31b      	bcc.n	80002a8 <__adddf3+0x124>
 8000270:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000274:	d30c      	bcc.n	8000290 <__adddf3+0x10c>
 8000276:	0849      	lsrs	r1, r1, #1
 8000278:	ea5f 0030 	movs.w	r0, r0, rrx
 800027c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000280:	f104 0401 	add.w	r4, r4, #1
 8000284:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000288:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800028c:	f080 809a 	bcs.w	80003c4 <__adddf3+0x240>
 8000290:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	ea41 0105 	orr.w	r1, r1, r5
 80002a6:	bd30      	pop	{r4, r5, pc}
 80002a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002ac:	4140      	adcs	r0, r0
 80002ae:	eb41 0101 	adc.w	r1, r1, r1
 80002b2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b6:	f1a4 0401 	sub.w	r4, r4, #1
 80002ba:	d1e9      	bne.n	8000290 <__adddf3+0x10c>
 80002bc:	f091 0f00 	teq	r1, #0
 80002c0:	bf04      	itt	eq
 80002c2:	4601      	moveq	r1, r0
 80002c4:	2000      	moveq	r0, #0
 80002c6:	fab1 f381 	clz	r3, r1
 80002ca:	bf08      	it	eq
 80002cc:	3320      	addeq	r3, #32
 80002ce:	f1a3 030b 	sub.w	r3, r3, #11
 80002d2:	f1b3 0220 	subs.w	r2, r3, #32
 80002d6:	da0c      	bge.n	80002f2 <__adddf3+0x16e>
 80002d8:	320c      	adds	r2, #12
 80002da:	dd08      	ble.n	80002ee <__adddf3+0x16a>
 80002dc:	f102 0c14 	add.w	ip, r2, #20
 80002e0:	f1c2 020c 	rsb	r2, r2, #12
 80002e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e8:	fa21 f102 	lsr.w	r1, r1, r2
 80002ec:	e00c      	b.n	8000308 <__adddf3+0x184>
 80002ee:	f102 0214 	add.w	r2, r2, #20
 80002f2:	bfd8      	it	le
 80002f4:	f1c2 0c20 	rsble	ip, r2, #32
 80002f8:	fa01 f102 	lsl.w	r1, r1, r2
 80002fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000300:	bfdc      	itt	le
 8000302:	ea41 010c 	orrle.w	r1, r1, ip
 8000306:	4090      	lslle	r0, r2
 8000308:	1ae4      	subs	r4, r4, r3
 800030a:	bfa2      	ittt	ge
 800030c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000310:	4329      	orrge	r1, r5
 8000312:	bd30      	popge	{r4, r5, pc}
 8000314:	ea6f 0404 	mvn.w	r4, r4
 8000318:	3c1f      	subs	r4, #31
 800031a:	da1c      	bge.n	8000356 <__adddf3+0x1d2>
 800031c:	340c      	adds	r4, #12
 800031e:	dc0e      	bgt.n	800033e <__adddf3+0x1ba>
 8000320:	f104 0414 	add.w	r4, r4, #20
 8000324:	f1c4 0220 	rsb	r2, r4, #32
 8000328:	fa20 f004 	lsr.w	r0, r0, r4
 800032c:	fa01 f302 	lsl.w	r3, r1, r2
 8000330:	ea40 0003 	orr.w	r0, r0, r3
 8000334:	fa21 f304 	lsr.w	r3, r1, r4
 8000338:	ea45 0103 	orr.w	r1, r5, r3
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	f1c4 040c 	rsb	r4, r4, #12
 8000342:	f1c4 0220 	rsb	r2, r4, #32
 8000346:	fa20 f002 	lsr.w	r0, r0, r2
 800034a:	fa01 f304 	lsl.w	r3, r1, r4
 800034e:	ea40 0003 	orr.w	r0, r0, r3
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	fa21 f004 	lsr.w	r0, r1, r4
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	f094 0f00 	teq	r4, #0
 8000362:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000366:	bf06      	itte	eq
 8000368:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800036c:	3401      	addeq	r4, #1
 800036e:	3d01      	subne	r5, #1
 8000370:	e74e      	b.n	8000210 <__adddf3+0x8c>
 8000372:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000376:	bf18      	it	ne
 8000378:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800037c:	d029      	beq.n	80003d2 <__adddf3+0x24e>
 800037e:	ea94 0f05 	teq	r4, r5
 8000382:	bf08      	it	eq
 8000384:	ea90 0f02 	teqeq	r0, r2
 8000388:	d005      	beq.n	8000396 <__adddf3+0x212>
 800038a:	ea54 0c00 	orrs.w	ip, r4, r0
 800038e:	bf04      	itt	eq
 8000390:	4619      	moveq	r1, r3
 8000392:	4610      	moveq	r0, r2
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	ea91 0f03 	teq	r1, r3
 800039a:	bf1e      	ittt	ne
 800039c:	2100      	movne	r1, #0
 800039e:	2000      	movne	r0, #0
 80003a0:	bd30      	popne	{r4, r5, pc}
 80003a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a6:	d105      	bne.n	80003b4 <__adddf3+0x230>
 80003a8:	0040      	lsls	r0, r0, #1
 80003aa:	4149      	adcs	r1, r1
 80003ac:	bf28      	it	cs
 80003ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b2:	bd30      	pop	{r4, r5, pc}
 80003b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b8:	bf3c      	itt	cc
 80003ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003be:	bd30      	popcc	{r4, r5, pc}
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003cc:	f04f 0000 	mov.w	r0, #0
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf1a      	itte	ne
 80003d8:	4619      	movne	r1, r3
 80003da:	4610      	movne	r0, r2
 80003dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e0:	bf1c      	itt	ne
 80003e2:	460b      	movne	r3, r1
 80003e4:	4602      	movne	r2, r0
 80003e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ea:	bf06      	itte	eq
 80003ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f0:	ea91 0f03 	teqeq	r1, r3
 80003f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	bf00      	nop

080003fc <__aeabi_ui2d>:
 80003fc:	f090 0f00 	teq	r0, #0
 8000400:	bf04      	itt	eq
 8000402:	2100      	moveq	r1, #0
 8000404:	4770      	bxeq	lr
 8000406:	b530      	push	{r4, r5, lr}
 8000408:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800040c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000410:	f04f 0500 	mov.w	r5, #0
 8000414:	f04f 0100 	mov.w	r1, #0
 8000418:	e750      	b.n	80002bc <__adddf3+0x138>
 800041a:	bf00      	nop

0800041c <__aeabi_i2d>:
 800041c:	f090 0f00 	teq	r0, #0
 8000420:	bf04      	itt	eq
 8000422:	2100      	moveq	r1, #0
 8000424:	4770      	bxeq	lr
 8000426:	b530      	push	{r4, r5, lr}
 8000428:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800042c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000430:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000434:	bf48      	it	mi
 8000436:	4240      	negmi	r0, r0
 8000438:	f04f 0100 	mov.w	r1, #0
 800043c:	e73e      	b.n	80002bc <__adddf3+0x138>
 800043e:	bf00      	nop

08000440 <__aeabi_f2d>:
 8000440:	0042      	lsls	r2, r0, #1
 8000442:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000446:	ea4f 0131 	mov.w	r1, r1, rrx
 800044a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044e:	bf1f      	itttt	ne
 8000450:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000454:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000458:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800045c:	4770      	bxne	lr
 800045e:	f092 0f00 	teq	r2, #0
 8000462:	bf14      	ite	ne
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e720      	b.n	80002bc <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aedc 	beq.w	800026a <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6c1      	b.n	800026a <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__gedf2>:
 80004e8:	f04f 3cff 	mov.w	ip, #4294967295
 80004ec:	e006      	b.n	80004fc <__cmpdf2+0x4>
 80004ee:	bf00      	nop

080004f0 <__ledf2>:
 80004f0:	f04f 0c01 	mov.w	ip, #1
 80004f4:	e002      	b.n	80004fc <__cmpdf2+0x4>
 80004f6:	bf00      	nop

080004f8 <__cmpdf2>:
 80004f8:	f04f 0c01 	mov.w	ip, #1
 80004fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000500:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000504:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000508:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800050c:	bf18      	it	ne
 800050e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000512:	d01b      	beq.n	800054c <__cmpdf2+0x54>
 8000514:	b001      	add	sp, #4
 8000516:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800051a:	bf0c      	ite	eq
 800051c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000520:	ea91 0f03 	teqne	r1, r3
 8000524:	bf02      	ittt	eq
 8000526:	ea90 0f02 	teqeq	r0, r2
 800052a:	2000      	moveq	r0, #0
 800052c:	4770      	bxeq	lr
 800052e:	f110 0f00 	cmn.w	r0, #0
 8000532:	ea91 0f03 	teq	r1, r3
 8000536:	bf58      	it	pl
 8000538:	4299      	cmppl	r1, r3
 800053a:	bf08      	it	eq
 800053c:	4290      	cmpeq	r0, r2
 800053e:	bf2c      	ite	cs
 8000540:	17d8      	asrcs	r0, r3, #31
 8000542:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000546:	f040 0001 	orr.w	r0, r0, #1
 800054a:	4770      	bx	lr
 800054c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000554:	d102      	bne.n	800055c <__cmpdf2+0x64>
 8000556:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800055a:	d107      	bne.n	800056c <__cmpdf2+0x74>
 800055c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000560:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000564:	d1d6      	bne.n	8000514 <__cmpdf2+0x1c>
 8000566:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800056a:	d0d3      	beq.n	8000514 <__cmpdf2+0x1c>
 800056c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__aeabi_cdrcmple>:
 8000574:	4684      	mov	ip, r0
 8000576:	4610      	mov	r0, r2
 8000578:	4662      	mov	r2, ip
 800057a:	468c      	mov	ip, r1
 800057c:	4619      	mov	r1, r3
 800057e:	4663      	mov	r3, ip
 8000580:	e000      	b.n	8000584 <__aeabi_cdcmpeq>
 8000582:	bf00      	nop

08000584 <__aeabi_cdcmpeq>:
 8000584:	b501      	push	{r0, lr}
 8000586:	f7ff ffb7 	bl	80004f8 <__cmpdf2>
 800058a:	2800      	cmp	r0, #0
 800058c:	bf48      	it	mi
 800058e:	f110 0f00 	cmnmi.w	r0, #0
 8000592:	bd01      	pop	{r0, pc}

08000594 <__aeabi_dcmpeq>:
 8000594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000598:	f7ff fff4 	bl	8000584 <__aeabi_cdcmpeq>
 800059c:	bf0c      	ite	eq
 800059e:	2001      	moveq	r0, #1
 80005a0:	2000      	movne	r0, #0
 80005a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a6:	bf00      	nop

080005a8 <__aeabi_dcmplt>:
 80005a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ac:	f7ff ffea 	bl	8000584 <__aeabi_cdcmpeq>
 80005b0:	bf34      	ite	cc
 80005b2:	2001      	movcc	r0, #1
 80005b4:	2000      	movcs	r0, #0
 80005b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ba:	bf00      	nop

080005bc <__aeabi_dcmple>:
 80005bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c0:	f7ff ffe0 	bl	8000584 <__aeabi_cdcmpeq>
 80005c4:	bf94      	ite	ls
 80005c6:	2001      	movls	r0, #1
 80005c8:	2000      	movhi	r0, #0
 80005ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ce:	bf00      	nop

080005d0 <__aeabi_dcmpge>:
 80005d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d4:	f7ff ffce 	bl	8000574 <__aeabi_cdrcmple>
 80005d8:	bf94      	ite	ls
 80005da:	2001      	movls	r0, #1
 80005dc:	2000      	movhi	r0, #0
 80005de:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e2:	bf00      	nop

080005e4 <__aeabi_dcmpgt>:
 80005e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005e8:	f7ff ffc4 	bl	8000574 <__aeabi_cdrcmple>
 80005ec:	bf34      	ite	cc
 80005ee:	2001      	movcc	r0, #1
 80005f0:	2000      	movcs	r0, #0
 80005f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005f6:	bf00      	nop

080005f8 <__aeabi_frsub>:
 80005f8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005fc:	e002      	b.n	8000604 <__addsf3>
 80005fe:	bf00      	nop

08000600 <__aeabi_fsub>:
 8000600:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000604 <__addsf3>:
 8000604:	0042      	lsls	r2, r0, #1
 8000606:	bf1f      	itttt	ne
 8000608:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800060c:	ea92 0f03 	teqne	r2, r3
 8000610:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000614:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000618:	d06a      	beq.n	80006f0 <__addsf3+0xec>
 800061a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800061e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000622:	bfc1      	itttt	gt
 8000624:	18d2      	addgt	r2, r2, r3
 8000626:	4041      	eorgt	r1, r0
 8000628:	4048      	eorgt	r0, r1
 800062a:	4041      	eorgt	r1, r0
 800062c:	bfb8      	it	lt
 800062e:	425b      	neglt	r3, r3
 8000630:	2b19      	cmp	r3, #25
 8000632:	bf88      	it	hi
 8000634:	4770      	bxhi	lr
 8000636:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800063a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800063e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800064a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800064e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000652:	bf18      	it	ne
 8000654:	4249      	negne	r1, r1
 8000656:	ea92 0f03 	teq	r2, r3
 800065a:	d03f      	beq.n	80006dc <__addsf3+0xd8>
 800065c:	f1a2 0201 	sub.w	r2, r2, #1
 8000660:	fa41 fc03 	asr.w	ip, r1, r3
 8000664:	eb10 000c 	adds.w	r0, r0, ip
 8000668:	f1c3 0320 	rsb	r3, r3, #32
 800066c:	fa01 f103 	lsl.w	r1, r1, r3
 8000670:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000674:	d502      	bpl.n	800067c <__addsf3+0x78>
 8000676:	4249      	negs	r1, r1
 8000678:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800067c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000680:	d313      	bcc.n	80006aa <__addsf3+0xa6>
 8000682:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000686:	d306      	bcc.n	8000696 <__addsf3+0x92>
 8000688:	0840      	lsrs	r0, r0, #1
 800068a:	ea4f 0131 	mov.w	r1, r1, rrx
 800068e:	f102 0201 	add.w	r2, r2, #1
 8000692:	2afe      	cmp	r2, #254	; 0xfe
 8000694:	d251      	bcs.n	800073a <__addsf3+0x136>
 8000696:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800069a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800069e:	bf08      	it	eq
 80006a0:	f020 0001 	biceq.w	r0, r0, #1
 80006a4:	ea40 0003 	orr.w	r0, r0, r3
 80006a8:	4770      	bx	lr
 80006aa:	0049      	lsls	r1, r1, #1
 80006ac:	eb40 0000 	adc.w	r0, r0, r0
 80006b0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80006b4:	f1a2 0201 	sub.w	r2, r2, #1
 80006b8:	d1ed      	bne.n	8000696 <__addsf3+0x92>
 80006ba:	fab0 fc80 	clz	ip, r0
 80006be:	f1ac 0c08 	sub.w	ip, ip, #8
 80006c2:	ebb2 020c 	subs.w	r2, r2, ip
 80006c6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006ca:	bfaa      	itet	ge
 80006cc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006d0:	4252      	neglt	r2, r2
 80006d2:	4318      	orrge	r0, r3
 80006d4:	bfbc      	itt	lt
 80006d6:	40d0      	lsrlt	r0, r2
 80006d8:	4318      	orrlt	r0, r3
 80006da:	4770      	bx	lr
 80006dc:	f092 0f00 	teq	r2, #0
 80006e0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006e4:	bf06      	itte	eq
 80006e6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006ea:	3201      	addeq	r2, #1
 80006ec:	3b01      	subne	r3, #1
 80006ee:	e7b5      	b.n	800065c <__addsf3+0x58>
 80006f0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006f8:	bf18      	it	ne
 80006fa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006fe:	d021      	beq.n	8000744 <__addsf3+0x140>
 8000700:	ea92 0f03 	teq	r2, r3
 8000704:	d004      	beq.n	8000710 <__addsf3+0x10c>
 8000706:	f092 0f00 	teq	r2, #0
 800070a:	bf08      	it	eq
 800070c:	4608      	moveq	r0, r1
 800070e:	4770      	bx	lr
 8000710:	ea90 0f01 	teq	r0, r1
 8000714:	bf1c      	itt	ne
 8000716:	2000      	movne	r0, #0
 8000718:	4770      	bxne	lr
 800071a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800071e:	d104      	bne.n	800072a <__addsf3+0x126>
 8000720:	0040      	lsls	r0, r0, #1
 8000722:	bf28      	it	cs
 8000724:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000728:	4770      	bx	lr
 800072a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800072e:	bf3c      	itt	cc
 8000730:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000734:	4770      	bxcc	lr
 8000736:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800073a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800073e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000742:	4770      	bx	lr
 8000744:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000748:	bf16      	itet	ne
 800074a:	4608      	movne	r0, r1
 800074c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000750:	4601      	movne	r1, r0
 8000752:	0242      	lsls	r2, r0, #9
 8000754:	bf06      	itte	eq
 8000756:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800075a:	ea90 0f01 	teqeq	r0, r1
 800075e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000762:	4770      	bx	lr

08000764 <__aeabi_ui2f>:
 8000764:	f04f 0300 	mov.w	r3, #0
 8000768:	e004      	b.n	8000774 <__aeabi_i2f+0x8>
 800076a:	bf00      	nop

0800076c <__aeabi_i2f>:
 800076c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000770:	bf48      	it	mi
 8000772:	4240      	negmi	r0, r0
 8000774:	ea5f 0c00 	movs.w	ip, r0
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000780:	4601      	mov	r1, r0
 8000782:	f04f 0000 	mov.w	r0, #0
 8000786:	e01c      	b.n	80007c2 <__aeabi_l2f+0x2a>

08000788 <__aeabi_ul2f>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	f04f 0300 	mov.w	r3, #0
 8000794:	e00a      	b.n	80007ac <__aeabi_l2f+0x14>
 8000796:	bf00      	nop

08000798 <__aeabi_l2f>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007a4:	d502      	bpl.n	80007ac <__aeabi_l2f+0x14>
 80007a6:	4240      	negs	r0, r0
 80007a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ac:	ea5f 0c01 	movs.w	ip, r1
 80007b0:	bf02      	ittt	eq
 80007b2:	4684      	moveq	ip, r0
 80007b4:	4601      	moveq	r1, r0
 80007b6:	2000      	moveq	r0, #0
 80007b8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007bc:	bf08      	it	eq
 80007be:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007c2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007c6:	fabc f28c 	clz	r2, ip
 80007ca:	3a08      	subs	r2, #8
 80007cc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007d0:	db10      	blt.n	80007f4 <__aeabi_l2f+0x5c>
 80007d2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007d6:	4463      	add	r3, ip
 80007d8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007dc:	f1c2 0220 	rsb	r2, r2, #32
 80007e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007e4:	fa20 f202 	lsr.w	r2, r0, r2
 80007e8:	eb43 0002 	adc.w	r0, r3, r2
 80007ec:	bf08      	it	eq
 80007ee:	f020 0001 	biceq.w	r0, r0, #1
 80007f2:	4770      	bx	lr
 80007f4:	f102 0220 	add.w	r2, r2, #32
 80007f8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007fc:	f1c2 0220 	rsb	r2, r2, #32
 8000800:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000804:	fa21 f202 	lsr.w	r2, r1, r2
 8000808:	eb43 0002 	adc.w	r0, r3, r2
 800080c:	bf08      	it	eq
 800080e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000812:	4770      	bx	lr

08000814 <__aeabi_f2uiz>:
 8000814:	0042      	lsls	r2, r0, #1
 8000816:	d20e      	bcs.n	8000836 <__aeabi_f2uiz+0x22>
 8000818:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800081c:	d30b      	bcc.n	8000836 <__aeabi_f2uiz+0x22>
 800081e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000822:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000826:	d409      	bmi.n	800083c <__aeabi_f2uiz+0x28>
 8000828:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800082c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000830:	fa23 f002 	lsr.w	r0, r3, r2
 8000834:	4770      	bx	lr
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	4770      	bx	lr
 800083c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000840:	d101      	bne.n	8000846 <__aeabi_f2uiz+0x32>
 8000842:	0242      	lsls	r2, r0, #9
 8000844:	d102      	bne.n	800084c <__aeabi_f2uiz+0x38>
 8000846:	f04f 30ff 	mov.w	r0, #4294967295
 800084a:	4770      	bx	lr
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop

08000854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <HAL_InitTick+0x3c>)
{
 8000858:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800085a:	7818      	ldrb	r0, [r3, #0]
 800085c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000860:	fbb3 f3f0 	udiv	r3, r3, r0
 8000864:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <HAL_InitTick+0x40>)
 8000866:	6810      	ldr	r0, [r2, #0]
 8000868:	fbb0 f0f3 	udiv	r0, r0, r3
 800086c:	f000 f89e 	bl	80009ac <HAL_SYSTICK_Config>
 8000870:	4604      	mov	r4, r0
 8000872:	b958      	cbnz	r0, 800088c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000874:	2d0f      	cmp	r5, #15
 8000876:	d809      	bhi.n	800088c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000878:	4602      	mov	r2, r0
 800087a:	4629      	mov	r1, r5
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f000 f854 	bl	800092c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <HAL_InitTick+0x44>)
 8000886:	4620      	mov	r0, r4
 8000888:	601d      	str	r5, [r3, #0]
 800088a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800088c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800088e:	bd38      	pop	{r3, r4, r5, pc}
 8000890:	20000000 	.word	0x20000000
 8000894:	2000011c 	.word	0x2000011c
 8000898:	20000004 	.word	0x20000004

0800089c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800089c:	4a07      	ldr	r2, [pc, #28]	; (80008bc <HAL_Init+0x20>)
{
 800089e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a4:	f043 0310 	orr.w	r3, r3, #16
 80008a8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008aa:	f000 f82d 	bl	8000908 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f7ff ffd0 	bl	8000854 <HAL_InitTick>
  HAL_MspInit();
 80008b4:	f003 fdc0 	bl	8004438 <HAL_MspInit>
}
 80008b8:	2000      	movs	r0, #0
 80008ba:	bd08      	pop	{r3, pc}
 80008bc:	40022000 	.word	0x40022000

080008c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80008c0:	4a03      	ldr	r2, [pc, #12]	; (80008d0 <HAL_IncTick+0x10>)
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <HAL_IncTick+0x14>)
 80008c4:	6811      	ldr	r1, [r2, #0]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	440b      	add	r3, r1
 80008ca:	6013      	str	r3, [r2, #0]
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	20000414 	.word	0x20000414
 80008d4:	20000000 	.word	0x20000000

080008d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008d8:	4b01      	ldr	r3, [pc, #4]	; (80008e0 <HAL_GetTick+0x8>)
 80008da:	6818      	ldr	r0, [r3, #0]
}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000414 	.word	0x20000414

080008e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e4:	b538      	push	{r3, r4, r5, lr}
 80008e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80008e8:	f7ff fff6 	bl	80008d8 <HAL_GetTick>
 80008ec:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ee:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80008f0:	bf1e      	ittt	ne
 80008f2:	4b04      	ldrne	r3, [pc, #16]	; (8000904 <HAL_Delay+0x20>)
 80008f4:	781b      	ldrbne	r3, [r3, #0]
 80008f6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008f8:	f7ff ffee 	bl	80008d8 <HAL_GetTick>
 80008fc:	1b40      	subs	r0, r0, r5
 80008fe:	4284      	cmp	r4, r0
 8000900:	d8fa      	bhi.n	80008f8 <HAL_Delay+0x14>
  {
  }
}
 8000902:	bd38      	pop	{r3, r4, r5, pc}
 8000904:	20000000 	.word	0x20000000

08000908 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800090a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800090c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800090e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000912:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000916:	041b      	lsls	r3, r3, #16
 8000918:	0c1b      	lsrs	r3, r3, #16
 800091a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800091e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000922:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000924:	60d3      	str	r3, [r2, #12]
 8000926:	4770      	bx	lr
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800092e:	b530      	push	{r4, r5, lr}
 8000930:	68dc      	ldr	r4, [r3, #12]
 8000932:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000936:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800093c:	2b04      	cmp	r3, #4
 800093e:	bf28      	it	cs
 8000940:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000942:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000948:	bf98      	it	ls
 800094a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	fa05 f303 	lsl.w	r3, r5, r3
 8000950:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000954:	bf88      	it	hi
 8000956:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	4019      	ands	r1, r3
 800095a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800095c:	fa05 f404 	lsl.w	r4, r5, r4
 8000960:	3c01      	subs	r4, #1
 8000962:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000964:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000966:	ea42 0201 	orr.w	r2, r2, r1
 800096a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096e:	bfaf      	iteee	ge
 8000970:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000974:	4b06      	ldrlt	r3, [pc, #24]	; (8000990 <HAL_NVIC_SetPriority+0x64>)
 8000976:	f000 000f 	andlt.w	r0, r0, #15
 800097a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097c:	bfa5      	ittet	ge
 800097e:	b2d2      	uxtbge	r2, r2
 8000980:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000984:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000986:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800098a:	bd30      	pop	{r4, r5, pc}
 800098c:	e000ed00 	.word	0xe000ed00
 8000990:	e000ed14 	.word	0xe000ed14

08000994 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000994:	2301      	movs	r3, #1
 8000996:	0942      	lsrs	r2, r0, #5
 8000998:	f000 001f 	and.w	r0, r0, #31
 800099c:	fa03 f000 	lsl.w	r0, r3, r0
 80009a0:	4b01      	ldr	r3, [pc, #4]	; (80009a8 <HAL_NVIC_EnableIRQ+0x14>)
 80009a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80009a6:	4770      	bx	lr
 80009a8:	e000e100 	.word	0xe000e100

080009ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ac:	3801      	subs	r0, #1
 80009ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009b2:	d20a      	bcs.n	80009ca <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b8:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ba:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000e010 	.word	0xe000e010
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80009da:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	bf0c      	ite	eq
 80009e0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80009e4:	f022 0204 	bicne.w	r2, r2, #4
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	4770      	bx	lr
 80009ec:	e000e010 	.word	0xe000e010

080009f0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80009f0:	4770      	bx	lr

080009f2 <HAL_SYSTICK_IRQHandler>:
{
 80009f2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80009f4:	f7ff fffc 	bl	80009f0 <HAL_SYSTICK_Callback>
 80009f8:	bd08      	pop	{r3, pc}
	...

080009fc <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009fc:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000a00:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d003      	beq.n	8000a0e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a06:	2304      	movs	r3, #4
 8000a08:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a0e:	6803      	ldr	r3, [r0, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	f022 020e 	bic.w	r2, r2, #14
 8000a16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	f022 0201 	bic.w	r2, r2, #1
 8000a1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a20:	4a18      	ldr	r2, [pc, #96]	; (8000a84 <HAL_DMA_Abort_IT+0x88>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d01f      	beq.n	8000a66 <HAL_DMA_Abort_IT+0x6a>
 8000a26:	3214      	adds	r2, #20
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d01e      	beq.n	8000a6a <HAL_DMA_Abort_IT+0x6e>
 8000a2c:	3214      	adds	r2, #20
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d01d      	beq.n	8000a6e <HAL_DMA_Abort_IT+0x72>
 8000a32:	3214      	adds	r2, #20
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d01d      	beq.n	8000a74 <HAL_DMA_Abort_IT+0x78>
 8000a38:	3214      	adds	r2, #20
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d01d      	beq.n	8000a7a <HAL_DMA_Abort_IT+0x7e>
 8000a3e:	3214      	adds	r2, #20
 8000a40:	4293      	cmp	r3, r2
 8000a42:	bf0c      	ite	eq
 8000a44:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000a48:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000a4c:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a4e:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a50:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000a52:	2301      	movs	r3, #1
 8000a54:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a58:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000a5a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000a5e:	b17b      	cbz	r3, 8000a80 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000a60:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000a62:	4620      	mov	r0, r4
 8000a64:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a66:	2301      	movs	r3, #1
 8000a68:	e7f0      	b.n	8000a4c <HAL_DMA_Abort_IT+0x50>
 8000a6a:	2310      	movs	r3, #16
 8000a6c:	e7ee      	b.n	8000a4c <HAL_DMA_Abort_IT+0x50>
 8000a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a72:	e7eb      	b.n	8000a4c <HAL_DMA_Abort_IT+0x50>
 8000a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a78:	e7e8      	b.n	8000a4c <HAL_DMA_Abort_IT+0x50>
 8000a7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a7e:	e7e5      	b.n	8000a4c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000a80:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000a82:	bd10      	pop	{r4, pc}
 8000a84:	40020008 	.word	0x40020008
 8000a88:	40020000 	.word	0x40020000

08000a8c <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000a8c:	4a11      	ldr	r2, [pc, #68]	; (8000ad4 <FLASH_SetErrorCode+0x48>)
 8000a8e:	68d3      	ldr	r3, [r2, #12]
 8000a90:	f013 0310 	ands.w	r3, r3, #16
 8000a94:	d005      	beq.n	8000aa2 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000a96:	4910      	ldr	r1, [pc, #64]	; (8000ad8 <FLASH_SetErrorCode+0x4c>)
 8000a98:	69cb      	ldr	r3, [r1, #28]
 8000a9a:	f043 0302 	orr.w	r3, r3, #2
 8000a9e:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000aa0:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000aa2:	68d2      	ldr	r2, [r2, #12]
 8000aa4:	0750      	lsls	r0, r2, #29
 8000aa6:	d506      	bpl.n	8000ab6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000aa8:	490b      	ldr	r1, [pc, #44]	; (8000ad8 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000aaa:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000aae:	69ca      	ldr	r2, [r1, #28]
 8000ab0:	f042 0201 	orr.w	r2, r2, #1
 8000ab4:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000ab6:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <FLASH_SetErrorCode+0x48>)
 8000ab8:	69d1      	ldr	r1, [r2, #28]
 8000aba:	07c9      	lsls	r1, r1, #31
 8000abc:	d508      	bpl.n	8000ad0 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000abe:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <FLASH_SetErrorCode+0x4c>)
 8000ac0:	69c1      	ldr	r1, [r0, #28]
 8000ac2:	f041 0104 	orr.w	r1, r1, #4
 8000ac6:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000ac8:	69d1      	ldr	r1, [r2, #28]
 8000aca:	f021 0101 	bic.w	r1, r1, #1
 8000ace:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000ad0:	60d3      	str	r3, [r2, #12]
 8000ad2:	4770      	bx	lr
 8000ad4:	40022000 	.word	0x40022000
 8000ad8:	20000418 	.word	0x20000418

08000adc <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_FLASH_Unlock+0x1c>)
 8000ade:	6918      	ldr	r0, [r3, #16]
 8000ae0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000ae4:	d007      	beq.n	8000af6 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <HAL_FLASH_Unlock+0x20>)
 8000ae8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000aea:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000aee:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000af0:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000af2:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8000af6:	4770      	bx	lr
 8000af8:	40022000 	.word	0x40022000
 8000afc:	45670123 	.word	0x45670123

08000b00 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000b00:	4a03      	ldr	r2, [pc, #12]	; (8000b10 <HAL_FLASH_Lock+0x10>)
}
 8000b02:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000b04:	6913      	ldr	r3, [r2, #16]
 8000b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0a:	6113      	str	r3, [r2, #16]
}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40022000 	.word	0x40022000

08000b14 <FLASH_WaitForLastOperation>:
{
 8000b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b16:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8000b18:	f7ff fede 	bl	80008d8 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000b1c:	4c11      	ldr	r4, [pc, #68]	; (8000b64 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 8000b1e:	4607      	mov	r7, r0
 8000b20:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000b22:	68e3      	ldr	r3, [r4, #12]
 8000b24:	07d8      	lsls	r0, r3, #31
 8000b26:	d412      	bmi.n	8000b4e <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000b28:	68e3      	ldr	r3, [r4, #12]
 8000b2a:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000b2c:	bf44      	itt	mi
 8000b2e:	2320      	movmi	r3, #32
 8000b30:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b32:	68eb      	ldr	r3, [r5, #12]
 8000b34:	06da      	lsls	r2, r3, #27
 8000b36:	d406      	bmi.n	8000b46 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000b38:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b3a:	07db      	lsls	r3, r3, #31
 8000b3c:	d403      	bmi.n	8000b46 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000b3e:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000b40:	f010 0004 	ands.w	r0, r0, #4
 8000b44:	d002      	beq.n	8000b4c <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 8000b46:	f7ff ffa1 	bl	8000a8c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000b4a:	2001      	movs	r0, #1
}
 8000b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000b4e:	1c73      	adds	r3, r6, #1
 8000b50:	d0e7      	beq.n	8000b22 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000b52:	b90e      	cbnz	r6, 8000b58 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8000b54:	2003      	movs	r0, #3
 8000b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000b58:	f7ff febe 	bl	80008d8 <HAL_GetTick>
 8000b5c:	1bc0      	subs	r0, r0, r7
 8000b5e:	4286      	cmp	r6, r0
 8000b60:	d2df      	bcs.n	8000b22 <FLASH_WaitForLastOperation+0xe>
 8000b62:	e7f7      	b.n	8000b54 <FLASH_WaitForLastOperation+0x40>
 8000b64:	40022000 	.word	0x40022000

08000b68 <HAL_FLASH_Program>:
{
 8000b68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8000b6c:	4c1f      	ldr	r4, [pc, #124]	; (8000bec <HAL_FLASH_Program+0x84>)
{
 8000b6e:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8000b70:	7e23      	ldrb	r3, [r4, #24]
{
 8000b72:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8000b74:	2b01      	cmp	r3, #1
{
 8000b76:	460f      	mov	r7, r1
 8000b78:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8000b7a:	d033      	beq.n	8000be4 <HAL_FLASH_Program+0x7c>
 8000b7c:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b7e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000b82:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b84:	f7ff ffc6 	bl	8000b14 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000b88:	bb40      	cbnz	r0, 8000bdc <HAL_FLASH_Program+0x74>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000b8a:	2d01      	cmp	r5, #1
 8000b8c:	d003      	beq.n	8000b96 <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 8000b8e:	2d02      	cmp	r5, #2
 8000b90:	bf0c      	ite	eq
 8000b92:	2502      	moveq	r5, #2
 8000b94:	2504      	movne	r5, #4
 8000b96:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b98:	46b2      	mov	sl, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000b9a:	f8df b054 	ldr.w	fp, [pc, #84]	; 8000bf0 <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000b9e:	0132      	lsls	r2, r6, #4
 8000ba0:	4640      	mov	r0, r8
 8000ba2:	4649      	mov	r1, r9
 8000ba4:	f7ff fadc 	bl	8000160 <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ba8:	f8c4 a01c 	str.w	sl, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000bac:	f8db 3010 	ldr.w	r3, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000bb0:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	f8cb 3010 	str.w	r3, [fp, #16]
  *(__IO uint16_t*)Address = Data;
 8000bba:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000bbe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bc2:	f7ff ffa7 	bl	8000b14 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000bc6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8000bca:	f023 0301 	bic.w	r3, r3, #1
 8000bce:	f8cb 3010 	str.w	r3, [fp, #16]
      if (status != HAL_OK)
 8000bd2:	b918      	cbnz	r0, 8000bdc <HAL_FLASH_Program+0x74>
 8000bd4:	3601      	adds	r6, #1
    for (index = 0U; index < nbiterations; index++)
 8000bd6:	b2f3      	uxtb	r3, r6
 8000bd8:	429d      	cmp	r5, r3
 8000bda:	d8e0      	bhi.n	8000b9e <HAL_FLASH_Program+0x36>
  __HAL_UNLOCK(&pFlash);
 8000bdc:	2300      	movs	r3, #0
 8000bde:	7623      	strb	r3, [r4, #24]
  return status;
 8000be0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8000be4:	2002      	movs	r0, #2
}
 8000be6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bea:	bf00      	nop
 8000bec:	20000418 	.word	0x20000418
 8000bf0:	40022000 	.word	0x40022000

08000bf4 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <FLASH_MassErase.isra.0+0x1c>)
 8000bf8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <FLASH_MassErase.isra.0+0x20>)
 8000bfc:	691a      	ldr	r2, [r3, #16]
 8000bfe:	f042 0204 	orr.w	r2, r2, #4
 8000c02:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000c04:	691a      	ldr	r2, [r3, #16]
 8000c06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c0a:	611a      	str	r2, [r3, #16]
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000418 	.word	0x20000418
 8000c14:	40022000 	.word	0x40022000

08000c18 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c18:	2200      	movs	r2, #0
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <FLASH_PageErase+0x1c>)
 8000c1c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <FLASH_PageErase+0x20>)
 8000c20:	691a      	ldr	r2, [r3, #16]
 8000c22:	f042 0202 	orr.w	r2, r2, #2
 8000c26:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000c28:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000c2a:	691a      	ldr	r2, [r3, #16]
 8000c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c30:	611a      	str	r2, [r3, #16]
 8000c32:	4770      	bx	lr
 8000c34:	20000418 	.word	0x20000418
 8000c38:	40022000 	.word	0x40022000

08000c3c <HAL_FLASHEx_Erase>:
{
 8000c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000c40:	4d23      	ldr	r5, [pc, #140]	; (8000cd0 <HAL_FLASHEx_Erase+0x94>)
{
 8000c42:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 8000c44:	7e2b      	ldrb	r3, [r5, #24]
{
 8000c46:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d03d      	beq.n	8000cc8 <HAL_FLASHEx_Erase+0x8c>
 8000c4c:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000c4e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 8000c50:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000c52:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000c54:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000c58:	d113      	bne.n	8000c82 <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000c5a:	f7ff ff5b 	bl	8000b14 <FLASH_WaitForLastOperation>
 8000c5e:	b120      	cbz	r0, 8000c6a <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c60:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8000c62:	2300      	movs	r3, #0
 8000c64:	762b      	strb	r3, [r5, #24]
  return status;
 8000c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 8000c6a:	f7ff ffc3 	bl	8000bf4 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c72:	f7ff ff4f 	bl	8000b14 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000c76:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <HAL_FLASHEx_Erase+0x98>)
 8000c78:	6913      	ldr	r3, [r2, #16]
 8000c7a:	f023 0304 	bic.w	r3, r3, #4
 8000c7e:	6113      	str	r3, [r2, #16]
 8000c80:	e7ef      	b.n	8000c62 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000c82:	f7ff ff47 	bl	8000b14 <FLASH_WaitForLastOperation>
 8000c86:	2800      	cmp	r0, #0
 8000c88:	d1ea      	bne.n	8000c60 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8e:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c92:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8000c94:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000c96:	4c0f      	ldr	r4, [pc, #60]	; (8000cd4 <HAL_FLASHEx_Erase+0x98>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8000ca0:	429e      	cmp	r6, r3
 8000ca2:	d2de      	bcs.n	8000c62 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8000ca4:	4630      	mov	r0, r6
 8000ca6:	f7ff ffb7 	bl	8000c18 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000caa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cae:	f7ff ff31 	bl	8000b14 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000cb2:	6923      	ldr	r3, [r4, #16]
 8000cb4:	f023 0302 	bic.w	r3, r3, #2
 8000cb8:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8000cba:	b110      	cbz	r0, 8000cc2 <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8000cbc:	f8c8 6000 	str.w	r6, [r8]
            break;
 8000cc0:	e7cf      	b.n	8000c62 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8000cc2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000cc6:	e7e7      	b.n	8000c98 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8000cc8:	2002      	movs	r0, #2
}
 8000cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000418 	.word	0x20000418
 8000cd4:	40022000 	.word	0x40022000

08000cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000cdc:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000cde:	4616      	mov	r6, r2
 8000ce0:	4b65      	ldr	r3, [pc, #404]	; (8000e78 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ce2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000e88 <HAL_GPIO_Init+0x1b0>
 8000ce6:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000e8c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000cea:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cee:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000cf0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cf4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000cf8:	45a0      	cmp	r8, r4
 8000cfa:	d17f      	bne.n	8000dfc <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000cfc:	684d      	ldr	r5, [r1, #4]
 8000cfe:	2d12      	cmp	r5, #18
 8000d00:	f000 80af 	beq.w	8000e62 <HAL_GPIO_Init+0x18a>
 8000d04:	f200 8088 	bhi.w	8000e18 <HAL_GPIO_Init+0x140>
 8000d08:	2d02      	cmp	r5, #2
 8000d0a:	f000 80a7 	beq.w	8000e5c <HAL_GPIO_Init+0x184>
 8000d0e:	d87c      	bhi.n	8000e0a <HAL_GPIO_Init+0x132>
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	f000 808e 	beq.w	8000e32 <HAL_GPIO_Init+0x15a>
 8000d16:	2d01      	cmp	r5, #1
 8000d18:	f000 809e 	beq.w	8000e58 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d1c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d20:	2cff      	cmp	r4, #255	; 0xff
 8000d22:	bf93      	iteet	ls
 8000d24:	4682      	movls	sl, r0
 8000d26:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000d2a:	3d08      	subhi	r5, #8
 8000d2c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000d30:	bf92      	itee	ls
 8000d32:	00b5      	lslls	r5, r6, #2
 8000d34:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000d38:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d3a:	fa09 f805 	lsl.w	r8, r9, r5
 8000d3e:	ea2b 0808 	bic.w	r8, fp, r8
 8000d42:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d46:	bf88      	it	hi
 8000d48:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d4c:	ea48 0505 	orr.w	r5, r8, r5
 8000d50:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d54:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000d58:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000d5c:	d04e      	beq.n	8000dfc <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d5e:	4d47      	ldr	r5, [pc, #284]	; (8000e7c <HAL_GPIO_Init+0x1a4>)
 8000d60:	4f46      	ldr	r7, [pc, #280]	; (8000e7c <HAL_GPIO_Init+0x1a4>)
 8000d62:	69ad      	ldr	r5, [r5, #24]
 8000d64:	f026 0803 	bic.w	r8, r6, #3
 8000d68:	f045 0501 	orr.w	r5, r5, #1
 8000d6c:	61bd      	str	r5, [r7, #24]
 8000d6e:	69bd      	ldr	r5, [r7, #24]
 8000d70:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000d74:	f005 0501 	and.w	r5, r5, #1
 8000d78:	9501      	str	r5, [sp, #4]
 8000d7a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d7e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d82:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d84:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000d88:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d8c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000d90:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d94:	4d3a      	ldr	r5, [pc, #232]	; (8000e80 <HAL_GPIO_Init+0x1a8>)
 8000d96:	42a8      	cmp	r0, r5
 8000d98:	d068      	beq.n	8000e6c <HAL_GPIO_Init+0x194>
 8000d9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d9e:	42a8      	cmp	r0, r5
 8000da0:	d066      	beq.n	8000e70 <HAL_GPIO_Init+0x198>
 8000da2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000da6:	42a8      	cmp	r0, r5
 8000da8:	d064      	beq.n	8000e74 <HAL_GPIO_Init+0x19c>
 8000daa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dae:	42a8      	cmp	r0, r5
 8000db0:	bf0c      	ite	eq
 8000db2:	2503      	moveq	r5, #3
 8000db4:	2504      	movne	r5, #4
 8000db6:	fa05 f50b 	lsl.w	r5, r5, fp
 8000dba:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000dbe:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dc2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dc4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000dc8:	bf14      	ite	ne
 8000dca:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dcc:	43a5      	biceq	r5, r4
 8000dce:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dd2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd6:	bf14      	ite	ne
 8000dd8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dda:	43a5      	biceq	r5, r4
 8000ddc:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dde:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000de0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000de4:	bf14      	ite	ne
 8000de6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000de8:	43a5      	biceq	r5, r4
 8000dea:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dec:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dee:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000df2:	bf14      	ite	ne
 8000df4:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000df6:	ea25 0404 	biceq.w	r4, r5, r4
 8000dfa:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000dfc:	3601      	adds	r6, #1
 8000dfe:	2e10      	cmp	r6, #16
 8000e00:	f47f af73 	bne.w	8000cea <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000e04:	b003      	add	sp, #12
 8000e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000e0a:	2d03      	cmp	r5, #3
 8000e0c:	d022      	beq.n	8000e54 <HAL_GPIO_Init+0x17c>
 8000e0e:	2d11      	cmp	r5, #17
 8000e10:	d184      	bne.n	8000d1c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e12:	68ca      	ldr	r2, [r1, #12]
 8000e14:	3204      	adds	r2, #4
          break;
 8000e16:	e781      	b.n	8000d1c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000e18:	4f1a      	ldr	r7, [pc, #104]	; (8000e84 <HAL_GPIO_Init+0x1ac>)
 8000e1a:	42bd      	cmp	r5, r7
 8000e1c:	d009      	beq.n	8000e32 <HAL_GPIO_Init+0x15a>
 8000e1e:	d812      	bhi.n	8000e46 <HAL_GPIO_Init+0x16e>
 8000e20:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000e90 <HAL_GPIO_Init+0x1b8>
 8000e24:	454d      	cmp	r5, r9
 8000e26:	d004      	beq.n	8000e32 <HAL_GPIO_Init+0x15a>
 8000e28:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000e2c:	454d      	cmp	r5, r9
 8000e2e:	f47f af75 	bne.w	8000d1c <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e32:	688a      	ldr	r2, [r1, #8]
 8000e34:	b1c2      	cbz	r2, 8000e68 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e36:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000e38:	bf0c      	ite	eq
 8000e3a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000e3e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e42:	2208      	movs	r2, #8
 8000e44:	e76a      	b.n	8000d1c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000e46:	4575      	cmp	r5, lr
 8000e48:	d0f3      	beq.n	8000e32 <HAL_GPIO_Init+0x15a>
 8000e4a:	4565      	cmp	r5, ip
 8000e4c:	d0f1      	beq.n	8000e32 <HAL_GPIO_Init+0x15a>
 8000e4e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000e94 <HAL_GPIO_Init+0x1bc>
 8000e52:	e7eb      	b.n	8000e2c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e54:	2200      	movs	r2, #0
 8000e56:	e761      	b.n	8000d1c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e58:	68ca      	ldr	r2, [r1, #12]
          break;
 8000e5a:	e75f      	b.n	8000d1c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e5c:	68ca      	ldr	r2, [r1, #12]
 8000e5e:	3208      	adds	r2, #8
          break;
 8000e60:	e75c      	b.n	8000d1c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e62:	68ca      	ldr	r2, [r1, #12]
 8000e64:	320c      	adds	r2, #12
          break;
 8000e66:	e759      	b.n	8000d1c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e68:	2204      	movs	r2, #4
 8000e6a:	e757      	b.n	8000d1c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e6c:	2500      	movs	r5, #0
 8000e6e:	e7a2      	b.n	8000db6 <HAL_GPIO_Init+0xde>
 8000e70:	2501      	movs	r5, #1
 8000e72:	e7a0      	b.n	8000db6 <HAL_GPIO_Init+0xde>
 8000e74:	2502      	movs	r5, #2
 8000e76:	e79e      	b.n	8000db6 <HAL_GPIO_Init+0xde>
 8000e78:	40010400 	.word	0x40010400
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40010800 	.word	0x40010800
 8000e84:	10210000 	.word	0x10210000
 8000e88:	10310000 	.word	0x10310000
 8000e8c:	10320000 	.word	0x10320000
 8000e90:	10110000 	.word	0x10110000
 8000e94:	10220000 	.word	0x10220000

08000e98 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e98:	b10a      	cbz	r2, 8000e9e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e9a:	6101      	str	r1, [r0, #16]
 8000e9c:	4770      	bx	lr
 8000e9e:	0409      	lsls	r1, r1, #16
 8000ea0:	e7fb      	b.n	8000e9a <HAL_GPIO_WritePin+0x2>

08000ea2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000ea6:	4604      	mov	r4, r0
{
 8000ea8:	b086      	sub	sp, #24
  if(hpcd == NULL)
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	d060      	beq.n	8000f70 <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000eae:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 8000eb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000eb6:	b91b      	cbnz	r3, 8000ec0 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000eb8:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ebc:	f003 fcb8 	bl	8004830 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ec0:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ec2:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000ec4:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8000ec6:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000eca:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 8000ece:	f001 fb53 	bl	8002578 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000ed6:	682b      	ldr	r3, [r5, #0]
 8000ed8:	f104 0804 	add.w	r8, r4, #4
 8000edc:	6033      	str	r3, [r6, #0]
 8000ede:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000ee2:	6820      	ldr	r0, [r4, #0]
 8000ee4:	f001 fb38 	bl	8002558 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000ee8:	2100      	movs	r1, #0
 8000eea:	6820      	ldr	r0, [r4, #0]
 8000eec:	f001 fb4e 	bl	800258c <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000ef4:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8000ef6:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000ef8:	4608      	mov	r0, r1
 8000efa:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 8000efe:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000f02:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000f04:	3101      	adds	r1, #1
 8000f06:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 8000f08:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000f0c:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8000f10:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 8000f12:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 8000f14:	6410      	str	r0, [r2, #64]	; 0x40
 8000f16:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 8000f1a:	d1f0      	bne.n	8000efe <HAL_PCD_Init+0x5c>
 8000f1c:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000f1e:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000f20:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000f24:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000f26:	3201      	adds	r2, #1
 8000f28:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 8000f2a:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000f2e:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8000f32:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8000f36:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 8000f3a:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 8000f3e:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 8000f42:	d1ed      	bne.n	8000f20 <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000f44:	466e      	mov	r6, sp
 8000f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f48:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f4a:	682b      	ldr	r3, [r5, #0]
 8000f4c:	6033      	str	r3, [r6, #0]
 8000f4e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000f52:	6820      	ldr	r0, [r4, #0]
 8000f54:	f001 fb1c 	bl	8002590 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 8000f58:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000f5a:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 8000f5e:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 8000f60:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 8000f64:	f001 fdec 	bl	8002b40 <USB_DevDisconnect>
  return HAL_OK;
 8000f68:	2000      	movs	r0, #0
}
 8000f6a:	b006      	add	sp, #24
 8000f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000f70:	2001      	movs	r0, #1
 8000f72:	e7fa      	b.n	8000f6a <HAL_PCD_Init+0xc8>

08000f74 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000f74:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000f78:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000f7a:	2b01      	cmp	r3, #1
{
 8000f7c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000f7e:	d00e      	beq.n	8000f9e <HAL_PCD_Start+0x2a>
 8000f80:	2101      	movs	r1, #1
 8000f82:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8000f86:	f003 fd80 	bl	8004a8a <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000f8a:	6820      	ldr	r0, [r4, #0]
 8000f8c:	f001 fdd6 	bl	8002b3c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000f90:	6820      	ldr	r0, [r4, #0]
 8000f92:	f001 fae8 	bl	8002566 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000f9c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000f9e:	2002      	movs	r0, #2
}
 8000fa0:	bd10      	pop	{r4, pc}

08000fa2 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000fa2:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 8000fa6:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000fa8:	2a01      	cmp	r2, #1
{
 8000faa:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000fac:	d00b      	beq.n	8000fc6 <HAL_PCD_SetAddress+0x24>
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 8000fb4:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8000fb8:	6800      	ldr	r0, [r0, #0]
 8000fba:	f001 fdb9 	bl	8002b30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 8000fc4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000fc6:	2002      	movs	r0, #2
  return HAL_OK;
}
 8000fc8:	bd10      	pop	{r4, pc}

08000fca <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000fca:	b538      	push	{r3, r4, r5, lr}
 8000fcc:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000fce:	b248      	sxtb	r0, r1
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000fd6:	bfb5      	itete	lt
 8000fd8:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000fdc:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000fe0:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000fe2:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000fe6:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 8000fe8:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000fea:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8000fec:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8000fee:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 8000ff2:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d009      	beq.n	800100c <HAL_PCD_EP_Open+0x42>
 8000ff8:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000ffa:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000ffc:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001000:	f001 fae2 	bl	80025c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001004:	2000      	movs	r0, #0
 8001006:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 800100a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800100c:	2002      	movs	r0, #2
}
 800100e:	bd38      	pop	{r3, r4, r5, pc}

08001010 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001010:	b24b      	sxtb	r3, r1
 8001012:	2b00      	cmp	r3, #0
 8001014:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001018:	bfb5      	itete	lt
 800101a:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800101e:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001022:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001024:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001028:	0fdb      	lsrs	r3, r3, #31
{  
 800102a:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 800102c:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 800102e:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8001030:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 8001034:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001036:	2b01      	cmp	r3, #1
 8001038:	d009      	beq.n	800104e <HAL_PCD_EP_Close+0x3e>
 800103a:	2301      	movs	r3, #1
 800103c:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001040:	6800      	ldr	r0, [r0, #0]
 8001042:	f001 fc33 	bl	80028ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001046:	2000      	movs	r0, #0
 8001048:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 800104c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800104e:	2002      	movs	r0, #2
}
 8001050:	bd10      	pop	{r4, pc}

08001052 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001052:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8001054:	2600      	movs	r6, #0
 8001056:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800105a:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 800105c:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 800105e:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001062:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8001066:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8001068:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 800106c:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 8001070:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 8001074:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 8001078:	6800      	ldr	r0, [r0, #0]
 800107a:	f001 fd7b 	bl	8002b74 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 800107e:	4630      	mov	r0, r6
 8001080:	bd70      	pop	{r4, r5, r6, pc}

08001082 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8001082:	f001 010f 	and.w	r1, r1, #15
 8001086:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 800108a:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 800108e:	4770      	bx	lr

08001090 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001090:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001094:	b570      	push	{r4, r5, r6, lr}
 8001096:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001098:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 800109a:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 800109c:	2600      	movs	r6, #0
  ep->is_in = 1U;
 800109e:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 80010a0:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80010a4:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80010a8:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 80010aa:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 80010ac:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80010ae:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 80010b2:	6800      	ldr	r0, [r0, #0]
 80010b4:	f001 fd5e 	bl	8002b74 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80010b8:	4630      	mov	r0, r6
 80010ba:	bd70      	pop	{r4, r5, r6, pc}

080010bc <HAL_PCD_IRQHandler>:
{ 
 80010bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80010c0:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80010c2:	6800      	ldr	r0, [r0, #0]
 80010c4:	f001 fd3e 	bl	8002b44 <USB_ReadInterrupts>
 80010c8:	0400      	lsls	r0, r0, #16
 80010ca:	f100 8098 	bmi.w	80011fe <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80010ce:	6820      	ldr	r0, [r4, #0]
 80010d0:	f001 fd38 	bl	8002b44 <USB_ReadInterrupts>
 80010d4:	0541      	lsls	r1, r0, #21
 80010d6:	d50f      	bpl.n	80010f8 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80010d8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80010da:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80010dc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80010e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010e4:	041b      	lsls	r3, r3, #16
 80010e6:	0c1b      	lsrs	r3, r3, #16
 80010e8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80010ec:	f003 fbd7 	bl	800489e <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 80010f0:	2100      	movs	r1, #0
 80010f2:	4620      	mov	r0, r4
 80010f4:	f7ff ff55 	bl	8000fa2 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 80010f8:	6820      	ldr	r0, [r4, #0]
 80010fa:	f001 fd23 	bl	8002b44 <USB_ReadInterrupts>
 80010fe:	0447      	lsls	r7, r0, #17
 8001100:	d508      	bpl.n	8001114 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8001102:	6822      	ldr	r2, [r4, #0]
 8001104:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001108:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800110c:	041b      	lsls	r3, r3, #16
 800110e:	0c1b      	lsrs	r3, r3, #16
 8001110:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8001114:	6820      	ldr	r0, [r4, #0]
 8001116:	f001 fd15 	bl	8002b44 <USB_ReadInterrupts>
 800111a:	0486      	lsls	r6, r0, #18
 800111c:	d508      	bpl.n	8001130 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 800111e:	6822      	ldr	r2, [r4, #0]
 8001120:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001124:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001128:	041b      	lsls	r3, r3, #16
 800112a:	0c1b      	lsrs	r3, r3, #16
 800112c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8001130:	6820      	ldr	r0, [r4, #0]
 8001132:	f001 fd07 	bl	8002b44 <USB_ReadInterrupts>
 8001136:	04c5      	lsls	r5, r0, #19
 8001138:	d51c      	bpl.n	8001174 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 800113a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 800113c:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 800113e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001142:	f023 0304 	bic.w	r3, r3, #4
 8001146:	041b      	lsls	r3, r3, #16
 8001148:	0c1b      	lsrs	r3, r3, #16
 800114a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 800114e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001152:	f023 0308 	bic.w	r3, r3, #8
 8001156:	041b      	lsls	r3, r3, #16
 8001158:	0c1b      	lsrs	r3, r3, #16
 800115a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800115e:	f003 fbbb 	bl	80048d8 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8001162:	6822      	ldr	r2, [r4, #0]
 8001164:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001168:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800116c:	041b      	lsls	r3, r3, #16
 800116e:	0c1b      	lsrs	r3, r3, #16
 8001170:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8001174:	6820      	ldr	r0, [r4, #0]
 8001176:	f001 fce5 	bl	8002b44 <USB_ReadInterrupts>
 800117a:	0500      	lsls	r0, r0, #20
 800117c:	d51d      	bpl.n	80011ba <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800117e:	6820      	ldr	r0, [r4, #0]
 8001180:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001184:	b29b      	uxth	r3, r3
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800118e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001192:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001196:	041b      	lsls	r3, r3, #16
 8001198:	0c1b      	lsrs	r3, r3, #16
 800119a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800119e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 80011ac:	f001 fcca 	bl	8002b44 <USB_ReadInterrupts>
 80011b0:	04c1      	lsls	r1, r0, #19
 80011b2:	d402      	bmi.n	80011ba <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 80011b4:	4620      	mov	r0, r4
 80011b6:	f003 fb7f 	bl	80048b8 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80011ba:	6820      	ldr	r0, [r4, #0]
 80011bc:	f001 fcc2 	bl	8002b44 <USB_ReadInterrupts>
 80011c0:	0582      	lsls	r2, r0, #22
 80011c2:	d50b      	bpl.n	80011dc <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80011c4:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80011c6:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80011c8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80011cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80011d0:	041b      	lsls	r3, r3, #16
 80011d2:	0c1b      	lsrs	r3, r3, #16
 80011d4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80011d8:	f003 fb5d 	bl	8004896 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80011dc:	6820      	ldr	r0, [r4, #0]
 80011de:	f001 fcb1 	bl	8002b44 <USB_ReadInterrupts>
 80011e2:	05c3      	lsls	r3, r0, #23
 80011e4:	d508      	bpl.n	80011f8 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80011e6:	6822      	ldr	r2, [r4, #0]
 80011e8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80011ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011f0:	041b      	lsls	r3, r3, #16
 80011f2:	0c1b      	lsrs	r3, r3, #16
 80011f4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80011f8:	b002      	add	sp, #8
 80011fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 80011fe:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001200:	4fc8      	ldr	r7, [pc, #800]	; (8001524 <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001202:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8001528 <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001206:	f8df 9324 	ldr.w	r9, [pc, #804]	; 800152c <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 800120a:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 800120e:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8001212:	6820      	ldr	r0, [r4, #0]
 8001214:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001218:	b29b      	uxth	r3, r3
 800121a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800121e:	041b      	lsls	r3, r3, #16
 8001220:	f57f af55 	bpl.w	80010ce <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001224:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8001228:	f015 050f 	ands.w	r5, r5, #15
 800122c:	f040 80ab 	bne.w	8001386 <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001230:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001234:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001236:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800123a:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 800123c:	d126      	bne.n	800128c <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800123e:	403b      	ands	r3, r7
 8001240:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001242:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001246:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800124a:	b29b      	uxth	r3, r3
 800124c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001250:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8001254:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8001258:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800125a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800125e:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001260:	4413      	add	r3, r2
 8001262:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001264:	4620      	mov	r0, r4
 8001266:	f003 fb0f 	bl	8004888 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 800126a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0cf      	beq.n	8001212 <HAL_PCD_IRQHandler+0x156>
 8001272:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001274:	2a00      	cmp	r2, #0
 8001276:	d1cc      	bne.n	8001212 <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001278:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800127c:	6821      	ldr	r1, [r4, #0]
 800127e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001282:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001286:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800128a:	e7c2      	b.n	8001212 <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800128c:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001290:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001294:	051a      	lsls	r2, r3, #20
 8001296:	d51f      	bpl.n	80012d8 <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001298:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800129c:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80012a6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80012aa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80012ae:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012b6:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80012ba:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80012be:	f001 fd59 	bl	8002d74 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80012c2:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80012c4:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80012c6:	8813      	ldrh	r3, [r2, #0]
 80012c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012cc:	051b      	lsls	r3, r3, #20
 80012ce:	0d1b      	lsrs	r3, r3, #20
 80012d0:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80012d2:	f003 facb 	bl	800486c <HAL_PCD_SetupStageCallback>
 80012d6:	e79c      	b.n	8001212 <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80012d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80012dc:	041b      	lsls	r3, r3, #16
 80012de:	d598      	bpl.n	8001212 <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80012e0:	8803      	ldrh	r3, [r0, #0]
 80012e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012e6:	051b      	lsls	r3, r3, #20
 80012e8:	0d1b      	lsrs	r3, r3, #20
 80012ea:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012ec:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80012f0:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80012fa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80012fe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001302:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001306:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 800130a:	b163      	cbz	r3, 8001326 <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800130c:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8001310:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8001314:	f001 fd2e 	bl	8002d74 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8001318:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 800131c:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8001320:	4413      	add	r3, r2
 8001322:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001326:	2100      	movs	r1, #0
 8001328:	4620      	mov	r0, r4
 800132a:	f003 faa5 	bl	8004878 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800132e:	6822      	ldr	r2, [r4, #0]
 8001330:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 8001334:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001338:	2d3e      	cmp	r5, #62	; 0x3e
 800133a:	b289      	uxth	r1, r1
 800133c:	f101 0106 	add.w	r1, r1, #6
 8001340:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8001344:	d917      	bls.n	8001376 <HAL_PCD_IRQHandler+0x2ba>
 8001346:	f3c5 134f 	ubfx	r3, r5, #5, #16
 800134a:	06ee      	lsls	r6, r5, #27
 800134c:	bf04      	itt	eq
 800134e:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8001352:	b29b      	uxtheq	r3, r3
 8001354:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8001358:	b29b      	uxth	r3, r3
 800135a:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800135e:	8813      	ldrh	r3, [r2, #0]
 8001360:	b29b      	uxth	r3, r3
 8001362:	ea03 0308 	and.w	r3, r3, r8
 8001366:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800136a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800136e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001372:	8013      	strh	r3, [r2, #0]
 8001374:	e74d      	b.n	8001212 <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001376:	f3c5 034f 	ubfx	r3, r5, #1, #16
 800137a:	07ed      	lsls	r5, r5, #31
 800137c:	bf44      	itt	mi
 800137e:	3301      	addmi	r3, #1
 8001380:	b29b      	uxthmi	r3, r3
 8001382:	029b      	lsls	r3, r3, #10
 8001384:	e7e8      	b.n	8001358 <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001386:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800138a:	b29b      	uxth	r3, r3
 800138c:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001390:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001394:	0419      	lsls	r1, r3, #16
 8001396:	d53f      	bpl.n	8001418 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001398:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 800139c:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80013a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013a4:	051b      	lsls	r3, r3, #20
 80013a6:	0d1b      	lsrs	r3, r3, #20
 80013a8:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80013ac:	eb04 010a 	add.w	r1, r4, sl
 80013b0:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d174      	bne.n	80014a2 <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013b8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80013bc:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	3306      	adds	r3, #6
 80013c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80013c8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80013cc:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 80013d0:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 80013d4:	b136      	cbz	r6, 80013e4 <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80013d6:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 80013da:	4633      	mov	r3, r6
 80013dc:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80013e0:	f001 fcc8 	bl	8002d74 <USB_ReadPMA>
 80013e4:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 80013e8:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 80013ec:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 80013f0:	4433      	add	r3, r6
 80013f2:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80013f6:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 80013fa:	4432      	add	r2, r6
 80013fc:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001400:	b123      	cbz	r3, 800140c <HAL_PCD_IRQHandler+0x350>
 8001402:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8001406:	4286      	cmp	r6, r0
 8001408:	f080 8086 	bcs.w	8001518 <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800140c:	44a2      	add	sl, r4
 800140e:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8001412:	4620      	mov	r0, r4
 8001414:	f003 fa30 	bl	8004878 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001418:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800141c:	061a      	lsls	r2, r3, #24
 800141e:	f57f aef8 	bpl.w	8001212 <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001422:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8001424:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001426:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 800142a:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800142c:	b29b      	uxth	r3, r3
 800142e:	403b      	ands	r3, r7
 8001430:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001434:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8001438:	3502      	adds	r5, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d178      	bne.n	8001530 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800143e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001442:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8001446:	b29b      	uxth	r3, r3
 8001448:	3302      	adds	r3, #2
 800144a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800144e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001452:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001456:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 800145a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800145e:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8001460:	b11b      	cbz	r3, 800146a <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001462:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8001464:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001466:	f001 fb73 	bl	8002b50 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800146a:	6822      	ldr	r2, [r4, #0]
 800146c:	4426      	add	r6, r4
 800146e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001472:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8001476:	b29b      	uxth	r3, r3
 8001478:	3302      	adds	r3, #2
 800147a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800147e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001482:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8001486:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001488:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800148c:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 800148e:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001490:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8001492:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001494:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8001496:	2b00      	cmp	r3, #0
 8001498:	f040 8085 	bne.w	80015a6 <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800149c:	f003 f9f4 	bl	8004888 <HAL_PCD_DataInStageCallback>
 80014a0:	e6b7      	b.n	8001212 <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80014a2:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 80014a6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80014b0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80014b4:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80014b6:	d021      	beq.n	80014fc <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80014b8:	3202      	adds	r2, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80014c0:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 80014c4:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 80014c8:	b136      	cbz	r6, 80014d8 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80014ca:	4633      	mov	r3, r6
 80014cc:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80014d0:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80014d4:	f001 fc4e 	bl	8002d74 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 80014d8:	eb04 030a 	add.w	r3, r4, sl
 80014dc:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 80014e0:	6822      	ldr	r2, [r4, #0]
 80014e2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80014e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014ea:	051b      	lsls	r3, r3, #20
 80014ec:	0d1b      	lsrs	r3, r3, #20
 80014ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80014f6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80014fa:	e773      	b.n	80013e4 <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80014fc:	3206      	adds	r2, #6
 80014fe:	4413      	add	r3, r2
 8001500:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001504:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8001508:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 800150c:	2e00      	cmp	r6, #0
 800150e:	d0e3      	beq.n	80014d8 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001510:	4633      	mov	r3, r6
 8001512:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8001516:	e7db      	b.n	80014d0 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001518:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 800151c:	4620      	mov	r0, r4
 800151e:	f7ff fd98 	bl	8001052 <HAL_PCD_EP_Receive>
 8001522:	e779      	b.n	8001418 <HAL_PCD_IRQHandler+0x35c>
 8001524:	ffff8f0f 	.word	0xffff8f0f
 8001528:	ffffbf8f 	.word	0xffffbf8f
 800152c:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001530:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8001534:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800153e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001542:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001544:	d020      	beq.n	8001588 <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001546:	3202      	adds	r2, #2
 8001548:	4413      	add	r3, r2
 800154a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800154e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001552:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001556:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800155a:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 800155c:	b11b      	cbz	r3, 8001566 <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 800155e:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001560:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001562:	f001 faf5 	bl	8002b50 <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8001566:	19a3      	adds	r3, r4, r6
 8001568:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800156c:	6822      	ldr	r2, [r4, #0]
 800156e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001572:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001576:	051b      	lsls	r3, r3, #20
 8001578:	0d1b      	lsrs	r3, r3, #20
 800157a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800157e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001582:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001586:	e770      	b.n	800146a <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001588:	3206      	adds	r2, #6
 800158a:	4413      	add	r3, r2
 800158c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001590:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001594:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800159c:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0e1      	beq.n	8001566 <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80015a2:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 80015a4:	e7dc      	b.n	8001560 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80015a6:	f7ff fd73 	bl	8001090 <HAL_PCD_EP_Transmit>
 80015aa:	e632      	b.n	8001212 <HAL_PCD_IRQHandler+0x156>

080015ac <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 80015ac:	2201      	movs	r2, #1
{
 80015ae:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 80015b0:	b24b      	sxtb	r3, r1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80015b8:	bfb5      	itete	lt
 80015ba:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 80015be:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80015c2:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 80015c4:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80015c8:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 80015ca:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 80015cc:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 80015ce:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80015d0:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 80015d2:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 80015d6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80015d8:	4293      	cmp	r3, r2
 80015da:	d00e      	beq.n	80015fa <HAL_PCD_EP_SetStall+0x4e>
 80015dc:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 80015e0:	6800      	ldr	r0, [r0, #0]
 80015e2:	f001 fa31 	bl	8002a48 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 80015e6:	b925      	cbnz	r5, 80015f2 <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80015e8:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80015ec:	6820      	ldr	r0, [r4, #0]
 80015ee:	f001 faad 	bl	8002b4c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 80015f2:	2000      	movs	r0, #0
 80015f4:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80015f8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80015fa:	2002      	movs	r0, #2
}
 80015fc:	bd38      	pop	{r3, r4, r5, pc}

080015fe <HAL_PCD_EP_ClrStall>:
{
 80015fe:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8001600:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 8001602:	b24b      	sxtb	r3, r1
 8001604:	2b00      	cmp	r3, #0
 8001606:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800160a:	bfb5      	itete	lt
 800160c:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8001610:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001614:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001616:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800161a:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 800161c:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 800161e:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001620:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001622:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8001626:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8001628:	2b01      	cmp	r3, #1
 800162a:	d009      	beq.n	8001640 <HAL_PCD_EP_ClrStall+0x42>
 800162c:	2301      	movs	r3, #1
 800162e:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8001632:	6800      	ldr	r0, [r0, #0]
 8001634:	f001 fa3a 	bl	8002aac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001638:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 800163c:	4620      	mov	r0, r4
 800163e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001640:	2002      	movs	r0, #2
}
 8001642:	bd38      	pop	{r3, r4, r5, pc}

08001644 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8001644:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001648:	bf1b      	ittet	ne
 800164a:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800164e:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001652:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001656:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001658:	bf08      	it	eq
 800165a:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800165e:	b91a      	cbnz	r2, 8001668 <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8001660:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8001662:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8001664:	2000      	movs	r0, #0
 8001666:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8001668:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 800166a:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 800166c:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 800166e:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001670:	8103      	strh	r3, [r0, #8]
 8001672:	e7f7      	b.n	8001664 <HAL_PCDEx_PMAConfig+0x20>

08001674 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001674:	6803      	ldr	r3, [r0, #0]
{
 8001676:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167a:	07db      	lsls	r3, r3, #31
{
 800167c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167e:	d410      	bmi.n	80016a2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001680:	682b      	ldr	r3, [r5, #0]
 8001682:	079f      	lsls	r7, r3, #30
 8001684:	d45e      	bmi.n	8001744 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001686:	682b      	ldr	r3, [r5, #0]
 8001688:	0719      	lsls	r1, r3, #28
 800168a:	f100 8095 	bmi.w	80017b8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168e:	682b      	ldr	r3, [r5, #0]
 8001690:	075a      	lsls	r2, r3, #29
 8001692:	f100 80bf 	bmi.w	8001814 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001696:	69ea      	ldr	r2, [r5, #28]
 8001698:	2a00      	cmp	r2, #0
 800169a:	f040 812d 	bne.w	80018f8 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800169e:	2000      	movs	r0, #0
 80016a0:	e014      	b.n	80016cc <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016a2:	4c90      	ldr	r4, [pc, #576]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 80016a4:	6863      	ldr	r3, [r4, #4]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d007      	beq.n	80016be <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016ae:	6863      	ldr	r3, [r4, #4]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d10c      	bne.n	80016d2 <HAL_RCC_OscConfig+0x5e>
 80016b8:	6863      	ldr	r3, [r4, #4]
 80016ba:	03de      	lsls	r6, r3, #15
 80016bc:	d509      	bpl.n	80016d2 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016be:	6823      	ldr	r3, [r4, #0]
 80016c0:	039c      	lsls	r4, r3, #14
 80016c2:	d5dd      	bpl.n	8001680 <HAL_RCC_OscConfig+0xc>
 80016c4:	686b      	ldr	r3, [r5, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1da      	bne.n	8001680 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80016ca:	2001      	movs	r0, #1
}
 80016cc:	b002      	add	sp, #8
 80016ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d2:	686b      	ldr	r3, [r5, #4]
 80016d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d8:	d110      	bne.n	80016fc <HAL_RCC_OscConfig+0x88>
 80016da:	6823      	ldr	r3, [r4, #0]
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016e2:	f7ff f8f9 	bl	80008d8 <HAL_GetTick>
 80016e6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e8:	6823      	ldr	r3, [r4, #0]
 80016ea:	0398      	lsls	r0, r3, #14
 80016ec:	d4c8      	bmi.n	8001680 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ee:	f7ff f8f3 	bl	80008d8 <HAL_GetTick>
 80016f2:	1b80      	subs	r0, r0, r6
 80016f4:	2864      	cmp	r0, #100	; 0x64
 80016f6:	d9f7      	bls.n	80016e8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80016f8:	2003      	movs	r0, #3
 80016fa:	e7e7      	b.n	80016cc <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fc:	b99b      	cbnz	r3, 8001726 <HAL_RCC_OscConfig+0xb2>
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001704:	6023      	str	r3, [r4, #0]
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800170e:	f7ff f8e3 	bl	80008d8 <HAL_GetTick>
 8001712:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001714:	6823      	ldr	r3, [r4, #0]
 8001716:	0399      	lsls	r1, r3, #14
 8001718:	d5b2      	bpl.n	8001680 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800171a:	f7ff f8dd 	bl	80008d8 <HAL_GetTick>
 800171e:	1b80      	subs	r0, r0, r6
 8001720:	2864      	cmp	r0, #100	; 0x64
 8001722:	d9f7      	bls.n	8001714 <HAL_RCC_OscConfig+0xa0>
 8001724:	e7e8      	b.n	80016f8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001726:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	d103      	bne.n	8001736 <HAL_RCC_OscConfig+0xc2>
 800172e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001732:	6023      	str	r3, [r4, #0]
 8001734:	e7d1      	b.n	80016da <HAL_RCC_OscConfig+0x66>
 8001736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173a:	6023      	str	r3, [r4, #0]
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001742:	e7cd      	b.n	80016e0 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001744:	4c67      	ldr	r4, [pc, #412]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 8001746:	6863      	ldr	r3, [r4, #4]
 8001748:	f013 0f0c 	tst.w	r3, #12
 800174c:	d007      	beq.n	800175e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800174e:	6863      	ldr	r3, [r4, #4]
 8001750:	f003 030c 	and.w	r3, r3, #12
 8001754:	2b08      	cmp	r3, #8
 8001756:	d110      	bne.n	800177a <HAL_RCC_OscConfig+0x106>
 8001758:	6863      	ldr	r3, [r4, #4]
 800175a:	03da      	lsls	r2, r3, #15
 800175c:	d40d      	bmi.n	800177a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175e:	6823      	ldr	r3, [r4, #0]
 8001760:	079b      	lsls	r3, r3, #30
 8001762:	d502      	bpl.n	800176a <HAL_RCC_OscConfig+0xf6>
 8001764:	692b      	ldr	r3, [r5, #16]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d1af      	bne.n	80016ca <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	696a      	ldr	r2, [r5, #20]
 800176e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001772:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001776:	6023      	str	r3, [r4, #0]
 8001778:	e785      	b.n	8001686 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800177a:	692a      	ldr	r2, [r5, #16]
 800177c:	4b5a      	ldr	r3, [pc, #360]	; (80018e8 <HAL_RCC_OscConfig+0x274>)
 800177e:	b16a      	cbz	r2, 800179c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001784:	f7ff f8a8 	bl	80008d8 <HAL_GetTick>
 8001788:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178a:	6823      	ldr	r3, [r4, #0]
 800178c:	079f      	lsls	r7, r3, #30
 800178e:	d4ec      	bmi.n	800176a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001790:	f7ff f8a2 	bl	80008d8 <HAL_GetTick>
 8001794:	1b80      	subs	r0, r0, r6
 8001796:	2802      	cmp	r0, #2
 8001798:	d9f7      	bls.n	800178a <HAL_RCC_OscConfig+0x116>
 800179a:	e7ad      	b.n	80016f8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800179c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800179e:	f7ff f89b 	bl	80008d8 <HAL_GetTick>
 80017a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a4:	6823      	ldr	r3, [r4, #0]
 80017a6:	0798      	lsls	r0, r3, #30
 80017a8:	f57f af6d 	bpl.w	8001686 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ac:	f7ff f894 	bl	80008d8 <HAL_GetTick>
 80017b0:	1b80      	subs	r0, r0, r6
 80017b2:	2802      	cmp	r0, #2
 80017b4:	d9f6      	bls.n	80017a4 <HAL_RCC_OscConfig+0x130>
 80017b6:	e79f      	b.n	80016f8 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b8:	69aa      	ldr	r2, [r5, #24]
 80017ba:	4c4a      	ldr	r4, [pc, #296]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 80017bc:	4b4b      	ldr	r3, [pc, #300]	; (80018ec <HAL_RCC_OscConfig+0x278>)
 80017be:	b1da      	cbz	r2, 80017f8 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017c4:	f7ff f888 	bl	80008d8 <HAL_GetTick>
 80017c8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017cc:	079b      	lsls	r3, r3, #30
 80017ce:	d50d      	bpl.n	80017ec <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017d0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80017d4:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <HAL_RCC_OscConfig+0x27c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80017dc:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80017de:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80017e0:	9b01      	ldr	r3, [sp, #4]
 80017e2:	1e5a      	subs	r2, r3, #1
 80017e4:	9201      	str	r2, [sp, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f9      	bne.n	80017de <HAL_RCC_OscConfig+0x16a>
 80017ea:	e750      	b.n	800168e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ec:	f7ff f874 	bl	80008d8 <HAL_GetTick>
 80017f0:	1b80      	subs	r0, r0, r6
 80017f2:	2802      	cmp	r0, #2
 80017f4:	d9e9      	bls.n	80017ca <HAL_RCC_OscConfig+0x156>
 80017f6:	e77f      	b.n	80016f8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80017f8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017fa:	f7ff f86d 	bl	80008d8 <HAL_GetTick>
 80017fe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001802:	079f      	lsls	r7, r3, #30
 8001804:	f57f af43 	bpl.w	800168e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001808:	f7ff f866 	bl	80008d8 <HAL_GetTick>
 800180c:	1b80      	subs	r0, r0, r6
 800180e:	2802      	cmp	r0, #2
 8001810:	d9f6      	bls.n	8001800 <HAL_RCC_OscConfig+0x18c>
 8001812:	e771      	b.n	80016f8 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001814:	4c33      	ldr	r4, [pc, #204]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 8001816:	69e3      	ldr	r3, [r4, #28]
 8001818:	00d8      	lsls	r0, r3, #3
 800181a:	d424      	bmi.n	8001866 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800181c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	69e3      	ldr	r3, [r4, #28]
 8001820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001824:	61e3      	str	r3, [r4, #28]
 8001826:	69e3      	ldr	r3, [r4, #28]
 8001828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001830:	4e30      	ldr	r6, [pc, #192]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001832:	6833      	ldr	r3, [r6, #0]
 8001834:	05d9      	lsls	r1, r3, #23
 8001836:	d518      	bpl.n	800186a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001838:	68eb      	ldr	r3, [r5, #12]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d126      	bne.n	800188c <HAL_RCC_OscConfig+0x218>
 800183e:	6a23      	ldr	r3, [r4, #32]
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001846:	f7ff f847 	bl	80008d8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800184a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800184e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001850:	6a23      	ldr	r3, [r4, #32]
 8001852:	079b      	lsls	r3, r3, #30
 8001854:	d53f      	bpl.n	80018d6 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001856:	2f00      	cmp	r7, #0
 8001858:	f43f af1d 	beq.w	8001696 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800185c:	69e3      	ldr	r3, [r4, #28]
 800185e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001862:	61e3      	str	r3, [r4, #28]
 8001864:	e717      	b.n	8001696 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001866:	2700      	movs	r7, #0
 8001868:	e7e2      	b.n	8001830 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800186a:	6833      	ldr	r3, [r6, #0]
 800186c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001870:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001872:	f7ff f831 	bl	80008d8 <HAL_GetTick>
 8001876:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001878:	6833      	ldr	r3, [r6, #0]
 800187a:	05da      	lsls	r2, r3, #23
 800187c:	d4dc      	bmi.n	8001838 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800187e:	f7ff f82b 	bl	80008d8 <HAL_GetTick>
 8001882:	eba0 0008 	sub.w	r0, r0, r8
 8001886:	2864      	cmp	r0, #100	; 0x64
 8001888:	d9f6      	bls.n	8001878 <HAL_RCC_OscConfig+0x204>
 800188a:	e735      	b.n	80016f8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188c:	b9ab      	cbnz	r3, 80018ba <HAL_RCC_OscConfig+0x246>
 800188e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001890:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001894:	f023 0301 	bic.w	r3, r3, #1
 8001898:	6223      	str	r3, [r4, #32]
 800189a:	6a23      	ldr	r3, [r4, #32]
 800189c:	f023 0304 	bic.w	r3, r3, #4
 80018a0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80018a2:	f7ff f819 	bl	80008d8 <HAL_GetTick>
 80018a6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a8:	6a23      	ldr	r3, [r4, #32]
 80018aa:	0798      	lsls	r0, r3, #30
 80018ac:	d5d3      	bpl.n	8001856 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7ff f813 	bl	80008d8 <HAL_GetTick>
 80018b2:	1b80      	subs	r0, r0, r6
 80018b4:	4540      	cmp	r0, r8
 80018b6:	d9f7      	bls.n	80018a8 <HAL_RCC_OscConfig+0x234>
 80018b8:	e71e      	b.n	80016f8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ba:	2b05      	cmp	r3, #5
 80018bc:	6a23      	ldr	r3, [r4, #32]
 80018be:	d103      	bne.n	80018c8 <HAL_RCC_OscConfig+0x254>
 80018c0:	f043 0304 	orr.w	r3, r3, #4
 80018c4:	6223      	str	r3, [r4, #32]
 80018c6:	e7ba      	b.n	800183e <HAL_RCC_OscConfig+0x1ca>
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	6223      	str	r3, [r4, #32]
 80018ce:	6a23      	ldr	r3, [r4, #32]
 80018d0:	f023 0304 	bic.w	r3, r3, #4
 80018d4:	e7b6      	b.n	8001844 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d6:	f7fe ffff 	bl	80008d8 <HAL_GetTick>
 80018da:	eba0 0008 	sub.w	r0, r0, r8
 80018de:	42b0      	cmp	r0, r6
 80018e0:	d9b6      	bls.n	8001850 <HAL_RCC_OscConfig+0x1dc>
 80018e2:	e709      	b.n	80016f8 <HAL_RCC_OscConfig+0x84>
 80018e4:	40021000 	.word	0x40021000
 80018e8:	42420000 	.word	0x42420000
 80018ec:	42420480 	.word	0x42420480
 80018f0:	2000011c 	.word	0x2000011c
 80018f4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f8:	4c22      	ldr	r4, [pc, #136]	; (8001984 <HAL_RCC_OscConfig+0x310>)
 80018fa:	6863      	ldr	r3, [r4, #4]
 80018fc:	f003 030c 	and.w	r3, r3, #12
 8001900:	2b08      	cmp	r3, #8
 8001902:	f43f aee2 	beq.w	80016ca <HAL_RCC_OscConfig+0x56>
 8001906:	2300      	movs	r3, #0
 8001908:	4e1f      	ldr	r6, [pc, #124]	; (8001988 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800190a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800190c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800190e:	d12b      	bne.n	8001968 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001910:	f7fe ffe2 	bl	80008d8 <HAL_GetTick>
 8001914:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	0199      	lsls	r1, r3, #6
 800191a:	d41f      	bmi.n	800195c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800191c:	6a2b      	ldr	r3, [r5, #32]
 800191e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001922:	d105      	bne.n	8001930 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001924:	6862      	ldr	r2, [r4, #4]
 8001926:	68a9      	ldr	r1, [r5, #8]
 8001928:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800192c:	430a      	orrs	r2, r1
 800192e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001930:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001932:	6862      	ldr	r2, [r4, #4]
 8001934:	430b      	orrs	r3, r1
 8001936:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800193a:	4313      	orrs	r3, r2
 800193c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800193e:	2301      	movs	r3, #1
 8001940:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001942:	f7fe ffc9 	bl	80008d8 <HAL_GetTick>
 8001946:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	019a      	lsls	r2, r3, #6
 800194c:	f53f aea7 	bmi.w	800169e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001950:	f7fe ffc2 	bl	80008d8 <HAL_GetTick>
 8001954:	1b40      	subs	r0, r0, r5
 8001956:	2802      	cmp	r0, #2
 8001958:	d9f6      	bls.n	8001948 <HAL_RCC_OscConfig+0x2d4>
 800195a:	e6cd      	b.n	80016f8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195c:	f7fe ffbc 	bl	80008d8 <HAL_GetTick>
 8001960:	1bc0      	subs	r0, r0, r7
 8001962:	2802      	cmp	r0, #2
 8001964:	d9d7      	bls.n	8001916 <HAL_RCC_OscConfig+0x2a2>
 8001966:	e6c7      	b.n	80016f8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001968:	f7fe ffb6 	bl	80008d8 <HAL_GetTick>
 800196c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800196e:	6823      	ldr	r3, [r4, #0]
 8001970:	019b      	lsls	r3, r3, #6
 8001972:	f57f ae94 	bpl.w	800169e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001976:	f7fe ffaf 	bl	80008d8 <HAL_GetTick>
 800197a:	1b40      	subs	r0, r0, r5
 800197c:	2802      	cmp	r0, #2
 800197e:	d9f6      	bls.n	800196e <HAL_RCC_OscConfig+0x2fa>
 8001980:	e6ba      	b.n	80016f8 <HAL_RCC_OscConfig+0x84>
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	42420060 	.word	0x42420060

0800198c <HAL_RCC_GetSysClockFreq>:
{
 800198c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001990:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001992:	ac02      	add	r4, sp, #8
 8001994:	f103 0510 	add.w	r5, r3, #16
 8001998:	4622      	mov	r2, r4
 800199a:	6818      	ldr	r0, [r3, #0]
 800199c:	6859      	ldr	r1, [r3, #4]
 800199e:	3308      	adds	r3, #8
 80019a0:	c203      	stmia	r2!, {r0, r1}
 80019a2:	42ab      	cmp	r3, r5
 80019a4:	4614      	mov	r4, r2
 80019a6:	d1f7      	bne.n	8001998 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019a8:	2301      	movs	r3, #1
 80019aa:	f88d 3004 	strb.w	r3, [sp, #4]
 80019ae:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80019b0:	4911      	ldr	r1, [pc, #68]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019b2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80019b6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80019b8:	f003 020c 	and.w	r2, r3, #12
 80019bc:	2a08      	cmp	r2, #8
 80019be:	d117      	bne.n	80019f0 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019c0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80019c4:	a806      	add	r0, sp, #24
 80019c6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019c8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019ca:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019ce:	d50c      	bpl.n	80019ea <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019d0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019d2:	480a      	ldr	r0, [pc, #40]	; (80019fc <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019d4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019d8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019da:	aa06      	add	r2, sp, #24
 80019dc:	4413      	add	r3, r2
 80019de:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019e2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80019e6:	b007      	add	sp, #28
 80019e8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x74>)
 80019ec:	4350      	muls	r0, r2
 80019ee:	e7fa      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80019f2:	e7f8      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x5a>
 80019f4:	080054e0 	.word	0x080054e0
 80019f8:	40021000 	.word	0x40021000
 80019fc:	007a1200 	.word	0x007a1200
 8001a00:	003d0900 	.word	0x003d0900

08001a04 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a04:	4a4d      	ldr	r2, [pc, #308]	; (8001b3c <HAL_RCC_ClockConfig+0x138>)
{
 8001a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a0a:	6813      	ldr	r3, [r2, #0]
{
 8001a0c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	428b      	cmp	r3, r1
{
 8001a14:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a16:	d328      	bcc.n	8001a6a <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a18:	682a      	ldr	r2, [r5, #0]
 8001a1a:	0791      	lsls	r1, r2, #30
 8001a1c:	d432      	bmi.n	8001a84 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1e:	07d2      	lsls	r2, r2, #31
 8001a20:	d438      	bmi.n	8001a94 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a22:	4a46      	ldr	r2, [pc, #280]	; (8001b3c <HAL_RCC_ClockConfig+0x138>)
 8001a24:	6813      	ldr	r3, [r2, #0]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	429e      	cmp	r6, r3
 8001a2c:	d373      	bcc.n	8001b16 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2e:	682a      	ldr	r2, [r5, #0]
 8001a30:	4c43      	ldr	r4, [pc, #268]	; (8001b40 <HAL_RCC_ClockConfig+0x13c>)
 8001a32:	f012 0f04 	tst.w	r2, #4
 8001a36:	d179      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a38:	0713      	lsls	r3, r2, #28
 8001a3a:	d506      	bpl.n	8001a4a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a3c:	6863      	ldr	r3, [r4, #4]
 8001a3e:	692a      	ldr	r2, [r5, #16]
 8001a40:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a44:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a48:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a4a:	f7ff ff9f 	bl	800198c <HAL_RCC_GetSysClockFreq>
 8001a4e:	6863      	ldr	r3, [r4, #4]
 8001a50:	4a3c      	ldr	r2, [pc, #240]	; (8001b44 <HAL_RCC_ClockConfig+0x140>)
 8001a52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a56:	5cd3      	ldrb	r3, [r2, r3]
 8001a58:	40d8      	lsrs	r0, r3
 8001a5a:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <HAL_RCC_ClockConfig+0x144>)
 8001a5c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7fe fef8 	bl	8000854 <HAL_InitTick>
  return HAL_OK;
 8001a64:	2000      	movs	r0, #0
}
 8001a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6a:	6813      	ldr	r3, [r2, #0]
 8001a6c:	f023 0307 	bic.w	r3, r3, #7
 8001a70:	430b      	orrs	r3, r1
 8001a72:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a74:	6813      	ldr	r3, [r2, #0]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	4299      	cmp	r1, r3
 8001a7c:	d0cc      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001a7e:	2001      	movs	r0, #1
 8001a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a84:	492e      	ldr	r1, [pc, #184]	; (8001b40 <HAL_RCC_ClockConfig+0x13c>)
 8001a86:	68a8      	ldr	r0, [r5, #8]
 8001a88:	684b      	ldr	r3, [r1, #4]
 8001a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a8e:	4303      	orrs	r3, r0
 8001a90:	604b      	str	r3, [r1, #4]
 8001a92:	e7c4      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a94:	686a      	ldr	r2, [r5, #4]
 8001a96:	4c2a      	ldr	r4, [pc, #168]	; (8001b40 <HAL_RCC_ClockConfig+0x13c>)
 8001a98:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9c:	d11c      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa2:	d0ec      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aa4:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aaa:	f023 0303 	bic.w	r3, r3, #3
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001ab2:	f7fe ff11 	bl	80008d8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab6:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001ab8:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d114      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001abe:	6863      	ldr	r3, [r4, #4]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d0ac      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac8:	f7fe ff06 	bl	80008d8 <HAL_GetTick>
 8001acc:	1bc0      	subs	r0, r0, r7
 8001ace:	4540      	cmp	r0, r8
 8001ad0:	d9f5      	bls.n	8001abe <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8001ad2:	2003      	movs	r0, #3
 8001ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ad8:	2a02      	cmp	r2, #2
 8001ada:	d102      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001adc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ae0:	e7df      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae2:	f013 0f02 	tst.w	r3, #2
 8001ae6:	e7dc      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d10f      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aec:	6863      	ldr	r3, [r4, #4]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d095      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af6:	f7fe feef 	bl	80008d8 <HAL_GetTick>
 8001afa:	1bc0      	subs	r0, r0, r7
 8001afc:	4540      	cmp	r0, r8
 8001afe:	d9f5      	bls.n	8001aec <HAL_RCC_ClockConfig+0xe8>
 8001b00:	e7e7      	b.n	8001ad2 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b02:	f7fe fee9 	bl	80008d8 <HAL_GetTick>
 8001b06:	1bc0      	subs	r0, r0, r7
 8001b08:	4540      	cmp	r0, r8
 8001b0a:	d8e2      	bhi.n	8001ad2 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b0c:	6863      	ldr	r3, [r4, #4]
 8001b0e:	f013 0f0c 	tst.w	r3, #12
 8001b12:	d1f6      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xfe>
 8001b14:	e785      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	6813      	ldr	r3, [r2, #0]
 8001b18:	f023 0307 	bic.w	r3, r3, #7
 8001b1c:	4333      	orrs	r3, r6
 8001b1e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b20:	6813      	ldr	r3, [r2, #0]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	429e      	cmp	r6, r3
 8001b28:	d1a9      	bne.n	8001a7e <HAL_RCC_ClockConfig+0x7a>
 8001b2a:	e780      	b.n	8001a2e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b2c:	6863      	ldr	r3, [r4, #4]
 8001b2e:	68e9      	ldr	r1, [r5, #12]
 8001b30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b34:	430b      	orrs	r3, r1
 8001b36:	6063      	str	r3, [r4, #4]
 8001b38:	e77e      	b.n	8001a38 <HAL_RCC_ClockConfig+0x34>
 8001b3a:	bf00      	nop
 8001b3c:	40022000 	.word	0x40022000
 8001b40:	40021000 	.word	0x40021000
 8001b44:	08005787 	.word	0x08005787
 8001b48:	2000011c 	.word	0x2000011c

08001b4c <HAL_RCC_GetHCLKFreq>:
}
 8001b4c:	4b01      	ldr	r3, [pc, #4]	; (8001b54 <HAL_RCC_GetHCLKFreq+0x8>)
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	2000011c 	.word	0x2000011c

08001b58 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b5a:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001b62:	5cd3      	ldrb	r3, [r2, r3]
 8001b64:	4a03      	ldr	r2, [pc, #12]	; (8001b74 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b66:	6810      	ldr	r0, [r2, #0]
}    
 8001b68:	40d8      	lsrs	r0, r3
 8001b6a:	4770      	bx	lr
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	08005797 	.word	0x08005797
 8001b74:	2000011c 	.word	0x2000011c

08001b78 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001b82:	5cd3      	ldrb	r3, [r2, r3]
 8001b84:	4a03      	ldr	r2, [pc, #12]	; (8001b94 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b86:	6810      	ldr	r0, [r2, #0]
} 
 8001b88:	40d8      	lsrs	r0, r3
 8001b8a:	4770      	bx	lr
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	08005797 	.word	0x08005797
 8001b94:	2000011c 	.word	0x2000011c

08001b98 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b98:	6803      	ldr	r3, [r0, #0]
{
 8001b9a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b9e:	07d9      	lsls	r1, r3, #31
{
 8001ba0:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ba2:	d520      	bpl.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba4:	4c35      	ldr	r4, [pc, #212]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001ba6:	69e3      	ldr	r3, [r4, #28]
 8001ba8:	00da      	lsls	r2, r3, #3
 8001baa:	d432      	bmi.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001bac:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	69e3      	ldr	r3, [r4, #28]
 8001bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	61e3      	str	r3, [r4, #28]
 8001bb6:	69e3      	ldr	r3, [r4, #28]
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc0:	4e2f      	ldr	r6, [pc, #188]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001bc2:	6833      	ldr	r3, [r6, #0]
 8001bc4:	05db      	lsls	r3, r3, #23
 8001bc6:	d526      	bpl.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bc8:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bca:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001bce:	d136      	bne.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001bd0:	6a23      	ldr	r3, [r4, #32]
 8001bd2:	686a      	ldr	r2, [r5, #4]
 8001bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bdc:	b11f      	cbz	r7, 8001be6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bde:	69e3      	ldr	r3, [r4, #28]
 8001be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001be6:	6828      	ldr	r0, [r5, #0]
 8001be8:	0783      	lsls	r3, r0, #30
 8001bea:	d506      	bpl.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001bec:	4a23      	ldr	r2, [pc, #140]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001bee:	68a9      	ldr	r1, [r5, #8]
 8001bf0:	6853      	ldr	r3, [r2, #4]
 8001bf2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bf6:	430b      	orrs	r3, r1
 8001bf8:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001bfa:	f010 0010 	ands.w	r0, r0, #16
 8001bfe:	d01b      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c00:	4a1e      	ldr	r2, [pc, #120]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001c02:	68e9      	ldr	r1, [r5, #12]
 8001c04:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001c06:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c08:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	6053      	str	r3, [r2, #4]
 8001c10:	e012      	b.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001c12:	2700      	movs	r7, #0
 8001c14:	e7d4      	b.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c16:	6833      	ldr	r3, [r6, #0]
 8001c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001c1e:	f7fe fe5b 	bl	80008d8 <HAL_GetTick>
 8001c22:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c24:	6833      	ldr	r3, [r6, #0]
 8001c26:	05d8      	lsls	r0, r3, #23
 8001c28:	d4ce      	bmi.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2a:	f7fe fe55 	bl	80008d8 <HAL_GetTick>
 8001c2e:	eba0 0008 	sub.w	r0, r0, r8
 8001c32:	2864      	cmp	r0, #100	; 0x64
 8001c34:	d9f6      	bls.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001c36:	2003      	movs	r0, #3
}
 8001c38:	b002      	add	sp, #8
 8001c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c3e:	686a      	ldr	r2, [r5, #4]
 8001c40:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d0c3      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c48:	2001      	movs	r0, #1
 8001c4a:	4a0e      	ldr	r2, [pc, #56]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c4c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c4e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c50:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c56:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001c58:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c5a:	07d9      	lsls	r1, r3, #31
 8001c5c:	d5b8      	bpl.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001c5e:	f7fe fe3b 	bl	80008d8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c62:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001c66:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c68:	6a23      	ldr	r3, [r4, #32]
 8001c6a:	079a      	lsls	r2, r3, #30
 8001c6c:	d4b0      	bmi.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6e:	f7fe fe33 	bl	80008d8 <HAL_GetTick>
 8001c72:	1b80      	subs	r0, r0, r6
 8001c74:	4540      	cmp	r0, r8
 8001c76:	d9f7      	bls.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001c78:	e7dd      	b.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40007000 	.word	0x40007000
 8001c84:	42420440 	.word	0x42420440

08001c88 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001c88:	2302      	movs	r3, #2

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001c8a:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001c8c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8001c90:	6813      	ldr	r3, [r2, #0]
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6013      	str	r3, [r2, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ca2:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8001ca4:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	f042 0201 	orr.w	r2, r2, #1
 8001cac:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	f042 0201 	orr.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
}
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cb8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001cbc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	f04f 0302 	mov.w	r3, #2
 8001cc4:	d01c      	beq.n	8001d00 <HAL_TIM_ConfigClockSource+0x48>
 8001cc6:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8001cc8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ccc:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001cce:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001cd2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cd4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001cd8:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001cdc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001cde:	680a      	ldr	r2, [r1, #0]
 8001ce0:	2a40      	cmp	r2, #64	; 0x40
 8001ce2:	d079      	beq.n	8001dd8 <HAL_TIM_ConfigClockSource+0x120>
 8001ce4:	d819      	bhi.n	8001d1a <HAL_TIM_ConfigClockSource+0x62>
 8001ce6:	2a10      	cmp	r2, #16
 8001ce8:	f000 8093 	beq.w	8001e12 <HAL_TIM_ConfigClockSource+0x15a>
 8001cec:	d80a      	bhi.n	8001d04 <HAL_TIM_ConfigClockSource+0x4c>
 8001cee:	2a00      	cmp	r2, #0
 8001cf0:	f000 8089 	beq.w	8001e06 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001d00:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001d02:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001d04:	2a20      	cmp	r2, #32
 8001d06:	f000 808a 	beq.w	8001e1e <HAL_TIM_ConfigClockSource+0x166>
 8001d0a:	2a30      	cmp	r2, #48	; 0x30
 8001d0c:	d1f2      	bne.n	8001cf4 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001d0e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d14:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001d18:	e036      	b.n	8001d88 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001d1a:	2a70      	cmp	r2, #112	; 0x70
 8001d1c:	d036      	beq.n	8001d8c <HAL_TIM_ConfigClockSource+0xd4>
 8001d1e:	d81b      	bhi.n	8001d58 <HAL_TIM_ConfigClockSource+0xa0>
 8001d20:	2a50      	cmp	r2, #80	; 0x50
 8001d22:	d042      	beq.n	8001daa <HAL_TIM_ConfigClockSource+0xf2>
 8001d24:	2a60      	cmp	r2, #96	; 0x60
 8001d26:	d1e5      	bne.n	8001cf4 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d28:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d2a:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d2c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d30:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d32:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d34:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001d36:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d38:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d40:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d44:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001d48:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d4a:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001d4c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d52:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001d56:	e017      	b.n	8001d88 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001d58:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001d5c:	d011      	beq.n	8001d82 <HAL_TIM_ConfigClockSource+0xca>
 8001d5e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001d62:	d1c7      	bne.n	8001cf4 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d64:	688a      	ldr	r2, [r1, #8]
 8001d66:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001d68:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d6a:	68c9      	ldr	r1, [r1, #12]
 8001d6c:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d6e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d72:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d76:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d78:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d80:	e002      	b.n	8001d88 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	e7b3      	b.n	8001cf4 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d8c:	688a      	ldr	r2, [r1, #8]
 8001d8e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001d90:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d92:	68c9      	ldr	r1, [r1, #12]
 8001d94:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d96:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d9a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d9e:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001da0:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001da2:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001da4:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001da8:	e7ee      	b.n	8001d88 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001daa:	684c      	ldr	r4, [r1, #4]
 8001dac:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001dae:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001db0:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001db2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001db6:	f025 0501 	bic.w	r5, r5, #1
 8001dba:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dbc:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001dbe:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dc0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001dc4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001dc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001dca:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001dcc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001dce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001dd2:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001dd6:	e7d7      	b.n	8001d88 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dd8:	684c      	ldr	r4, [r1, #4]
 8001dda:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001ddc:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dde:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001de0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001de4:	f025 0501 	bic.w	r5, r5, #1
 8001de8:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dea:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001dec:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001df2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001df8:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001dfa:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001dfc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e00:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001e04:	e7c0      	b.n	8001d88 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001e06:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e0c:	f042 0207 	orr.w	r2, r2, #7
 8001e10:	e7ba      	b.n	8001d88 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001e12:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e18:	f042 0217 	orr.w	r2, r2, #23
 8001e1c:	e7b4      	b.n	8001d88 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001e1e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e20:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e24:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001e28:	e7ae      	b.n	8001d88 <HAL_TIM_ConfigClockSource+0xd0>

08001e2a <HAL_TIM_PeriodElapsedCallback>:
 8001e2a:	4770      	bx	lr

08001e2c <HAL_TIM_OC_DelayElapsedCallback>:
 8001e2c:	4770      	bx	lr

08001e2e <HAL_TIM_IC_CaptureCallback>:
 8001e2e:	4770      	bx	lr

08001e30 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001e30:	4770      	bx	lr

08001e32 <HAL_TIM_TriggerCallback>:
 8001e32:	4770      	bx	lr

08001e34 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e34:	6803      	ldr	r3, [r0, #0]
{
 8001e36:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e38:	691a      	ldr	r2, [r3, #16]
{
 8001e3a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e3c:	0791      	lsls	r1, r2, #30
 8001e3e:	d50e      	bpl.n	8001e5e <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	0792      	lsls	r2, r2, #30
 8001e44:	d50b      	bpl.n	8001e5e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e46:	f06f 0202 	mvn.w	r2, #2
 8001e4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e4c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e4e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e50:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e52:	079b      	lsls	r3, r3, #30
 8001e54:	d077      	beq.n	8001f46 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001e56:	f7ff ffea 	bl	8001e2e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	0750      	lsls	r0, r2, #29
 8001e64:	d510      	bpl.n	8001e88 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	0751      	lsls	r1, r2, #29
 8001e6a:	d50d      	bpl.n	8001e88 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e6c:	f06f 0204 	mvn.w	r2, #4
 8001e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e72:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e74:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e76:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e78:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001e7c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e7e:	d068      	beq.n	8001f52 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e80:	f7ff ffd5 	bl	8001e2e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e84:	2300      	movs	r3, #0
 8001e86:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e88:	6823      	ldr	r3, [r4, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	0712      	lsls	r2, r2, #28
 8001e8e:	d50f      	bpl.n	8001eb0 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	0710      	lsls	r0, r2, #28
 8001e94:	d50c      	bpl.n	8001eb0 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e96:	f06f 0208 	mvn.w	r2, #8
 8001e9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e9c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e9e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ea0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ea2:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ea6:	d05a      	beq.n	8001f5e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea8:	f7ff ffc1 	bl	8001e2e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eac:	2300      	movs	r3, #0
 8001eae:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	06d2      	lsls	r2, r2, #27
 8001eb6:	d510      	bpl.n	8001eda <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	06d0      	lsls	r0, r2, #27
 8001ebc:	d50d      	bpl.n	8001eda <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ebe:	f06f 0210 	mvn.w	r2, #16
 8001ec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ec4:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ec6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ec8:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eca:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001ece:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ed0:	d04b      	beq.n	8001f6a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed2:	f7ff ffac 	bl	8001e2e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	07d1      	lsls	r1, r2, #31
 8001ee0:	d508      	bpl.n	8001ef4 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	07d2      	lsls	r2, r2, #31
 8001ee6:	d505      	bpl.n	8001ef4 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ee8:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001eee:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ef0:	f7ff ff9b 	bl	8001e2a <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	0610      	lsls	r0, r2, #24
 8001efa:	d508      	bpl.n	8001f0e <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	0611      	lsls	r1, r2, #24
 8001f00:	d505      	bpl.n	8001f0e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f02:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001f06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f08:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f0a:	f000 f8aa 	bl	8002062 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	0652      	lsls	r2, r2, #25
 8001f14:	d508      	bpl.n	8001f28 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	0650      	lsls	r0, r2, #25
 8001f1a:	d505      	bpl.n	8001f28 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001f20:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f22:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001f24:	f7ff ff85 	bl	8001e32 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f28:	6823      	ldr	r3, [r4, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	0691      	lsls	r1, r2, #26
 8001f2e:	d522      	bpl.n	8001f76 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	0692      	lsls	r2, r2, #26
 8001f34:	d51f      	bpl.n	8001f76 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f36:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001f3a:	4620      	mov	r0, r4
}
 8001f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f40:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001f42:	f000 b88d 	b.w	8002060 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f46:	f7ff ff71 	bl	8001e2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	f7ff ff70 	bl	8001e30 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f50:	e783      	b.n	8001e5a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	f7ff ff6b 	bl	8001e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f56:	4620      	mov	r0, r4
 8001f58:	f7ff ff6a 	bl	8001e30 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f5c:	e792      	b.n	8001e84 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5e:	f7ff ff65 	bl	8001e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f62:	4620      	mov	r0, r4
 8001f64:	f7ff ff64 	bl	8001e30 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f68:	e7a0      	b.n	8001eac <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6a:	f7ff ff5f 	bl	8001e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f7ff ff5e 	bl	8001e30 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f74:	e7af      	b.n	8001ed6 <HAL_TIM_IRQHandler+0xa2>
 8001f76:	bd10      	pop	{r4, pc}

08001f78 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f78:	4a1a      	ldr	r2, [pc, #104]	; (8001fe4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001f7a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f7c:	4290      	cmp	r0, r2
 8001f7e:	d00a      	beq.n	8001f96 <TIM_Base_SetConfig+0x1e>
 8001f80:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f84:	d007      	beq.n	8001f96 <TIM_Base_SetConfig+0x1e>
 8001f86:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001f8a:	4290      	cmp	r0, r2
 8001f8c:	d003      	beq.n	8001f96 <TIM_Base_SetConfig+0x1e>
 8001f8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f92:	4290      	cmp	r0, r2
 8001f94:	d115      	bne.n	8001fc2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001f96:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001f9c:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f9e:	4a11      	ldr	r2, [pc, #68]	; (8001fe4 <TIM_Base_SetConfig+0x6c>)
 8001fa0:	4290      	cmp	r0, r2
 8001fa2:	d00a      	beq.n	8001fba <TIM_Base_SetConfig+0x42>
 8001fa4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001fa8:	d007      	beq.n	8001fba <TIM_Base_SetConfig+0x42>
 8001faa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001fae:	4290      	cmp	r0, r2
 8001fb0:	d003      	beq.n	8001fba <TIM_Base_SetConfig+0x42>
 8001fb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fb6:	4290      	cmp	r0, r2
 8001fb8:	d103      	bne.n	8001fc2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fba:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fc0:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001fc2:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001fc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001fc8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001fca:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fcc:	688b      	ldr	r3, [r1, #8]
 8001fce:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001fd0:	680b      	ldr	r3, [r1, #0]
 8001fd2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <TIM_Base_SetConfig+0x6c>)
 8001fd6:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001fd8:	bf04      	itt	eq
 8001fda:	690b      	ldreq	r3, [r1, #16]
 8001fdc:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	6143      	str	r3, [r0, #20]
 8001fe2:	4770      	bx	lr
 8001fe4:	40012c00 	.word	0x40012c00

08001fe8 <HAL_TIM_Base_Init>:
{
 8001fe8:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001fea:	4604      	mov	r4, r0
 8001fec:	b1a0      	cbz	r0, 8002018 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001fee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ff2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ff6:	b91b      	cbnz	r3, 8002000 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001ff8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001ffc:	f002 fa6c 	bl	80044d8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002000:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002002:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002004:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002008:	1d21      	adds	r1, r4, #4
 800200a:	f7ff ffb5 	bl	8001f78 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800200e:	2301      	movs	r3, #1
  return HAL_OK;
 8002010:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002012:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002016:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002018:	2001      	movs	r0, #1
}
 800201a:	bd10      	pop	{r4, pc}

0800201c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800201c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002020:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002022:	2b01      	cmp	r3, #1
 8002024:	f04f 0302 	mov.w	r3, #2
 8002028:	d018      	beq.n	800205c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800202a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800202e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002030:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002032:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002034:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002036:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800203a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	4322      	orrs	r2, r4
 8002040:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002048:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	430a      	orrs	r2, r1
 800204e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002050:	2301      	movs	r3, #1
 8002052:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002056:	2300      	movs	r3, #0
 8002058:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800205c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800205e:	bd10      	pop	{r4, pc}

08002060 <HAL_TIMEx_CommutationCallback>:
 8002060:	4770      	bx	lr

08002062 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002062:	4770      	bx	lr

08002064 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002064:	6803      	ldr	r3, [r0, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800206c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	f022 0201 	bic.w	r2, r2, #1
 8002074:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002076:	2320      	movs	r3, #32
 8002078:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800207c:	4770      	bx	lr
	...

08002080 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002084:	6805      	ldr	r5, [r0, #0]
 8002086:	68c2      	ldr	r2, [r0, #12]
 8002088:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800208a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800208c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002090:	4313      	orrs	r3, r2
 8002092:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002094:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8002096:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002098:	430b      	orrs	r3, r1
 800209a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 800209c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80020a0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020a4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020aa:	696b      	ldr	r3, [r5, #20]
 80020ac:	6982      	ldr	r2, [r0, #24]
 80020ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b2:	4313      	orrs	r3, r2
 80020b4:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80020b6:	4b40      	ldr	r3, [pc, #256]	; (80021b8 <UART_SetConfig+0x138>)
{
 80020b8:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80020ba:	429d      	cmp	r5, r3
 80020bc:	f04f 0419 	mov.w	r4, #25
 80020c0:	d146      	bne.n	8002150 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80020c2:	f7ff fd59 	bl	8001b78 <HAL_RCC_GetPCLK2Freq>
 80020c6:	fb04 f300 	mul.w	r3, r4, r0
 80020ca:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80020ce:	f04f 0864 	mov.w	r8, #100	; 0x64
 80020d2:	00b6      	lsls	r6, r6, #2
 80020d4:	fbb3 f3f6 	udiv	r3, r3, r6
 80020d8:	fbb3 f3f8 	udiv	r3, r3, r8
 80020dc:	011e      	lsls	r6, r3, #4
 80020de:	f7ff fd4b 	bl	8001b78 <HAL_RCC_GetPCLK2Freq>
 80020e2:	4360      	muls	r0, r4
 80020e4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	fbb0 f7f3 	udiv	r7, r0, r3
 80020ee:	f7ff fd43 	bl	8001b78 <HAL_RCC_GetPCLK2Freq>
 80020f2:	4360      	muls	r0, r4
 80020f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80020fe:	fbb3 f3f8 	udiv	r3, r3, r8
 8002102:	fb08 7313 	mls	r3, r8, r3, r7
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	3332      	adds	r3, #50	; 0x32
 800210a:	fbb3 f3f8 	udiv	r3, r3, r8
 800210e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002112:	f7ff fd31 	bl	8001b78 <HAL_RCC_GetPCLK2Freq>
 8002116:	4360      	muls	r0, r4
 8002118:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800211c:	0092      	lsls	r2, r2, #2
 800211e:	fbb0 faf2 	udiv	sl, r0, r2
 8002122:	f7ff fd29 	bl	8001b78 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002126:	4360      	muls	r0, r4
 8002128:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002132:	fbb3 f3f8 	udiv	r3, r3, r8
 8002136:	fb08 a313 	mls	r3, r8, r3, sl
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	3332      	adds	r3, #50	; 0x32
 800213e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	433b      	orrs	r3, r7
 8002148:	4433      	add	r3, r6
 800214a:	60ab      	str	r3, [r5, #8]
 800214c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002150:	f7ff fd02 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 8002154:	fb04 f300 	mul.w	r3, r4, r0
 8002158:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800215c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002160:	00b6      	lsls	r6, r6, #2
 8002162:	fbb3 f3f6 	udiv	r3, r3, r6
 8002166:	fbb3 f3f8 	udiv	r3, r3, r8
 800216a:	011e      	lsls	r6, r3, #4
 800216c:	f7ff fcf4 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 8002170:	4360      	muls	r0, r4
 8002172:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	fbb0 f7f3 	udiv	r7, r0, r3
 800217c:	f7ff fcec 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 8002180:	4360      	muls	r0, r4
 8002182:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	fbb0 f3f3 	udiv	r3, r0, r3
 800218c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002190:	fb08 7313 	mls	r3, r8, r3, r7
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	3332      	adds	r3, #50	; 0x32
 8002198:	fbb3 f3f8 	udiv	r3, r3, r8
 800219c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80021a0:	f7ff fcda 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 80021a4:	4360      	muls	r0, r4
 80021a6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80021aa:	0092      	lsls	r2, r2, #2
 80021ac:	fbb0 faf2 	udiv	sl, r0, r2
 80021b0:	f7ff fcd2 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 80021b4:	e7b7      	b.n	8002126 <UART_SetConfig+0xa6>
 80021b6:	bf00      	nop
 80021b8:	40013800 	.word	0x40013800

080021bc <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80021bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021be:	4604      	mov	r4, r0
 80021c0:	460e      	mov	r6, r1
 80021c2:	4617      	mov	r7, r2
 80021c4:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80021c6:	6821      	ldr	r1, [r4, #0]
 80021c8:	680b      	ldr	r3, [r1, #0]
 80021ca:	ea36 0303 	bics.w	r3, r6, r3
 80021ce:	d101      	bne.n	80021d4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80021d0:	2000      	movs	r0, #0
}
 80021d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80021d4:	1c6b      	adds	r3, r5, #1
 80021d6:	d0f7      	beq.n	80021c8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80021d8:	b995      	cbnz	r5, 8002200 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021da:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80021dc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021e4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021e6:	695a      	ldr	r2, [r3, #20]
 80021e8:	f022 0201 	bic.w	r2, r2, #1
 80021ec:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80021ee:	2320      	movs	r3, #32
 80021f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80021f4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80021f8:	2300      	movs	r3, #0
 80021fa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80021fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002200:	f7fe fb6a 	bl	80008d8 <HAL_GetTick>
 8002204:	1bc0      	subs	r0, r0, r7
 8002206:	4285      	cmp	r5, r0
 8002208:	d2dd      	bcs.n	80021c6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800220a:	e7e6      	b.n	80021da <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800220c <HAL_UART_Init>:
{
 800220c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800220e:	4604      	mov	r4, r0
 8002210:	b340      	cbz	r0, 8002264 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002212:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002216:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800221a:	b91b      	cbnz	r3, 8002224 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800221c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002220:	f002 f976 	bl	8004510 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002224:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002226:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002228:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800222c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800222e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002230:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002234:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002236:	f7ff ff23 	bl	8002080 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800223a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800223c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002244:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002246:	695a      	ldr	r2, [r3, #20]
 8002248:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800224c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002254:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8002256:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002258:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800225a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800225e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002262:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002264:	2001      	movs	r0, #1
}
 8002266:	bd10      	pop	{r4, pc}

08002268 <HAL_HalfDuplex_Init>:
{
 8002268:	b510      	push	{r4, lr}
  if(huart == NULL)
 800226a:	4604      	mov	r4, r0
 800226c:	b360      	cbz	r0, 80022c8 <HAL_HalfDuplex_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800226e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002272:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002276:	b91b      	cbnz	r3, 8002280 <HAL_HalfDuplex_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002278:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800227c:	f002 f948 	bl	8004510 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002280:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002282:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002284:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002288:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800228a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800228c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002290:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002292:	f7ff fef5 	bl	8002080 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002296:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002298:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80022a8:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	f042 0208 	orr.w	r2, r2, #8
 80022b0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022b8:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80022ba:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022bc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80022be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80022c2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80022c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022c8:	2001      	movs	r0, #1
}
 80022ca:	bd10      	pop	{r4, pc}

080022cc <HAL_UART_Transmit>:
{
 80022cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022d0:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80022d2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80022d6:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80022d8:	2b20      	cmp	r3, #32
{
 80022da:	460d      	mov	r5, r1
 80022dc:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80022de:	d14e      	bne.n	800237e <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 80022e0:	2900      	cmp	r1, #0
 80022e2:	d049      	beq.n	8002378 <HAL_UART_Transmit+0xac>
 80022e4:	2a00      	cmp	r2, #0
 80022e6:	d047      	beq.n	8002378 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80022e8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d046      	beq.n	800237e <HAL_UART_Transmit+0xb2>
 80022f0:	2301      	movs	r3, #1
 80022f2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022fa:	2321      	movs	r3, #33	; 0x21
 80022fc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002300:	f7fe faea 	bl	80008d8 <HAL_GetTick>
 8002304:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8002306:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800230a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800230e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002310:	b29b      	uxth	r3, r3
 8002312:	b96b      	cbnz	r3, 8002330 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002314:	463b      	mov	r3, r7
 8002316:	4632      	mov	r2, r6
 8002318:	2140      	movs	r1, #64	; 0x40
 800231a:	4620      	mov	r0, r4
 800231c:	f7ff ff4e 	bl	80021bc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002320:	b9a8      	cbnz	r0, 800234e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8002322:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002324:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8002328:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800232c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002330:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002332:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002334:	3b01      	subs	r3, #1
 8002336:	b29b      	uxth	r3, r3
 8002338:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800233a:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800233c:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800233e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002342:	4620      	mov	r0, r4
 8002344:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002346:	d10e      	bne.n	8002366 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002348:	f7ff ff38 	bl	80021bc <UART_WaitOnFlagUntilTimeout.constprop.3>
 800234c:	b110      	cbz	r0, 8002354 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 800234e:	2003      	movs	r0, #3
 8002350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002354:	882b      	ldrh	r3, [r5, #0]
 8002356:	6822      	ldr	r2, [r4, #0]
 8002358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800235c:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800235e:	6923      	ldr	r3, [r4, #16]
 8002360:	b943      	cbnz	r3, 8002374 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8002362:	3502      	adds	r5, #2
 8002364:	e7d3      	b.n	800230e <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002366:	f7ff ff29 	bl	80021bc <UART_WaitOnFlagUntilTimeout.constprop.3>
 800236a:	2800      	cmp	r0, #0
 800236c:	d1ef      	bne.n	800234e <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800236e:	6823      	ldr	r3, [r4, #0]
 8002370:	782a      	ldrb	r2, [r5, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	3501      	adds	r5, #1
 8002376:	e7ca      	b.n	800230e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002378:	2001      	movs	r0, #1
 800237a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800237e:	2002      	movs	r0, #2
}
 8002380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002384 <HAL_UART_TxCpltCallback>:
 8002384:	4770      	bx	lr

08002386 <HAL_UART_RxCpltCallback>:
 8002386:	4770      	bx	lr

08002388 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002388:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 800238c:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800238e:	2b22      	cmp	r3, #34	; 0x22
 8002390:	d136      	bne.n	8002400 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002392:	6883      	ldr	r3, [r0, #8]
 8002394:	6901      	ldr	r1, [r0, #16]
 8002396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239a:	6802      	ldr	r2, [r0, #0]
 800239c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800239e:	d123      	bne.n	80023e8 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023a0:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80023a2:	b9e9      	cbnz	r1, 80023e0 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023a8:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80023ac:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 80023ae:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80023b0:	3c01      	subs	r4, #1
 80023b2:	b2a4      	uxth	r4, r4
 80023b4:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80023b6:	b98c      	cbnz	r4, 80023dc <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023b8:	6803      	ldr	r3, [r0, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	f022 0220 	bic.w	r2, r2, #32
 80023c0:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023c8:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	f022 0201 	bic.w	r2, r2, #1
 80023d0:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80023d2:	2320      	movs	r3, #32
 80023d4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80023d8:	f7ff ffd5 	bl	8002386 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 80023dc:	2000      	movs	r0, #0
}
 80023de:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	f823 2b01 	strh.w	r2, [r3], #1
 80023e6:	e7e1      	b.n	80023ac <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80023e8:	b921      	cbnz	r1, 80023f4 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023ea:	1c59      	adds	r1, r3, #1
 80023ec:	6852      	ldr	r2, [r2, #4]
 80023ee:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	e7dc      	b.n	80023ae <UART_Receive_IT+0x26>
 80023f4:	6852      	ldr	r2, [r2, #4]
 80023f6:	1c59      	adds	r1, r3, #1
 80023f8:	6281      	str	r1, [r0, #40]	; 0x28
 80023fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023fe:	e7f7      	b.n	80023f0 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002400:	2002      	movs	r0, #2
 8002402:	bd10      	pop	{r4, pc}

08002404 <HAL_UART_ErrorCallback>:
 8002404:	4770      	bx	lr
	...

08002408 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002408:	6803      	ldr	r3, [r0, #0]
{
 800240a:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800240c:	681a      	ldr	r2, [r3, #0]
{
 800240e:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8002410:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002412:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002414:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8002416:	d107      	bne.n	8002428 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002418:	0696      	lsls	r6, r2, #26
 800241a:	d55a      	bpl.n	80024d2 <HAL_UART_IRQHandler+0xca>
 800241c:	068d      	lsls	r5, r1, #26
 800241e:	d558      	bpl.n	80024d2 <HAL_UART_IRQHandler+0xca>
}
 8002420:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002424:	f7ff bfb0 	b.w	8002388 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002428:	f015 0501 	ands.w	r5, r5, #1
 800242c:	d102      	bne.n	8002434 <HAL_UART_IRQHandler+0x2c>
 800242e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002432:	d04e      	beq.n	80024d2 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002434:	07d3      	lsls	r3, r2, #31
 8002436:	d505      	bpl.n	8002444 <HAL_UART_IRQHandler+0x3c>
 8002438:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800243a:	bf42      	ittt	mi
 800243c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800243e:	f043 0301 	orrmi.w	r3, r3, #1
 8002442:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002444:	0750      	lsls	r0, r2, #29
 8002446:	d504      	bpl.n	8002452 <HAL_UART_IRQHandler+0x4a>
 8002448:	b11d      	cbz	r5, 8002452 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800244a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800244c:	f043 0302 	orr.w	r3, r3, #2
 8002450:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002452:	0793      	lsls	r3, r2, #30
 8002454:	d504      	bpl.n	8002460 <HAL_UART_IRQHandler+0x58>
 8002456:	b11d      	cbz	r5, 8002460 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002458:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800245a:	f043 0304 	orr.w	r3, r3, #4
 800245e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002460:	0716      	lsls	r6, r2, #28
 8002462:	d504      	bpl.n	800246e <HAL_UART_IRQHandler+0x66>
 8002464:	b11d      	cbz	r5, 800246e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002466:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002468:	f043 0308 	orr.w	r3, r3, #8
 800246c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800246e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002470:	2b00      	cmp	r3, #0
 8002472:	d066      	beq.n	8002542 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002474:	0695      	lsls	r5, r2, #26
 8002476:	d504      	bpl.n	8002482 <HAL_UART_IRQHandler+0x7a>
 8002478:	0688      	lsls	r0, r1, #26
 800247a:	d502      	bpl.n	8002482 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 800247c:	4620      	mov	r0, r4
 800247e:	f7ff ff83 	bl	8002388 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002482:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002484:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002486:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002488:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800248a:	0711      	lsls	r1, r2, #28
 800248c:	d402      	bmi.n	8002494 <HAL_UART_IRQHandler+0x8c>
 800248e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002492:	d01a      	beq.n	80024ca <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002494:	f7ff fde6 	bl	8002064 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002498:	6823      	ldr	r3, [r4, #0]
 800249a:	695a      	ldr	r2, [r3, #20]
 800249c:	0652      	lsls	r2, r2, #25
 800249e:	d510      	bpl.n	80024c2 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024a0:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80024a2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024a8:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80024aa:	b150      	cbz	r0, 80024c2 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024ac:	4b25      	ldr	r3, [pc, #148]	; (8002544 <HAL_UART_IRQHandler+0x13c>)
 80024ae:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024b0:	f7fe faa4 	bl	80009fc <HAL_DMA_Abort_IT>
 80024b4:	2800      	cmp	r0, #0
 80024b6:	d044      	beq.n	8002542 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024b8:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80024ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80024c0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80024c2:	4620      	mov	r0, r4
 80024c4:	f7ff ff9e 	bl	8002404 <HAL_UART_ErrorCallback>
 80024c8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80024ca:	f7ff ff9b 	bl	8002404 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ce:	63e5      	str	r5, [r4, #60]	; 0x3c
 80024d0:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024d2:	0616      	lsls	r6, r2, #24
 80024d4:	d527      	bpl.n	8002526 <HAL_UART_IRQHandler+0x11e>
 80024d6:	060d      	lsls	r5, r1, #24
 80024d8:	d525      	bpl.n	8002526 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80024da:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80024de:	2a21      	cmp	r2, #33	; 0x21
 80024e0:	d12f      	bne.n	8002542 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024e2:	68a2      	ldr	r2, [r4, #8]
 80024e4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80024e8:	6a22      	ldr	r2, [r4, #32]
 80024ea:	d117      	bne.n	800251c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024ec:	8811      	ldrh	r1, [r2, #0]
 80024ee:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80024f2:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80024f4:	6921      	ldr	r1, [r4, #16]
 80024f6:	b979      	cbnz	r1, 8002518 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80024f8:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80024fa:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80024fc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80024fe:	3a01      	subs	r2, #1
 8002500:	b292      	uxth	r2, r2
 8002502:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002504:	b9ea      	cbnz	r2, 8002542 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800250c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002518:	3201      	adds	r2, #1
 800251a:	e7ee      	b.n	80024fa <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800251c:	1c51      	adds	r1, r2, #1
 800251e:	6221      	str	r1, [r4, #32]
 8002520:	7812      	ldrb	r2, [r2, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	e7ea      	b.n	80024fc <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002526:	0650      	lsls	r0, r2, #25
 8002528:	d50b      	bpl.n	8002542 <HAL_UART_IRQHandler+0x13a>
 800252a:	064a      	lsls	r2, r1, #25
 800252c:	d509      	bpl.n	8002542 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800252e:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002530:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002536:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002538:	2320      	movs	r3, #32
 800253a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800253e:	f7ff ff21 	bl	8002384 <HAL_UART_TxCpltCallback>
 8002542:	bd70      	pop	{r4, r5, r6, pc}
 8002544:	08002549 	.word	0x08002549

08002548 <UART_DMAAbortOnError>:
{
 8002548:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800254a:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800254c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800254e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002550:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002552:	f7ff ff57 	bl	8002404 <HAL_UART_ErrorCallback>
 8002556:	bd08      	pop	{r3, pc}

08002558 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002558:	b084      	sub	sp, #16
 800255a:	a801      	add	r0, sp, #4
 800255c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002560:	b004      	add	sp, #16
 8002562:	2000      	movs	r0, #0
 8002564:	4770      	bx	lr

08002566 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002566:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800256a:	b29b      	uxth	r3, r3
 800256c:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8002570:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8002574:	2000      	movs	r0, #0
 8002576:	4770      	bx	lr

08002578 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002578:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800257c:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8002580:	045b      	lsls	r3, r3, #17
 8002582:	0c5b      	lsrs	r3, r3, #17
 8002584:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8002588:	2000      	movs	r0, #0
 800258a:	4770      	bx	lr

0800258c <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800258c:	2000      	movs	r0, #0
 800258e:	4770      	bx	lr

08002590 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002590:	b084      	sub	sp, #16
 8002592:	b510      	push	{r4, lr}
 8002594:	ac03      	add	r4, sp, #12
 8002596:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 800259a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 800259e:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 80025a0:	2301      	movs	r3, #1
 80025a2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 80025a6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 80025aa:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80025ae:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80025b2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 80025b6:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80025be:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 80025c2:	4610      	mov	r0, r2
 80025c4:	4770      	bx	lr
	...

080025c8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80025c8:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 80025ca:	78cb      	ldrb	r3, [r1, #3]
 80025cc:	780a      	ldrb	r2, [r1, #0]
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d80f      	bhi.n	80025f2 <USB_ActivateEndpoint+0x2a>
 80025d2:	e8df f003 	tbb	[pc, r3]
 80025d6:	6402      	.short	0x6402
 80025d8:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 80025da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025de:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80025e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e6:	041b      	lsls	r3, r3, #16
 80025e8:	0c1b      	lsrs	r3, r3, #16
 80025ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80025ee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80025f2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80025f6:	780c      	ldrb	r4, [r1, #0]
 80025f8:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80025fc:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 8002600:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002604:	401a      	ands	r2, r3
 8002606:	432a      	orrs	r2, r5
 8002608:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 800260c:	7a8a      	ldrb	r2, [r1, #10]
 800260e:	780d      	ldrb	r5, [r1, #0]
 8002610:	2a00      	cmp	r2, #0
 8002612:	f040 8097 	bne.w	8002744 <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 8002616:	784c      	ldrb	r4, [r1, #1]
 8002618:	888a      	ldrh	r2, [r1, #4]
 800261a:	2c00      	cmp	r4, #0
 800261c:	d04a      	beq.n	80026b4 <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800261e:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8002622:	0852      	lsrs	r2, r2, #1
 8002624:	b2a4      	uxth	r4, r4
 8002626:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800262a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800262e:	0052      	lsls	r2, r2, #1
 8002630:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002634:	780c      	ldrb	r4, [r1, #0]
 8002636:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800263a:	0652      	lsls	r2, r2, #25
 800263c:	d508      	bpl.n	8002650 <USB_ActivateEndpoint+0x88>
 800263e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002642:	4013      	ands	r3, r2
 8002644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002648:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800264c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8002650:	780a      	ldrb	r2, [r1, #0]
 8002652:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800265a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800265e:	041b      	lsls	r3, r3, #16
 8002660:	0c1b      	lsrs	r3, r3, #16
 8002662:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800266a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800266e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002672:	2000      	movs	r0, #0
 8002674:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8002676:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800267a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800267e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002682:	041b      	lsls	r3, r3, #16
 8002684:	0c1b      	lsrs	r3, r3, #16
 8002686:	e7b2      	b.n	80025ee <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8002688:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800268c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002694:	041b      	lsls	r3, r3, #16
 8002696:	0c1b      	lsrs	r3, r3, #16
 8002698:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800269c:	e7a7      	b.n	80025ee <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 800269e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026a2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80026a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026aa:	041b      	lsls	r3, r3, #16
 80026ac:	0c1b      	lsrs	r3, r3, #16
 80026ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026b2:	e79c      	b.n	80025ee <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80026b4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80026b8:	0852      	lsrs	r2, r2, #1
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3304      	adds	r3, #4
 80026be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80026c2:	0052      	lsls	r2, r2, #1
 80026c4:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 80026c8:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80026cc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80026d0:	690d      	ldr	r5, [r1, #16]
 80026d2:	b292      	uxth	r2, r2
 80026d4:	780b      	ldrb	r3, [r1, #0]
 80026d6:	3206      	adds	r2, #6
 80026d8:	2d3e      	cmp	r5, #62	; 0x3e
 80026da:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80026de:	d929      	bls.n	8002734 <USB_ActivateEndpoint+0x16c>
 80026e0:	f3c5 164f 	ubfx	r6, r5, #5, #16
 80026e4:	06eb      	lsls	r3, r5, #27
 80026e6:	bf04      	itt	eq
 80026e8:	f106 33ff 	addeq.w	r3, r6, #4294967295
 80026ec:	b29e      	uxtheq	r6, r3
 80026ee:	4b6e      	ldr	r3, [pc, #440]	; (80028a8 <USB_ActivateEndpoint+0x2e0>)
 80026f0:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80026fa:	780a      	ldrb	r2, [r1, #0]
 80026fc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002700:	045e      	lsls	r6, r3, #17
 8002702:	d50b      	bpl.n	800271c <USB_ActivateEndpoint+0x154>
 8002704:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002708:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800270c:	051b      	lsls	r3, r3, #20
 800270e:	0d1b      	lsrs	r3, r3, #20
 8002710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002718:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800271c:	780a      	ldrb	r2, [r1, #0]
 800271e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272a:	041b      	lsls	r3, r3, #16
 800272c:	0c1b      	lsrs	r3, r3, #16
 800272e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002732:	e798      	b.n	8002666 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002734:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8002738:	07ed      	lsls	r5, r5, #31
 800273a:	bf44      	itt	mi
 800273c:	3301      	addmi	r3, #1
 800273e:	b29b      	uxthmi	r3, r3
 8002740:	029b      	lsls	r3, r3, #10
 8002742:	e7d7      	b.n	80026f4 <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002744:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8002748:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 800274c:	0512      	lsls	r2, r2, #20
 800274e:	0d12      	lsrs	r2, r2, #20
 8002750:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8002754:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002758:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 800275c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002760:	780c      	ldrb	r4, [r1, #0]
 8002762:	b292      	uxth	r2, r2
 8002764:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002768:	88cc      	ldrh	r4, [r1, #6]
 800276a:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 800276e:	0864      	lsrs	r4, r4, #1
 8002770:	0064      	lsls	r4, r4, #1
 8002772:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 8002776:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800277a:	780c      	ldrb	r4, [r1, #0]
 800277c:	b292      	uxth	r2, r2
 800277e:	3204      	adds	r2, #4
 8002780:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002784:	890c      	ldrh	r4, [r1, #8]
 8002786:	0864      	lsrs	r4, r4, #1
 8002788:	0064      	lsls	r4, r4, #1
 800278a:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 800278e:	784a      	ldrb	r2, [r1, #1]
 8002790:	780c      	ldrb	r4, [r1, #0]
 8002792:	2a00      	cmp	r2, #0
 8002794:	d147      	bne.n	8002826 <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002796:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800279a:	0455      	lsls	r5, r2, #17
 800279c:	d508      	bpl.n	80027b0 <USB_ActivateEndpoint+0x1e8>
 800279e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80027a2:	4013      	ands	r3, r2
 80027a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ac:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027b0:	780a      	ldrb	r2, [r1, #0]
 80027b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027b6:	065c      	lsls	r4, r3, #25
 80027b8:	d50b      	bpl.n	80027d2 <USB_ActivateEndpoint+0x20a>
 80027ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027c2:	051b      	lsls	r3, r3, #20
 80027c4:	0d1b      	lsrs	r3, r3, #20
 80027c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027ce:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80027d2:	780a      	ldrb	r2, [r1, #0]
 80027d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027dc:	051b      	lsls	r3, r3, #20
 80027de:	0d1b      	lsrs	r3, r3, #20
 80027e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027e8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80027ec:	f248 0280 	movw	r2, #32896	; 0x8080
 80027f0:	780c      	ldrb	r4, [r1, #0]
 80027f2:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80027f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fe:	041b      	lsls	r3, r3, #16
 8002800:	0c1b      	lsrs	r3, r3, #16
 8002802:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002806:	4313      	orrs	r3, r2
 8002808:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800280c:	7809      	ldrb	r1, [r1, #0]
 800280e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800281a:	041b      	lsls	r3, r3, #16
 800281c:	0c1b      	lsrs	r3, r3, #16
 800281e:	4313      	orrs	r3, r2
 8002820:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8002824:	e725      	b.n	8002672 <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002826:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800282a:	0452      	lsls	r2, r2, #17
 800282c:	d508      	bpl.n	8002840 <USB_ActivateEndpoint+0x278>
 800282e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002832:	4013      	ands	r3, r2
 8002834:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800283c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002840:	780a      	ldrb	r2, [r1, #0]
 8002842:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002846:	065b      	lsls	r3, r3, #25
 8002848:	d50b      	bpl.n	8002862 <USB_ActivateEndpoint+0x29a>
 800284a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800284e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002852:	051b      	lsls	r3, r3, #20
 8002854:	0d1b      	lsrs	r3, r3, #20
 8002856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800285a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800285e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002862:	780a      	ldrb	r2, [r1, #0]
 8002864:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002868:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800286c:	051b      	lsls	r3, r3, #20
 800286e:	0d1b      	lsrs	r3, r3, #20
 8002870:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002878:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800287c:	f248 0280 	movw	r2, #32896	; 0x8080
 8002880:	780c      	ldrb	r4, [r1, #0]
 8002882:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800288a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800288e:	041b      	lsls	r3, r3, #16
 8002890:	0c1b      	lsrs	r3, r3, #16
 8002892:	4313      	orrs	r3, r2
 8002894:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002898:	7809      	ldrb	r1, [r1, #0]
 800289a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800289e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a6:	e7b8      	b.n	800281a <USB_ActivateEndpoint+0x252>
 80028a8:	ffff8000 	.word	0xffff8000

080028ac <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80028ac:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 80028ae:	7a8c      	ldrb	r4, [r1, #10]
 80028b0:	784a      	ldrb	r2, [r1, #1]
 80028b2:	780b      	ldrb	r3, [r1, #0]
 80028b4:	bbcc      	cbnz	r4, 800292a <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 80028b6:	b302      	cbz	r2, 80028fa <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028b8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80028bc:	0652      	lsls	r2, r2, #25
 80028be:	d50b      	bpl.n	80028d8 <USB_DeactivateEndpoint+0x2c>
 80028c0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80028c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80028c8:	0512      	lsls	r2, r2, #20
 80028ca:	0d12      	lsrs	r2, r2, #20
 80028cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028d0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80028d4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80028d8:	780a      	ldrb	r2, [r1, #0]
 80028da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80028e6:	041b      	lsls	r3, r3, #16
 80028e8:	0c1b      	lsrs	r3, r3, #16
 80028ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80028f6:	2000      	movs	r0, #0
 80028f8:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80028fa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80028fe:	0454      	lsls	r4, r2, #17
 8002900:	d50b      	bpl.n	800291a <USB_DeactivateEndpoint+0x6e>
 8002902:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002906:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800290a:	0512      	lsls	r2, r2, #20
 800290c:	0d12      	lsrs	r2, r2, #20
 800290e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002912:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002916:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800291a:	780a      	ldrb	r2, [r1, #0]
 800291c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002920:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002928:	e7dd      	b.n	80028e6 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 800292a:	2a00      	cmp	r2, #0
 800292c:	d148      	bne.n	80029c0 <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800292e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002932:	0452      	lsls	r2, r2, #17
 8002934:	d50b      	bpl.n	800294e <USB_DeactivateEndpoint+0xa2>
 8002936:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800293a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800293e:	0512      	lsls	r2, r2, #20
 8002940:	0d12      	lsrs	r2, r2, #20
 8002942:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002946:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800294a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800294e:	780a      	ldrb	r2, [r1, #0]
 8002950:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002954:	065c      	lsls	r4, r3, #25
 8002956:	d50b      	bpl.n	8002970 <USB_DeactivateEndpoint+0xc4>
 8002958:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800295c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002960:	051b      	lsls	r3, r3, #20
 8002962:	0d1b      	lsrs	r3, r3, #20
 8002964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002968:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800296c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002970:	780a      	ldrb	r2, [r1, #0]
 8002972:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800297a:	051b      	lsls	r3, r3, #20
 800297c:	0d1b      	lsrs	r3, r3, #20
 800297e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002982:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002986:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800298a:	f248 0280 	movw	r2, #32896	; 0x8080
 800298e:	780c      	ldrb	r4, [r1, #0]
 8002990:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299c:	041b      	lsls	r3, r3, #16
 800299e:	0c1b      	lsrs	r3, r3, #16
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80029a6:	7809      	ldrb	r1, [r1, #0]
 80029a8:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80029ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80029b4:	041b      	lsls	r3, r3, #16
 80029b6:	0c1b      	lsrs	r3, r3, #16
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80029be:	e79a      	b.n	80028f6 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80029c0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80029c4:	0452      	lsls	r2, r2, #17
 80029c6:	d50b      	bpl.n	80029e0 <USB_DeactivateEndpoint+0x134>
 80029c8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80029cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80029d0:	0512      	lsls	r2, r2, #20
 80029d2:	0d12      	lsrs	r2, r2, #20
 80029d4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80029d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029dc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80029e0:	780a      	ldrb	r2, [r1, #0]
 80029e2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029e6:	065b      	lsls	r3, r3, #25
 80029e8:	d50b      	bpl.n	8002a02 <USB_DeactivateEndpoint+0x156>
 80029ea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029f2:	051b      	lsls	r3, r3, #20
 80029f4:	0d1b      	lsrs	r3, r3, #20
 80029f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029fe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002a02:	780a      	ldrb	r2, [r1, #0]
 8002a04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a0c:	051b      	lsls	r3, r3, #20
 8002a0e:	0d1b      	lsrs	r3, r3, #20
 8002a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a18:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a1c:	f248 0280 	movw	r2, #32896	; 0x8080
 8002a20:	780c      	ldrb	r4, [r1, #0]
 8002a22:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a2e:	041b      	lsls	r3, r3, #16
 8002a30:	0c1b      	lsrs	r3, r3, #16
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002a38:	7809      	ldrb	r1, [r1, #0]
 8002a3a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002a3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a46:	e7b5      	b.n	80029b4 <USB_DeactivateEndpoint+0x108>

08002a48 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8002a48:	780a      	ldrb	r2, [r1, #0]
 8002a4a:	b98a      	cbnz	r2, 8002a70 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8002a4c:	8803      	ldrh	r3, [r0, #0]
 8002a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a56:	041b      	lsls	r3, r3, #16
 8002a58:	0c1b      	lsrs	r3, r3, #16
 8002a5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002a5e:	f083 0310 	eor.w	r3, r3, #16
 8002a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a6a:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	4770      	bx	lr
    if (ep->is_in)
 8002a70:	784b      	ldrb	r3, [r1, #1]
 8002a72:	b183      	cbz	r3, 8002a96 <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8002a74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a80:	041b      	lsls	r3, r3, #16
 8002a82:	0c1b      	lsrs	r3, r3, #16
 8002a84:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8002a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a90:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002a94:	e7ea      	b.n	8002a6c <USB_EPSetStall+0x24>
 8002a96:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa2:	041b      	lsls	r3, r3, #16
 8002aa4:	0c1b      	lsrs	r3, r3, #16
 8002aa6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002aaa:	e7ed      	b.n	8002a88 <USB_EPSetStall+0x40>

08002aac <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8002aac:	784b      	ldrb	r3, [r1, #1]
 8002aae:	780a      	ldrb	r2, [r1, #0]
 8002ab0:	b313      	cbz	r3, 8002af8 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ab2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ab6:	065b      	lsls	r3, r3, #25
 8002ab8:	d50b      	bpl.n	8002ad2 <USB_EPClearStall+0x26>
 8002aba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002abe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ac2:	051b      	lsls	r3, r3, #20
 8002ac4:	0d1b      	lsrs	r3, r3, #20
 8002ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ace:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002ad2:	780a      	ldrb	r2, [r1, #0]
 8002ad4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ae0:	041b      	lsls	r3, r3, #16
 8002ae2:	0c1b      	lsrs	r3, r3, #16
 8002ae4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8002af4:	2000      	movs	r0, #0
 8002af6:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002af8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002afc:	045b      	lsls	r3, r3, #17
 8002afe:	d50b      	bpl.n	8002b18 <USB_EPClearStall+0x6c>
 8002b00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b08:	051b      	lsls	r3, r3, #20
 8002b0a:	0d1b      	lsrs	r3, r3, #20
 8002b0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b14:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b18:	780a      	ldrb	r2, [r1, #0]
 8002b1a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b26:	041b      	lsls	r3, r3, #16
 8002b28:	0c1b      	lsrs	r3, r3, #16
 8002b2a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002b2e:	e7db      	b.n	8002ae8 <USB_EPClearStall+0x3c>

08002b30 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8002b30:	b911      	cbnz	r1, 8002b38 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8002b38:	2000      	movs	r0, #0
 8002b3a:	4770      	bx	lr

08002b3c <USB_DevConnect>:
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	4770      	bx	lr

08002b40 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002b40:	2000      	movs	r0, #0
 8002b42:	4770      	bx	lr

08002b44 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8002b44:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002b48:	b280      	uxth	r0, r0
 8002b4a:	4770      	bx	lr

08002b4c <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	4770      	bx	lr

08002b50 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002b50:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002b52:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002b54:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002b56:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002b5a:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002b5c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002b60:	42a3      	cmp	r3, r4
 8002b62:	d100      	bne.n	8002b66 <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002b64:	bd10      	pop	{r4, pc}
 8002b66:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 8002b6a:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8002b6e:	3401      	adds	r4, #1
 8002b70:	e7f6      	b.n	8002b60 <USB_WritePMA+0x10>
	...

08002b74 <USB_EPStartXfer>:
{
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 8002b78:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8002b7a:	7849      	ldrb	r1, [r1, #1]
{
 8002b7c:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8002b7e:	2901      	cmp	r1, #1
 8002b80:	6933      	ldr	r3, [r6, #16]
 8002b82:	7ab0      	ldrb	r0, [r6, #10]
 8002b84:	d166      	bne.n	8002c54 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8002b86:	429a      	cmp	r2, r3
 8002b88:	461c      	mov	r4, r3
      ep->xfer_len =0;
 8002b8a:	bf9b      	ittet	ls
 8002b8c:	2300      	movls	r3, #0
 8002b8e:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8002b90:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 8002b92:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8002b94:	bf88      	it	hi
 8002b96:	61b2      	strhi	r2, [r6, #24]
 8002b98:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 8002b9a:	bb10      	cbnz	r0, 8002be2 <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8002b9c:	88b2      	ldrh	r2, [r6, #4]
 8002b9e:	6971      	ldr	r1, [r6, #20]
 8002ba0:	4628      	mov	r0, r5
 8002ba2:	f7ff ffd5 	bl	8002b50 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002ba6:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002baa:	7832      	ldrb	r2, [r6, #0]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	3302      	adds	r3, #2
 8002bb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002bb4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002bb8:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002bbc:	7832      	ldrb	r2, [r6, #0]
 8002bbe:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bca:	041b      	lsls	r3, r3, #16
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bda:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8002bde:	2000      	movs	r0, #0
 8002be0:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8002be2:	7832      	ldrb	r2, [r6, #0]
 8002be4:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8002be8:	00d2      	lsls	r2, r2, #3
 8002bea:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002bee:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002bf2:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8002bf4:	d01a      	beq.n	8002c2c <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002bf6:	3102      	adds	r1, #2
 8002bf8:	440a      	add	r2, r1
 8002bfa:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002bfe:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8002c02:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8002c04:	6971      	ldr	r1, [r6, #20]
 8002c06:	4628      	mov	r0, r5
 8002c08:	f7ff ffa2 	bl	8002b50 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002c0c:	7873      	ldrb	r3, [r6, #1]
 8002c0e:	7832      	ldrb	r2, [r6, #0]
 8002c10:	b99b      	cbnz	r3, 8002c3a <USB_EPStartXfer+0xc6>
 8002c12:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c1a:	051b      	lsls	r3, r3, #20
 8002c1c:	0d1b      	lsrs	r3, r3, #20
 8002c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c26:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002c2a:	e7c7      	b.n	8002bbc <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c2c:	440a      	add	r2, r1
 8002c2e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002c32:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 8002c36:	88f2      	ldrh	r2, [r6, #6]
 8002c38:	e7e4      	b.n	8002c04 <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d1be      	bne.n	8002bbc <USB_EPStartXfer+0x48>
 8002c3e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002c42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c46:	051b      	lsls	r3, r3, #20
 8002c48:	0d1b      	lsrs	r3, r3, #20
 8002c4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c52:	e7e8      	b.n	8002c26 <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 8002c54:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 8002c56:	bf93      	iteet	ls
 8002c58:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 8002c5a:	1ad2      	subhi	r2, r2, r3
 8002c5c:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 8002c5e:	61b3      	strls	r3, [r6, #24]
 8002c60:	bf98      	it	ls
 8002c62:	4613      	movls	r3, r2
 8002c64:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 8002c66:	bb70      	cbnz	r0, 8002cc6 <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002c68:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002c6c:	2b3e      	cmp	r3, #62	; 0x3e
 8002c6e:	b289      	uxth	r1, r1
 8002c70:	f101 0106 	add.w	r1, r1, #6
 8002c74:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8002c78:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8002c7c:	d918      	bls.n	8002cb0 <USB_EPStartXfer+0x13c>
 8002c7e:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8002c82:	06db      	lsls	r3, r3, #27
 8002c84:	bf04      	itt	eq
 8002c86:	f102 33ff 	addeq.w	r3, r2, #4294967295
 8002c8a:	b29a      	uxtheq	r2, r3
 8002c8c:	4b38      	ldr	r3, [pc, #224]	; (8002d70 <USB_EPStartXfer+0x1fc>)
 8002c8e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002c98:	7832      	ldrb	r2, [r6, #0]
 8002c9a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002c9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca6:	041b      	lsls	r3, r3, #16
 8002ca8:	0c1b      	lsrs	r3, r3, #16
 8002caa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002cae:	e790      	b.n	8002bd2 <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002cb0:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002cb4:	07dc      	lsls	r4, r3, #31
 8002cb6:	bf44      	itt	mi
 8002cb8:	3201      	addmi	r2, #1
 8002cba:	b292      	uxthmi	r2, r2
 8002cbc:	0292      	lsls	r2, r2, #10
 8002cbe:	b292      	uxth	r2, r2
 8002cc0:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8002cc4:	e7e8      	b.n	8002c98 <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002cc6:	b9b9      	cbnz	r1, 8002cf8 <USB_EPStartXfer+0x184>
 8002cc8:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002ccc:	2b3e      	cmp	r3, #62	; 0x3e
 8002cce:	b289      	uxth	r1, r1
 8002cd0:	f101 0102 	add.w	r1, r1, #2
 8002cd4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8002cd8:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 8002cdc:	d928      	bls.n	8002d30 <USB_EPStartXfer+0x1bc>
 8002cde:	f3c3 104f 	ubfx	r0, r3, #5, #16
 8002ce2:	06da      	lsls	r2, r3, #27
 8002ce4:	bf04      	itt	eq
 8002ce6:	f100 32ff 	addeq.w	r2, r0, #4294967295
 8002cea:	b290      	uxtheq	r0, r2
 8002cec:	4a20      	ldr	r2, [pc, #128]	; (8002d70 <USB_EPStartXfer+0x1fc>)
 8002cee:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002cf2:	b292      	uxth	r2, r2
 8002cf4:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 8002cf8:	7872      	ldrb	r2, [r6, #1]
 8002cfa:	7831      	ldrb	r1, [r6, #0]
 8002cfc:	bb5a      	cbnz	r2, 8002d56 <USB_EPStartXfer+0x1e2>
 8002cfe:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002d02:	2b3e      	cmp	r3, #62	; 0x3e
 8002d04:	b292      	uxth	r2, r2
 8002d06:	f102 0206 	add.w	r2, r2, #6
 8002d0a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002d0e:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8002d12:	d915      	bls.n	8002d40 <USB_EPStartXfer+0x1cc>
 8002d14:	f3c3 114f 	ubfx	r1, r3, #5, #16
 8002d18:	06dc      	lsls	r4, r3, #27
 8002d1a:	bf04      	itt	eq
 8002d1c:	f101 33ff 	addeq.w	r3, r1, #4294967295
 8002d20:	b299      	uxtheq	r1, r3
 8002d22:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <USB_EPStartXfer+0x1fc>)
 8002d24:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 8002d2e:	e7b3      	b.n	8002c98 <USB_EPStartXfer+0x124>
 8002d30:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002d34:	07d8      	lsls	r0, r3, #31
 8002d36:	bf44      	itt	mi
 8002d38:	3201      	addmi	r2, #1
 8002d3a:	b292      	uxthmi	r2, r2
 8002d3c:	0292      	lsls	r2, r2, #10
 8002d3e:	e7d8      	b.n	8002cf2 <USB_EPStartXfer+0x17e>
 8002d40:	f3c3 014f 	ubfx	r1, r3, #1, #16
 8002d44:	07db      	lsls	r3, r3, #31
 8002d46:	bf44      	itt	mi
 8002d48:	3101      	addmi	r1, #1
 8002d4a:	b289      	uxthmi	r1, r1
 8002d4c:	0289      	lsls	r1, r1, #10
 8002d4e:	b289      	uxth	r1, r1
 8002d50:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 8002d54:	e7a0      	b.n	8002c98 <USB_EPStartXfer+0x124>
 8002d56:	2a01      	cmp	r2, #1
 8002d58:	d19e      	bne.n	8002c98 <USB_EPStartXfer+0x124>
 8002d5a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002d5e:	b292      	uxth	r2, r2
 8002d60:	3202      	adds	r2, #2
 8002d62:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002d66:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002d6a:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8002d6e:	e793      	b.n	8002c98 <USB_EPStartXfer+0x124>
 8002d70:	ffff8000 	.word	0xffff8000

08002d74 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002d74:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002d76:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002d78:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002d7a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002d7e:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002d80:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002d84:	42a3      	cmp	r3, r4
 8002d86:	d100      	bne.n	8002d8a <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8002d88:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002d8a:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8002d8e:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8002d92:	3401      	adds	r4, #1
 8002d94:	e7f6      	b.n	8002d84 <USB_ReadPMA+0x10>

08002d96 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002d96:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8002d9a:	b11b      	cbz	r3, 8002da4 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8002da2:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8002da4:	2002      	movs	r0, #2
  }
}
 8002da6:	4770      	bx	lr

08002da8 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002da8:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8002dac:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002dae:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002db2:	b15b      	cbz	r3, 8002dcc <USBD_CDC_EP0_RxReady+0x24>
 8002db4:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002db8:	28ff      	cmp	r0, #255	; 0xff
 8002dba:	d007      	beq.n	8002dcc <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8002dc6:	23ff      	movs	r3, #255	; 0xff
 8002dc8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8002dcc:	2000      	movs	r0, #0
 8002dce:	bd10      	pop	{r4, pc}

08002dd0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8002dd0:	2343      	movs	r3, #67	; 0x43
 8002dd2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002dd4:	4800      	ldr	r0, [pc, #0]	; (8002dd8 <USBD_CDC_GetFSCfgDesc+0x8>)
 8002dd6:	4770      	bx	lr
 8002dd8:	20000040 	.word	0x20000040

08002ddc <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002ddc:	2343      	movs	r3, #67	; 0x43
 8002dde:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002de0:	4800      	ldr	r0, [pc, #0]	; (8002de4 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002de2:	4770      	bx	lr
 8002de4:	20000084 	.word	0x20000084

08002de8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8002de8:	2343      	movs	r3, #67	; 0x43
 8002dea:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002dec:	4800      	ldr	r0, [pc, #0]	; (8002df0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002dee:	4770      	bx	lr
 8002df0:	200000d4 	.word	0x200000d4

08002df4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002df4:	230a      	movs	r3, #10
 8002df6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002df8:	4800      	ldr	r0, [pc, #0]	; (8002dfc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002dfa:	4770      	bx	lr
 8002dfc:	200000c8 	.word	0x200000c8

08002e00 <USBD_CDC_DataOut>:
{      
 8002e00:	b538      	push	{r3, r4, r5, lr}
 8002e02:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002e04:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002e08:	f001 fe34 	bl	8004a74 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8002e0c:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002e10:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8002e14:	b14b      	cbz	r3, 8002e2a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002e16:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002e1a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002e24:	4798      	blx	r3
    return USBD_OK;
 8002e26:	2000      	movs	r0, #0
 8002e28:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8002e2a:	2002      	movs	r0, #2
}
 8002e2c:	bd38      	pop	{r3, r4, r5, pc}
	...

08002e30 <USBD_CDC_Setup>:
{
 8002e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e32:	780f      	ldrb	r7, [r1, #0]
{
 8002e34:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e36:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8002e3a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e3c:	d023      	beq.n	8002e86 <USBD_CDC_Setup+0x56>
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d119      	bne.n	8002e76 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8002e42:	88ca      	ldrh	r2, [r1, #6]
 8002e44:	784b      	ldrb	r3, [r1, #1]
 8002e46:	b1c2      	cbz	r2, 8002e7a <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8002e48:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002e4a:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8002e4e:	d50b      	bpl.n	8002e68 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002e50:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8002e54:	4618      	mov	r0, r3
 8002e56:	688f      	ldr	r7, [r1, #8]
 8002e58:	4629      	mov	r1, r5
 8002e5a:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	4630      	mov	r0, r6
 8002e60:	88e2      	ldrh	r2, [r4, #6]
      USBD_CtlSendData (pdev,
 8002e62:	f000 fb8a 	bl	800357a <USBD_CtlSendData>
      break;
 8002e66:	e006      	b.n	8002e76 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8002e68:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8002e6c:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8002e70:	4629      	mov	r1, r5
 8002e72:	f000 fb97 	bl	80035a4 <USBD_CtlPrepareRx>
}
 8002e76:	2000      	movs	r0, #0
 8002e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002e7a:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8002e7e:	6884      	ldr	r4, [r0, #8]
 8002e80:	4618      	mov	r0, r3
 8002e82:	47a0      	blx	r4
 8002e84:	e7f7      	b.n	8002e76 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8002e86:	784b      	ldrb	r3, [r1, #1]
 8002e88:	2b0a      	cmp	r3, #10
 8002e8a:	d1f4      	bne.n	8002e76 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	4901      	ldr	r1, [pc, #4]	; (8002e94 <USBD_CDC_Setup+0x64>)
 8002e90:	e7e7      	b.n	8002e62 <USBD_CDC_Setup+0x32>
 8002e92:	bf00      	nop
 8002e94:	200001e4 	.word	0x200001e4

08002e98 <USBD_CDC_DeInit>:
{
 8002e98:	b510      	push	{r4, lr}
 8002e9a:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8002e9c:	2181      	movs	r1, #129	; 0x81
 8002e9e:	f001 fd85 	bl	80049ac <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	f001 fd81 	bl	80049ac <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002eaa:	2182      	movs	r1, #130	; 0x82
 8002eac:	4620      	mov	r0, r4
 8002eae:	f001 fd7d 	bl	80049ac <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002eb2:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002eb6:	b153      	cbz	r3, 8002ece <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002eb8:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002ec0:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002ec4:	f001 fde0 	bl	8004a88 <USBD_static_free>
    pdev->pClassData = NULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8002ece:	2000      	movs	r0, #0
 8002ed0:	bd10      	pop	{r4, pc}

08002ed2 <USBD_CDC_Init>:
{
 8002ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002ed4:	7c03      	ldrb	r3, [r0, #16]
{
 8002ed6:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002ed8:	bb7b      	cbnz	r3, 8002f3a <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8002eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ede:	2202      	movs	r2, #2
 8002ee0:	2181      	movs	r1, #129	; 0x81
 8002ee2:	f001 fd53 	bl	800498c <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8002eea:	2202      	movs	r2, #2
 8002eec:	2101      	movs	r1, #1
 8002eee:	4620      	mov	r0, r4
 8002ef0:	f001 fd4c 	bl	800498c <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8002ef4:	2308      	movs	r3, #8
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	2182      	movs	r1, #130	; 0x82
 8002efa:	4620      	mov	r0, r4
 8002efc:	f001 fd46 	bl	800498c <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002f00:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002f04:	f001 fdbc 	bl	8004a80 <USBD_static_malloc>
 8002f08:	4606      	mov	r6, r0
 8002f0a:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8002f0e:	b320      	cbz	r0, 8002f5a <USBD_CDC_Init+0x88>
    hcdc->TxState =0;
 8002f10:	2500      	movs	r5, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002f12:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002f1a:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8002f1c:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8002f20:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002f24:	b987      	cbnz	r7, 8002f48 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8002f26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f2a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002f2e:	2101      	movs	r1, #1
 8002f30:	4620      	mov	r0, r4
 8002f32:	f001 fd91 	bl	8004a58 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002f36:	4638      	mov	r0, r7
 8002f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8002f3a:	2340      	movs	r3, #64	; 0x40
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	2181      	movs	r1, #129	; 0x81
 8002f40:	f001 fd24 	bl	800498c <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002f44:	2340      	movs	r3, #64	; 0x40
 8002f46:	e7d0      	b.n	8002eea <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8002f48:	2340      	movs	r3, #64	; 0x40
 8002f4a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002f4e:	2101      	movs	r1, #1
 8002f50:	4620      	mov	r0, r4
 8002f52:	f001 fd81 	bl	8004a58 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002f56:	4628      	mov	r0, r5
 8002f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 8002f5a:	2001      	movs	r0, #1
}
 8002f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f5e <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8002f5e:	b119      	cbz	r1, 8002f68 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8002f60:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8002f64:	2000      	movs	r0, #0
 8002f66:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002f68:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8002f6a:	4770      	bx	lr

08002f6c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002f6c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8002f70:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8002f72:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8002f76:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8002f7a:	4770      	bx	lr

08002f7c <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8002f7c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8002f80:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002f82:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002f86:	4770      	bx	lr

08002f88 <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002f88:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8002f8c:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 8002f8e:	b172      	cbz	r2, 8002fae <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8002f90:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8002f94:	2301      	movs	r3, #1
 8002f96:	b964      	cbnz	r4, 8002fb2 <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8002f98:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8002f9c:	2181      	movs	r1, #129	; 0x81
 8002f9e:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8002fa2:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8002fa6:	f001 fd49 	bl	8004a3c <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 8002faa:	4620      	mov	r0, r4
 8002fac:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8002fae:	2002      	movs	r0, #2
 8002fb0:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8002fb2:	4618      	mov	r0, r3
  }
}
 8002fb4:	bd10      	pop	{r4, pc}

08002fb6 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002fb6:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8002fba:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8002fbc:	b162      	cbz	r2, 8002fd8 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002fbe:	7c04      	ldrb	r4, [r0, #16]
 8002fc0:	b944      	cbnz	r4, 8002fd4 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002fc6:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002fca:	2101      	movs	r1, #1
 8002fcc:	f001 fd44 	bl	8004a58 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002fd4:	2340      	movs	r3, #64	; 0x40
 8002fd6:	e7f6      	b.n	8002fc6 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8002fd8:	2002      	movs	r0, #2
  }
}
 8002fda:	bd10      	pop	{r4, pc}

08002fdc <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002fdc:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002fde:	b180      	cbz	r0, 8003002 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002fe0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002fe4:	b113      	cbz	r3, 8002fec <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002fec:	b109      	cbz	r1, 8002ff2 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002fee:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002ff2:	2301      	movs	r3, #1
  pdev->id = id;
 8002ff4:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002ff6:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002ffa:	f001 fc71 	bl	80048e0 <USBD_LL_Init>
  
  return USBD_OK; 
 8002ffe:	2000      	movs	r0, #0
 8003000:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8003002:	2002      	movs	r0, #2
}
 8003004:	bd08      	pop	{r3, pc}

08003006 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8003006:	b119      	cbz	r1, 8003010 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003008:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800300c:	2000      	movs	r0, #0
 800300e:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8003010:	2002      	movs	r0, #2
  }
  
  return status;
}
 8003012:	4770      	bx	lr

08003014 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003014:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8003016:	f001 fcab 	bl	8004970 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800301a:	2000      	movs	r0, #0
 800301c:	bd08      	pop	{r3, pc}

0800301e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800301e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8003020:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003024:	b90b      	cbnz	r3, 800302a <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8003026:	2002      	movs	r0, #2
 8003028:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4798      	blx	r3
 800302e:	2800      	cmp	r0, #0
 8003030:	d1f9      	bne.n	8003026 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8003032:	bd08      	pop	{r3, pc}

08003034 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003034:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8003036:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4798      	blx	r3
  return USBD_OK;
}
 800303e:	2000      	movs	r0, #0
 8003040:	bd08      	pop	{r3, pc}

08003042 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003042:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003044:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 8003048:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800304a:	4628      	mov	r0, r5
 800304c:	f000 fa65 	bl	800351a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8003050:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8003052:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8003056:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800305a:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800305e:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8003062:	f001 031f 	and.w	r3, r1, #31
 8003066:	2b01      	cmp	r3, #1
 8003068:	d00e      	beq.n	8003088 <USBD_LL_SetupStage+0x46>
 800306a:	d307      	bcc.n	800307c <USBD_LL_SetupStage+0x3a>
 800306c:	2b02      	cmp	r3, #2
 800306e:	d010      	beq.n	8003092 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8003070:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003074:	4620      	mov	r0, r4
 8003076:	f001 fca7 	bl	80049c8 <USBD_LL_StallEP>
    break;
 800307a:	e003      	b.n	8003084 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800307c:	4629      	mov	r1, r5
 800307e:	4620      	mov	r0, r4
 8003080:	f000 f8d6 	bl	8003230 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8003084:	2000      	movs	r0, #0
 8003086:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8003088:	4629      	mov	r1, r5
 800308a:	4620      	mov	r0, r4
 800308c:	f000 f9ca 	bl	8003424 <USBD_StdItfReq>
    break;
 8003090:	e7f8      	b.n	8003084 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8003092:	4629      	mov	r1, r5
 8003094:	4620      	mov	r0, r4
 8003096:	f000 f9dd 	bl	8003454 <USBD_StdEPReq>
    break;
 800309a:	e7f3      	b.n	8003084 <USBD_LL_SetupStage+0x42>

0800309c <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800309c:	b538      	push	{r3, r4, r5, lr}
 800309e:	4604      	mov	r4, r0
 80030a0:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80030a2:	bb11      	cbnz	r1, 80030ea <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80030a4:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d10f      	bne.n	80030cc <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 80030ac:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80030b0:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d90b      	bls.n	80030d0 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80030b8:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80030ba:	429a      	cmp	r2, r3
 80030bc:	bf28      	it	cs
 80030be:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80030c0:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 80030c4:	b292      	uxth	r2, r2
 80030c6:	4629      	mov	r1, r5
 80030c8:	f000 fa7b 	bl	80035c2 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80030cc:	2000      	movs	r0, #0
 80030ce:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80030d0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	b123      	cbz	r3, 80030e2 <USBD_LL_DataOutStage+0x46>
 80030d8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80030dc:	2a03      	cmp	r2, #3
 80030de:	d100      	bne.n	80030e2 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 80030e0:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80030e2:	4620      	mov	r0, r4
 80030e4:	f000 fa75 	bl	80035d2 <USBD_CtlSendStatus>
 80030e8:	e7f0      	b.n	80030cc <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 80030ea:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0eb      	beq.n	80030cc <USBD_LL_DataOutStage+0x30>
 80030f4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80030f8:	2a03      	cmp	r2, #3
 80030fa:	d1e7      	bne.n	80030cc <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 80030fc:	4798      	blx	r3
 80030fe:	e7e5      	b.n	80030cc <USBD_LL_DataOutStage+0x30>

08003100 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	4613      	mov	r3, r2
 8003104:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8003106:	460e      	mov	r6, r1
 8003108:	2900      	cmp	r1, #0
 800310a:	d13d      	bne.n	8003188 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800310c:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8003110:	2a02      	cmp	r2, #2
 8003112:	d10f      	bne.n	8003134 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8003114:	69c5      	ldr	r5, [r0, #28]
 8003116:	6a02      	ldr	r2, [r0, #32]
 8003118:	4295      	cmp	r5, r2
 800311a:	d914      	bls.n	8003146 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 800311c:	1aaa      	subs	r2, r5, r2
 800311e:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8003120:	4619      	mov	r1, r3
 8003122:	b292      	uxth	r2, r2
 8003124:	f000 fa36 	bl	8003594 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8003128:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800312a:	461a      	mov	r2, r3
 800312c:	4619      	mov	r1, r3
 800312e:	4620      	mov	r0, r4
 8003130:	f001 fc92 	bl	8004a58 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8003134:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8003138:	2b01      	cmp	r3, #1
 800313a:	d102      	bne.n	8003142 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003142:	2000      	movs	r0, #0
 8003144:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8003146:	6983      	ldr	r3, [r0, #24]
 8003148:	fbb3 f5f2 	udiv	r5, r3, r2
 800314c:	fb02 3515 	mls	r5, r2, r5, r3
 8003150:	b965      	cbnz	r5, 800316c <USBD_LL_DataInStage+0x6c>
 8003152:	429a      	cmp	r2, r3
 8003154:	d80a      	bhi.n	800316c <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8003156:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 800315a:	4293      	cmp	r3, r2
 800315c:	d206      	bcs.n	800316c <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800315e:	462a      	mov	r2, r5
 8003160:	f000 fa18 	bl	8003594 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8003164:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8003168:	462b      	mov	r3, r5
 800316a:	e7de      	b.n	800312a <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800316c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	b12b      	cbz	r3, 8003180 <USBD_LL_DataInStage+0x80>
 8003174:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8003178:	2a03      	cmp	r2, #3
 800317a:	d101      	bne.n	8003180 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 800317c:	4620      	mov	r0, r4
 800317e:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8003180:	4620      	mov	r0, r4
 8003182:	f000 fa31 	bl	80035e8 <USBD_CtlReceiveStatus>
 8003186:	e7d5      	b.n	8003134 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8003188:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0d7      	beq.n	8003142 <USBD_LL_DataInStage+0x42>
 8003192:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003196:	2a03      	cmp	r2, #3
 8003198:	d1d3      	bne.n	8003142 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 800319a:	4798      	blx	r3
 800319c:	e7d1      	b.n	8003142 <USBD_LL_DataInStage+0x42>

0800319e <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800319e:	2200      	movs	r2, #0
{
 80031a0:	b538      	push	{r3, r4, r5, lr}
 80031a2:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80031a4:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80031a6:	4611      	mov	r1, r2
 80031a8:	2340      	movs	r3, #64	; 0x40
 80031aa:	f001 fbef 	bl	800498c <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80031ae:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80031b0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 80031b4:	2200      	movs	r2, #0
 80031b6:	2180      	movs	r1, #128	; 0x80
 80031b8:	4620      	mov	r0, r4
 80031ba:	f001 fbe7 	bl	800498c <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80031be:	2301      	movs	r3, #1
 80031c0:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80031c4:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80031c8:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 80031ca:	b12b      	cbz	r3, 80031d8 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80031cc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80031d0:	7921      	ldrb	r1, [r4, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4620      	mov	r0, r4
 80031d6:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80031d8:	2000      	movs	r0, #0
 80031da:	bd38      	pop	{r3, r4, r5, pc}

080031dc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80031dc:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80031de:	2000      	movs	r0, #0
 80031e0:	4770      	bx	lr

080031e2 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80031e2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80031e6:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80031ea:	2304      	movs	r3, #4
 80031ec:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80031f0:	2000      	movs	r0, #0
 80031f2:	4770      	bx	lr

080031f4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80031f4:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 80031f8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80031fc:	2000      	movs	r0, #0
 80031fe:	4770      	bx	lr

08003200 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003200:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003202:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003206:	2a03      	cmp	r2, #3
 8003208:	d104      	bne.n	8003214 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800320a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	b103      	cbz	r3, 8003214 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003212:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8003214:	2000      	movs	r0, #0
 8003216:	bd08      	pop	{r3, pc}

08003218 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8003218:	b510      	push	{r4, lr}
 800321a:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800321c:	2180      	movs	r1, #128	; 0x80
 800321e:	f001 fbd3 	bl	80049c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8003222:	4620      	mov	r0, r4
}
 8003224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8003228:	2100      	movs	r1, #0
 800322a:	f001 bbcd 	b.w	80049c8 <USBD_LL_StallEP>
	...

08003230 <USBD_StdDevReq>:
{
 8003230:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8003232:	784b      	ldrb	r3, [r1, #1]
{
 8003234:	4604      	mov	r4, r0
 8003236:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8003238:	2b09      	cmp	r3, #9
 800323a:	d879      	bhi.n	8003330 <USBD_StdDevReq+0x100>
 800323c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003240:	00e500c9 	.word	0x00e500c9
 8003244:	00d90078 	.word	0x00d90078
 8003248:	006d0078 	.word	0x006d0078
 800324c:	0078000a 	.word	0x0078000a
 8003250:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8003254:	884b      	ldrh	r3, [r1, #2]
 8003256:	0a1a      	lsrs	r2, r3, #8
 8003258:	3a01      	subs	r2, #1
 800325a:	2a06      	cmp	r2, #6
 800325c:	d868      	bhi.n	8003330 <USBD_StdDevReq+0x100>
 800325e:	e8df f002 	tbb	[pc, r2]
 8003262:	1c04      	.short	0x1c04
 8003264:	49676729 	.word	0x49676729
 8003268:	52          	.byte	0x52
 8003269:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800326a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800326e:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003270:	f10d 0106 	add.w	r1, sp, #6
 8003274:	7c20      	ldrb	r0, [r4, #16]
 8003276:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8003278:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800327c:	2a00      	cmp	r2, #0
 800327e:	d067      	beq.n	8003350 <USBD_StdDevReq+0x120>
 8003280:	88eb      	ldrh	r3, [r5, #6]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d064      	beq.n	8003350 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8003286:	429a      	cmp	r2, r3
 8003288:	bf28      	it	cs
 800328a:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 800328c:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 800328e:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8003292:	4620      	mov	r0, r4
 8003294:	f000 f971 	bl	800357a <USBD_CtlSendData>
 8003298:	e05a      	b.n	8003350 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800329a:	7c02      	ldrb	r2, [r0, #16]
 800329c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80032a0:	b932      	cbnz	r2, 80032b0 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80032a4:	f10d 0006 	add.w	r0, sp, #6
 80032a8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80032aa:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80032ac:	7043      	strb	r3, [r0, #1]
 80032ae:	e7e3      	b.n	8003278 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	e7f7      	b.n	80032a4 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	d83a      	bhi.n	8003330 <USBD_StdDevReq+0x100>
 80032ba:	e8df f003 	tbb	[pc, r3]
 80032be:	0703      	.short	0x0703
 80032c0:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80032c4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	e7d1      	b.n	8003270 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80032cc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	e7cd      	b.n	8003270 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80032d4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	e7c9      	b.n	8003270 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80032dc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	e7c5      	b.n	8003270 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80032e4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	e7c1      	b.n	8003270 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80032ec:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	e7bd      	b.n	8003270 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80032f4:	7c03      	ldrb	r3, [r0, #16]
 80032f6:	b9db      	cbnz	r3, 8003330 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80032f8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80032fc:	f10d 0006 	add.w	r0, sp, #6
 8003300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003302:	4798      	blx	r3
 8003304:	e7b8      	b.n	8003278 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003306:	7c03      	ldrb	r3, [r0, #16]
 8003308:	b993      	cbnz	r3, 8003330 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800330a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800330e:	f10d 0006 	add.w	r0, sp, #6
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003316:	2307      	movs	r3, #7
 8003318:	e7c8      	b.n	80032ac <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800331a:	888b      	ldrh	r3, [r1, #4]
 800331c:	b943      	cbnz	r3, 8003330 <USBD_StdDevReq+0x100>
 800331e:	88cb      	ldrh	r3, [r1, #6]
 8003320:	b933      	cbnz	r3, 8003330 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003322:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003326:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003328:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800332a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800332e:	d103      	bne.n	8003338 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8003330:	4620      	mov	r0, r4
 8003332:	f7ff ff71 	bl	8003218 <USBD_CtlError.constprop.0>
    break;
 8003336:	e00b      	b.n	8003350 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8003338:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800333c:	4629      	mov	r1, r5
 800333e:	f001 fb6f 	bl	8004a20 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8003342:	4620      	mov	r0, r4
 8003344:	f000 f945 	bl	80035d2 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8003348:	b12d      	cbz	r5, 8003356 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800334a:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800334c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8003350:	2000      	movs	r0, #0
 8003352:	b003      	add	sp, #12
 8003354:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003356:	2301      	movs	r3, #1
 8003358:	e7f8      	b.n	800334c <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 800335a:	7889      	ldrb	r1, [r1, #2]
 800335c:	4d30      	ldr	r5, [pc, #192]	; (8003420 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800335e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8003360:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003362:	d8e5      	bhi.n	8003330 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8003364:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003368:	2b02      	cmp	r3, #2
 800336a:	d00c      	beq.n	8003386 <USBD_StdDevReq+0x156>
 800336c:	2b03      	cmp	r3, #3
 800336e:	d1df      	bne.n	8003330 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8003370:	b9b1      	cbnz	r1, 80033a0 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003372:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 8003374:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003376:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 800337a:	f7ff fe5b 	bl	8003034 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 800337e:	4620      	mov	r0, r4
 8003380:	f000 f927 	bl	80035d2 <USBD_CtlSendStatus>
 8003384:	e7e4      	b.n	8003350 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8003386:	2900      	cmp	r1, #0
 8003388:	d0f9      	beq.n	800337e <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 800338a:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800338c:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800338e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003390:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003394:	4620      	mov	r0, r4
 8003396:	f7ff fe42 	bl	800301e <USBD_SetClassConfig>
 800339a:	2802      	cmp	r0, #2
 800339c:	d1ef      	bne.n	800337e <USBD_StdDevReq+0x14e>
 800339e:	e7c7      	b.n	8003330 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 80033a0:	6841      	ldr	r1, [r0, #4]
 80033a2:	2901      	cmp	r1, #1
 80033a4:	d0eb      	beq.n	800337e <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80033a6:	b2c9      	uxtb	r1, r1
 80033a8:	f7ff fe44 	bl	8003034 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80033ac:	7829      	ldrb	r1, [r5, #0]
 80033ae:	6061      	str	r1, [r4, #4]
 80033b0:	e7f0      	b.n	8003394 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 80033b2:	88ca      	ldrh	r2, [r1, #6]
 80033b4:	2a01      	cmp	r2, #1
 80033b6:	d1bb      	bne.n	8003330 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 80033b8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d003      	beq.n	80033c8 <USBD_StdDevReq+0x198>
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d1b5      	bne.n	8003330 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 80033c4:	1d01      	adds	r1, r0, #4
 80033c6:	e764      	b.n	8003292 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 80033c8:	4601      	mov	r1, r0
 80033ca:	2300      	movs	r3, #0
 80033cc:	f841 3f08 	str.w	r3, [r1, #8]!
 80033d0:	e75f      	b.n	8003292 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 80033d2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80033d6:	3b02      	subs	r3, #2
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d8a9      	bhi.n	8003330 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80033dc:	2301      	movs	r3, #1
 80033de:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80033e0:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80033e4:	b10b      	cbz	r3, 80033ea <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80033e6:	2303      	movs	r3, #3
 80033e8:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 80033ea:	2202      	movs	r2, #2
 80033ec:	f104 010c 	add.w	r1, r4, #12
 80033f0:	e74f      	b.n	8003292 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80033f2:	884b      	ldrh	r3, [r1, #2]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d1ab      	bne.n	8003350 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80033f8:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80033fc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003400:	4629      	mov	r1, r5
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	4620      	mov	r0, r4
 8003406:	4798      	blx	r3
 8003408:	e7b9      	b.n	800337e <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 800340a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800340e:	3b02      	subs	r3, #2
 8003410:	2b01      	cmp	r3, #1
 8003412:	d88d      	bhi.n	8003330 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8003414:	884b      	ldrh	r3, [r1, #2]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d19a      	bne.n	8003350 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800341a:	2300      	movs	r3, #0
 800341c:	e7ec      	b.n	80033f8 <USBD_StdDevReq+0x1c8>
 800341e:	bf00      	nop
 8003420:	200001e5 	.word	0x200001e5

08003424 <USBD_StdItfReq>:
{
 8003424:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8003426:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 800342a:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 800342c:	2b03      	cmp	r3, #3
{
 800342e:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8003430:	d10d      	bne.n	800344e <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8003432:	790b      	ldrb	r3, [r1, #4]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d80a      	bhi.n	800344e <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8003438:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003440:	88eb      	ldrh	r3, [r5, #6]
 8003442:	b913      	cbnz	r3, 800344a <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8003444:	4620      	mov	r0, r4
 8003446:	f000 f8c4 	bl	80035d2 <USBD_CtlSendStatus>
}
 800344a:	2000      	movs	r0, #0
 800344c:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 800344e:	f7ff fee3 	bl	8003218 <USBD_CtlError.constprop.0>
    break;
 8003452:	e7fa      	b.n	800344a <USBD_StdItfReq+0x26>

08003454 <USBD_StdEPReq>:
{
 8003454:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8003456:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8003458:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 800345a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800345e:	2a20      	cmp	r2, #32
{
 8003460:	4604      	mov	r4, r0
 8003462:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8003464:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8003466:	d105      	bne.n	8003474 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8003468:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	4798      	blx	r3
}
 8003470:	2000      	movs	r0, #0
 8003472:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8003474:	784a      	ldrb	r2, [r1, #1]
 8003476:	2a01      	cmp	r2, #1
 8003478:	d01c      	beq.n	80034b4 <USBD_StdEPReq+0x60>
 800347a:	d32a      	bcc.n	80034d2 <USBD_StdEPReq+0x7e>
 800347c:	2a03      	cmp	r2, #3
 800347e:	d1f7      	bne.n	8003470 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003480:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003484:	2a02      	cmp	r2, #2
 8003486:	d040      	beq.n	800350a <USBD_StdEPReq+0xb6>
 8003488:	2a03      	cmp	r2, #3
 800348a:	d002      	beq.n	8003492 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 800348c:	f7ff fec4 	bl	8003218 <USBD_CtlError.constprop.0>
      break;
 8003490:	e7ee      	b.n	8003470 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003492:	884a      	ldrh	r2, [r1, #2]
 8003494:	b922      	cbnz	r2, 80034a0 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003496:	065e      	lsls	r6, r3, #25
 8003498:	d002      	beq.n	80034a0 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 800349a:	4619      	mov	r1, r3
 800349c:	f001 fa94 	bl	80049c8 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 80034a0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80034a4:	4629      	mov	r1, r5
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	4620      	mov	r0, r4
 80034aa:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80034ac:	4620      	mov	r0, r4
 80034ae:	f000 f890 	bl	80035d2 <USBD_CtlSendStatus>
 80034b2:	e7dd      	b.n	8003470 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80034b4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80034b8:	2a02      	cmp	r2, #2
 80034ba:	d026      	beq.n	800350a <USBD_StdEPReq+0xb6>
 80034bc:	2a03      	cmp	r2, #3
 80034be:	d1e5      	bne.n	800348c <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80034c0:	884a      	ldrh	r2, [r1, #2]
 80034c2:	2a00      	cmp	r2, #0
 80034c4:	d1d4      	bne.n	8003470 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 80034c6:	0659      	lsls	r1, r3, #25
 80034c8:	d0f0      	beq.n	80034ac <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80034ca:	4619      	mov	r1, r3
 80034cc:	f001 fa8a 	bl	80049e4 <USBD_LL_ClearStallEP>
 80034d0:	e7e6      	b.n	80034a0 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 80034d2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80034d6:	2a02      	cmp	r2, #2
 80034d8:	d017      	beq.n	800350a <USBD_StdEPReq+0xb6>
 80034da:	2a03      	cmp	r2, #3
 80034dc:	d1d6      	bne.n	800348c <USBD_StdEPReq+0x38>
 80034de:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80034e2:	f016 0f80 	tst.w	r6, #128	; 0x80
 80034e6:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80034ea:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80034ec:	bf14      	ite	ne
 80034ee:	3514      	addne	r5, #20
 80034f0:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80034f4:	f001 fa84 	bl	8004a00 <USBD_LL_IsStallEP>
 80034f8:	b168      	cbz	r0, 8003516 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 80034fa:	2301      	movs	r3, #1
 80034fc:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 80034fe:	2202      	movs	r2, #2
 8003500:	4629      	mov	r1, r5
 8003502:	4620      	mov	r0, r4
 8003504:	f000 f839 	bl	800357a <USBD_CtlSendData>
      break;
 8003508:	e7b2      	b.n	8003470 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 800350a:	065a      	lsls	r2, r3, #25
 800350c:	d0b0      	beq.n	8003470 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 800350e:	4619      	mov	r1, r3
 8003510:	f001 fa5a 	bl	80049c8 <USBD_LL_StallEP>
 8003514:	e7ac      	b.n	8003470 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8003516:	6028      	str	r0, [r5, #0]
 8003518:	e7f1      	b.n	80034fe <USBD_StdEPReq+0xaa>

0800351a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800351a:	780b      	ldrb	r3, [r1, #0]
 800351c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800351e:	784b      	ldrb	r3, [r1, #1]
 8003520:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003522:	78ca      	ldrb	r2, [r1, #3]
 8003524:	788b      	ldrb	r3, [r1, #2]
 8003526:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800352a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800352c:	794a      	ldrb	r2, [r1, #5]
 800352e:	790b      	ldrb	r3, [r1, #4]
 8003530:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003534:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8003536:	79ca      	ldrb	r2, [r1, #7]
 8003538:	798b      	ldrb	r3, [r1, #6]
 800353a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800353e:	80c3      	strh	r3, [r0, #6]
 8003540:	4770      	bx	lr

08003542 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003542:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8003544:	b188      	cbz	r0, 800356a <USBD_GetString+0x28>
 8003546:	4605      	mov	r5, r0
 8003548:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800354a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2c00      	cmp	r4, #0
 8003552:	d1f9      	bne.n	8003548 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	3302      	adds	r3, #2
 8003558:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800355a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800355c:	2303      	movs	r3, #3
 800355e:	704b      	strb	r3, [r1, #1]
 8003560:	2302      	movs	r3, #2
 8003562:	3801      	subs	r0, #1
    while (*desc != '\0') 
 8003564:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003568:	b905      	cbnz	r5, 800356c <USBD_GetString+0x2a>
 800356a:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	54cd      	strb	r5, [r1, r3]
 8003570:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8003572:	3302      	adds	r3, #2
 8003574:	b2db      	uxtb	r3, r3
 8003576:	548c      	strb	r4, [r1, r2]
 8003578:	e7f4      	b.n	8003564 <USBD_GetString+0x22>

0800357a <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800357a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800357c:	2202      	movs	r2, #2
{
 800357e:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003580:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8003584:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003586:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8003588:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800358a:	2100      	movs	r1, #0
 800358c:	f001 fa56 	bl	8004a3c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003590:	2000      	movs	r0, #0
 8003592:	bd10      	pop	{r4, pc}

08003594 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003594:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8003596:	4613      	mov	r3, r2
 8003598:	460a      	mov	r2, r1
 800359a:	2100      	movs	r1, #0
 800359c:	f001 fa4e 	bl	8004a3c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80035a0:	2000      	movs	r0, #0
 80035a2:	bd08      	pop	{r3, pc}

080035a4 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80035a4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80035a6:	2203      	movs	r2, #3
{
 80035a8:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80035aa:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80035ae:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80035b2:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80035b4:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 80035b8:	2100      	movs	r1, #0
 80035ba:	f001 fa4d 	bl	8004a58 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80035be:	2000      	movs	r0, #0
 80035c0:	bd10      	pop	{r4, pc}

080035c2 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80035c2:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80035c4:	4613      	mov	r3, r2
 80035c6:	460a      	mov	r2, r1
 80035c8:	2100      	movs	r1, #0
 80035ca:	f001 fa45 	bl	8004a58 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80035ce:	2000      	movs	r0, #0
 80035d0:	bd08      	pop	{r3, pc}

080035d2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80035d2:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80035d4:	2304      	movs	r3, #4
 80035d6:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80035da:	2300      	movs	r3, #0
 80035dc:	461a      	mov	r2, r3
 80035de:	4619      	mov	r1, r3
 80035e0:	f001 fa2c 	bl	8004a3c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80035e4:	2000      	movs	r0, #0
 80035e6:	bd08      	pop	{r3, pc}

080035e8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80035e8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80035ea:	2305      	movs	r3, #5
 80035ec:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80035f0:	2300      	movs	r3, #0
 80035f2:	461a      	mov	r2, r3
 80035f4:	4619      	mov	r1, r3
 80035f6:	f001 fa2f 	bl	8004a58 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80035fa:	2000      	movs	r0, #0
 80035fc:	bd08      	pop	{r3, pc}
	...

08003600 <_usart_enable_halfduplex>:
volatile uint8_t recvFlag;
uint8_t rc_buffer[5];
uint8_t debag;
extern UART_HandleTypeDef huart2;
void _usart_enable_halfduplex() {
	OW_USART->CR2 &= ~USART_CR2_LINEN;
 8003600:	4b0a      	ldr	r3, [pc, #40]	; (800362c <_usart_enable_halfduplex+0x2c>)
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003608:	611a      	str	r2, [r3, #16]
	OW_USART->CR2 &= ~USART_CR2_CLKEN;
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003610:	611a      	str	r2, [r3, #16]
	OW_USART->CR3 &= ~USART_CR3_SCEN;
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	f022 0220 	bic.w	r2, r2, #32
 8003618:	615a      	str	r2, [r3, #20]
	OW_USART->CR3 &= ~USART_CR3_IREN;
 800361a:	695a      	ldr	r2, [r3, #20]
 800361c:	f022 0202 	bic.w	r2, r2, #2
 8003620:	615a      	str	r2, [r3, #20]
  OW_USART->CR3 |= USART_CR3_HDSEL;
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	f042 0208 	orr.w	r2, r2, #8
 8003628:	615a      	str	r2, [r3, #20]
 800362a:	4770      	bx	lr
 800362c:	40004400 	.word	0x40004400

08003630 <usart_setup_>:
}

uint8_t getUsartIndex(void);

void usart_setup_(uint32_t baud)
{
 8003630:	b508      	push	{r3, lr}
	MX_USART2_UART_Init(baud); //!!!!
 8003632:	f000 fc7f 	bl	8003f34 <MX_USART2_UART_Init>
	_usart_enable_halfduplex();
 8003636:	f7ff ffe3 	bl	8003600 <_usart_enable_halfduplex>
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800363a:	4b03      	ldr	r3, [pc, #12]	; (8003648 <usart_setup_+0x18>)
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68d3      	ldr	r3, [r2, #12]
 8003640:	f043 0320 	orr.w	r3, r3, #32
 8003644:	60d3      	str	r3, [r2, #12]
 8003646:	bd08      	pop	{r3, pc}
 8003648:	20000d4c 	.word	0x20000d4c

0800364c <owInit>:
void owInit(OneWire *ow) {
	int i=0, k = 0;
	for (; i < MAXDEVICES_ON_THE_BUS; i++) {
		uint8_t *r = (uint8_t *)&ow->ids[i];
		k=0;
		for (; k < 8; k++) r[k] = 0;
 800364c:	2100      	movs	r1, #0
void owInit(OneWire *ow) {
 800364e:	b510      	push	{r4, lr}
 8003650:	1e43      	subs	r3, r0, #1
 8003652:	f100 022f 	add.w	r2, r0, #47	; 0x2f
 8003656:	f103 0408 	add.w	r4, r3, #8
		for (; k < 8; k++) r[k] = 0;
 800365a:	f803 1f01 	strb.w	r1, [r3, #1]!
 800365e:	42a3      	cmp	r3, r4
 8003660:	d1fb      	bne.n	800365a <owInit+0xe>
	for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8003662:	429a      	cmp	r2, r3
 8003664:	d1f7      	bne.n	8003656 <owInit+0xa>
	}
	k=0;
	for (; k < 8; k++) ow->lastROM[k] = 0x00;
 8003666:	2100      	movs	r1, #0
 8003668:	f100 0334 	add.w	r3, r0, #52	; 0x34
 800366c:	f100 023c 	add.w	r2, r0, #60	; 0x3c
 8003670:	f803 1b01 	strb.w	r1, [r3], #1
 8003674:	4293      	cmp	r3, r2
 8003676:	d1fb      	bne.n	8003670 <owInit+0x24>
	ow->lastDiscrepancy = 64;
 8003678:	2340      	movs	r3, #64	; 0x40
 800367a:	6303      	str	r3, [r0, #48]	; 0x30
 800367c:	bd10      	pop	{r4, pc}
	...

08003680 <owReadHandler>:
}

void owReadHandler() {
	uint8_t index = getUsartIndex();
	if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) && ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 8003680:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <owReadHandler+0x28>)
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	0690      	lsls	r0, r2, #26
 8003686:	d50d      	bpl.n	80036a4 <owReadHandler+0x24>
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	0691      	lsls	r1, r2, #26
 800368c:	d50a      	bpl.n	80036a4 <owReadHandler+0x24>
    while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET) {}
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	0692      	lsls	r2, r2, #26
 8003692:	d5fc      	bpl.n	800368e <owReadHandler+0xe>
    rc_buffer[index] = (uint16_t)(OW_USART->DR & (uint16_t)0x01FF);	
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	4b05      	ldr	r3, [pc, #20]	; (80036ac <owReadHandler+0x2c>)
 8003698:	705a      	strb	r2, [r3, #1]
    recvFlag &= ~(1 << index);
 800369a:	4a05      	ldr	r2, [pc, #20]	; (80036b0 <owReadHandler+0x30>)
 800369c:	7813      	ldrb	r3, [r2, #0]
 800369e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80036a2:	7013      	strb	r3, [r2, #0]
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40004400 	.word	0x40004400
 80036ac:	20000438 	.word	0x20000438
 80036b0:	2000043d 	.word	0x2000043d

080036b4 <owSend>:
	else if (OW_USART==USART3)result = 2;
	return result;
}

void owSend(uint16_t data) {
	recvFlag |= (1 << getUsartIndex());
 80036b4:	4a06      	ldr	r2, [pc, #24]	; (80036d0 <owSend+0x1c>)
	OW_USART->DR = (data & (uint16_t)0x01FF);
 80036b6:	f3c0 0008 	ubfx	r0, r0, #0, #9
	recvFlag |= (1 << getUsartIndex());
 80036ba:	7813      	ldrb	r3, [r2, #0]
 80036bc:	f043 0302 	orr.w	r3, r3, #2
 80036c0:	7013      	strb	r3, [r2, #0]
	OW_USART->DR = (data & (uint16_t)0x01FF);
 80036c2:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <owSend+0x20>)
 80036c4:	6058      	str	r0, [r3, #4]
	while ((OW_USART->SR & UART_FLAG_TC) == (uint16_t)RESET) {}
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	0652      	lsls	r2, r2, #25
 80036ca:	d5fc      	bpl.n	80036c6 <owSend+0x12>
}
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	2000043d 	.word	0x2000043d
 80036d4:	40004400 	.word	0x40004400

080036d8 <owEchoRead>:

uint8_t owEchoRead() {
	uint8_t i = getUsartIndex();
	uint16_t pause = 1000;

	while (recvFlag & (1 << i) && pause--);
 80036d8:	f240 33e9 	movw	r3, #1001	; 0x3e9
 80036dc:	4a05      	ldr	r2, [pc, #20]	; (80036f4 <owEchoRead+0x1c>)
 80036de:	7811      	ldrb	r1, [r2, #0]
 80036e0:	0789      	lsls	r1, r1, #30
 80036e2:	d503      	bpl.n	80036ec <owEchoRead+0x14>
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f8      	bne.n	80036de <owEchoRead+0x6>
	return rc_buffer[i];
}
 80036ec:	4b02      	ldr	r3, [pc, #8]	; (80036f8 <owEchoRead+0x20>)
 80036ee:	7858      	ldrb	r0, [r3, #1]
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	2000043d 	.word	0x2000043d
 80036f8:	20000438 	.word	0x20000438

080036fc <owResetCmd>:
uint16_t owResetCmd() {
 80036fc:	b510      	push	{r4, lr}
	usart_setup_(9600);
 80036fe:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8003702:	f7ff ff95 	bl	8003630 <usart_setup_>
	owSend(0xF0);
 8003706:	20f0      	movs	r0, #240	; 0xf0
 8003708:	f7ff ffd4 	bl	80036b4 <owSend>
	owPresence = owEchoRead();
 800370c:	f7ff ffe4 	bl	80036d8 <owEchoRead>
 8003710:	4604      	mov	r4, r0
	usart_setup_(115200);
 8003712:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8003716:	f7ff ff8b 	bl	8003630 <usart_setup_>
	debag = owPresence;
 800371a:	4b02      	ldr	r3, [pc, #8]	; (8003724 <owResetCmd+0x28>)
}
 800371c:	4620      	mov	r0, r4
	debag = owPresence;
 800371e:	701c      	strb	r4, [r3, #0]
}
 8003720:	bd10      	pop	{r4, pc}
 8003722:	bf00      	nop
 8003724:	2000043e 	.word	0x2000043e

08003728 <byteToBits>:
uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {
	uint8_t i;

	for (i = 0; i < 8; i++) {
		if (ow_byte & 0x01) {
			*bits = WIRE_1;
 8003728:	22ff      	movs	r2, #255	; 0xff
uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {
 800372a:	b510      	push	{r4, lr}
 800372c:	4603      	mov	r3, r0
 800372e:	f101 0008 	add.w	r0, r1, #8
		if (ow_byte & 0x01) {
 8003732:	f013 0401 	ands.w	r4, r3, #1
			*bits = WIRE_1;
 8003736:	bf14      	ite	ne
 8003738:	700a      	strbne	r2, [r1, #0]
		} else  *bits = WIRE_0;
 800373a:	700c      	strbeq	r4, [r1, #0]
    bits++;
 800373c:	3101      	adds	r1, #1
	for (i = 0; i < 8; i++) {
 800373e:	4288      	cmp	r0, r1
    ow_byte = ow_byte >> 1;
 8003740:	ea4f 0353 	mov.w	r3, r3, lsr #1
	for (i = 0; i < 8; i++) {
 8003744:	d1f5      	bne.n	8003732 <byteToBits+0xa>
  }
  return bits;
}
 8003746:	bd10      	pop	{r4, pc}

08003748 <owSendByte>:

void owSendByte(uint8_t d) {
 8003748:	b507      	push	{r0, r1, r2, lr}
	uint8_t data[8];
	int i;
	byteToBits(d, data);
 800374a:	4669      	mov	r1, sp
 800374c:	f7ff ffec 	bl	8003728 <byteToBits>
	for (i = 0; i < 8; ++i) owSend(data[i]);
 8003750:	2100      	movs	r1, #0
 8003752:	f81d 0001 	ldrb.w	r0, [sp, r1]
 8003756:	f7ff ffad 	bl	80036b4 <owSend>
 800375a:	3101      	adds	r1, #1
 800375c:	2908      	cmp	r1, #8
 800375e:	d1f8      	bne.n	8003752 <owSendByte+0xa>
}
 8003760:	b003      	add	sp, #12
 8003762:	f85d fb04 	ldr.w	pc, [sp], #4

08003766 <owCRC>:
		bits++;
	}
	return target_byte;
}

uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 8003766:	b570      	push	{r4, r5, r6, lr}
	uint8_t i, dat, crc, fb, st_byt;

	st_byt = 0;
	crc = 0;
 8003768:	2300      	movs	r3, #0
uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 800376a:	4604      	mov	r4, r0
	do {
	    dat = mas[st_byt];
 800376c:	2208      	movs	r2, #8
 800376e:	f814 5b01 	ldrb.w	r5, [r4], #1
	    for (i = 0; i < 8; i++) {
	    	fb = crc ^ dat;
 8003772:	ea85 0603 	eor.w	r6, r5, r3
	    	fb &= 1;
	    	crc >>= 1;
	    	dat >>= 1;
	    	if (fb == 1) crc ^= 0x8c;
 8003776:	f016 0f01 	tst.w	r6, #1
 800377a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800377e:	bf18      	it	ne
 8003780:	f083 038c 	eorne.w	r3, r3, #140	; 0x8c
 8003784:	f102 32ff 	add.w	r2, r2, #4294967295
 8003788:	bf18      	it	ne
 800378a:	b2db      	uxtbne	r3, r3
	    for (i = 0; i < 8; i++) {
 800378c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
	    	if (fb == 1) crc ^= 0x8c;
 8003790:	ea4f 0555 	mov.w	r5, r5, lsr #1
	    for (i = 0; i < 8; i++) {
 8003794:	d1ed      	bne.n	8003772 <owCRC+0xc>
	    }
	    st_byt++;
	} while (st_byt < Len);
 8003796:	1a22      	subs	r2, r4, r0
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	428a      	cmp	r2, r1
 800379c:	d3e6      	bcc.n	800376c <owCRC+0x6>

	return crc;
}
 800379e:	4618      	mov	r0, r3
 80037a0:	bd70      	pop	{r4, r5, r6, pc}

080037a2 <owCRC8>:

uint8_t owCRC8(RomCode *rom) {

	return owCRC((uint8_t*)rom, 7);
 80037a2:	2107      	movs	r1, #7
 80037a4:	f7ff bfdf 	b.w	8003766 <owCRC>

080037a8 <hasNextRom>:
 * return 1 if has got one more address
 * return 0 if hasn't
 * return -1 if error reading happened
 *
 */
int hasNextRom(OneWire *ow, uint8_t *ROM) {
 80037a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ac:	4605      	mov	r5, r0
 80037ae:	460e      	mov	r6, r1
	uint8_t ui32BitNumber = 0;
	int zeroFork = -1;
	uint8_t i = 0;
	if (owResetCmd() == ONEWIRE_NOBODY) return 0;
 80037b0:	f7ff ffa4 	bl	80036fc <owResetCmd>
 80037b4:	28f0      	cmp	r0, #240	; 0xf0
 80037b6:	d05c      	beq.n	8003872 <hasNextRom+0xca>

	owSendByte(ONEWIRE_SEARCH);//
 80037b8:	20f0      	movs	r0, #240	; 0xf0
 80037ba:	f7ff ffc5 	bl	8003748 <owSendByte>
 80037be:	f04f 0900 	mov.w	r9, #0
	int zeroFork = -1;
 80037c2:	f04f 38ff 	mov.w	r8, #4294967295

			    if (searchDirection == 0) zeroFork = ui32BitNumber;
			}
		}

		if (searchDirection) *(current) |= 1 << ui32BitNumber % 8;
 80037c6:	2701      	movs	r7, #1
		owSend(OW_READ);
 80037c8:	20ff      	movs	r0, #255	; 0xff
 80037ca:	f7ff ff73 	bl	80036b4 <owSend>
		cB = owReadSlot(owEchoRead());
 80037ce:	f7ff ff83 	bl	80036d8 <owEchoRead>
 80037d2:	4683      	mov	fp, r0
		owSend(OW_READ);
 80037d4:	20ff      	movs	r0, #255	; 0xff
 80037d6:	f7ff ff6d 	bl	80036b4 <owSend>
		cmp_cB = owReadSlot(owEchoRead());
 80037da:	f7ff ff7d 	bl	80036d8 <owEchoRead>
		if (cB == cmp_cB && cB == 1) return -1;
 80037de:	f1ab 02ff 	sub.w	r2, fp, #255	; 0xff
 80037e2:	4253      	negs	r3, r2
 80037e4:	f1a0 01ff 	sub.w	r1, r0, #255	; 0xff
 80037e8:	4153      	adcs	r3, r2
 80037ea:	4248      	negs	r0, r1
 80037ec:	4148      	adcs	r0, r1
 80037ee:	fa5f f489 	uxtb.w	r4, r9
 80037f2:	4283      	cmp	r3, r0
		int byteNum = ui32BitNumber / 8;
 80037f4:	ea4f 0ad4 	mov.w	sl, r4, lsr #3
		if (cB == cmp_cB && cB == 1) return -1;
 80037f8:	d112      	bne.n	8003820 <hasNextRom+0x78>
 80037fa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80037fe:	d03b      	beq.n	8003878 <hasNextRom+0xd0>
			if (ui32BitNumber == ow->lastDiscrepancy) searchDirection = 1;
 8003800:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003802:	4599      	cmp	r9, r3
 8003804:	d00f      	beq.n	8003826 <hasNextRom+0x7e>
				if (ui32BitNumber > ow->lastDiscrepancy) searchDirection = 0;
 8003806:	dc31      	bgt.n	800386c <hasNextRom+0xc4>
				else searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 8003808:	eb05 030a 	add.w	r3, r5, sl
 800380c:	f893 0034 	ldrb.w	r0, [r3, #52]	; 0x34
 8003810:	f004 0307 	and.w	r3, r4, #7
 8003814:	4118      	asrs	r0, r3
			    if (searchDirection == 0) zeroFork = ui32BitNumber;
 8003816:	f010 0001 	ands.w	r0, r0, #1
 800381a:	d104      	bne.n	8003826 <hasNextRom+0x7e>
 800381c:	46c8      	mov	r8, r9
 800381e:	e00c      	b.n	800383a <hasNextRom+0x92>
		if (searchDirection) *(current) |= 1 << ui32BitNumber % 8;
 8003820:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8003824:	d123      	bne.n	800386e <hasNextRom+0xc6>
		answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);
 8003826:	20ff      	movs	r0, #255	; 0xff
		if (searchDirection) *(current) |= 1 << ui32BitNumber % 8;
 8003828:	f816 300a 	ldrb.w	r3, [r6, sl]
 800382c:	f004 0407 	and.w	r4, r4, #7
 8003830:	fa07 f404 	lsl.w	r4, r7, r4
 8003834:	431c      	orrs	r4, r3
 8003836:	f806 400a 	strb.w	r4, [r6, sl]
 800383a:	f109 0901 	add.w	r9, r9, #1
		owSend(answerBit);
 800383e:	f7ff ff39 	bl	80036b4 <owSend>
		ui32BitNumber++;
	} while (ui32BitNumber < 64);
 8003842:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8003846:	d1bf      	bne.n	80037c8 <hasNextRom+0x20>

	ow->lastDiscrepancy = zeroFork;
 8003848:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
 800384c:	1e73      	subs	r3, r6, #1
 800384e:	3534      	adds	r5, #52	; 0x34
 8003850:	3606      	adds	r6, #6
	for (; i < 7; i++) ow->lastROM[i] = ROM[i];
 8003852:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8003856:	42b3      	cmp	r3, r6
 8003858:	f805 2b01 	strb.w	r2, [r5], #1
 800385c:	d1f9      	bne.n	8003852 <hasNextRom+0xaa>
	return ow->lastDiscrepancy > 0;
 800385e:	f1b8 0f00 	cmp.w	r8, #0
 8003862:	bfd4      	ite	le
 8003864:	2000      	movle	r0, #0
 8003866:	2001      	movgt	r0, #1
 8003868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (ui32BitNumber > ow->lastDiscrepancy) searchDirection = 0;
 800386c:	46c8      	mov	r8, r9
		answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);
 800386e:	2000      	movs	r0, #0
 8003870:	e7e3      	b.n	800383a <hasNextRom+0x92>
	if (owResetCmd() == ONEWIRE_NOBODY) return 0;
 8003872:	2000      	movs	r0, #0
 8003874:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (cB == cmp_cB && cB == 1) return -1;
 8003878:	f04f 30ff 	mov.w	r0, #4294967295
}
 800387c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003880 <owSearchCmd>:

// Возвращает количество устройств на шине или код ошибки, если значение меньше 0
int owSearchCmd(OneWire *ow) {
 8003880:	b538      	push	{r3, r4, r5, lr}
 8003882:	4605      	mov	r5, r0
  int device = 0, nextROM;
 8003884:	2400      	movs	r4, #0
  owInit(ow);
 8003886:	f7ff fee1 	bl	800364c <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device])); //передаем указатель на структуру куда положить след.ROM
 800388a:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800388e:	4628      	mov	r0, r5
 8003890:	f7ff ff8a 	bl	80037a8 <hasNextRom>
    if (nextROM<0)
 8003894:	2800      	cmp	r0, #0
 8003896:	db06      	blt.n	80038a6 <owSearchCmd+0x26>
      return -1;
    device++;
 8003898:	f104 0401 	add.w	r4, r4, #1
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);//ищем пока кто-то есть и этих кто-то не больше дефайна
 800389c:	d001      	beq.n	80038a2 <owSearchCmd+0x22>
 800389e:	2c06      	cmp	r4, #6
 80038a0:	d1f3      	bne.n	800388a <owSearchCmd+0xa>
		return device;//возвращаем порядковый номер датчика (устройства) на шине
}
 80038a2:	4620      	mov	r0, r4
 80038a4:	bd38      	pop	{r3, r4, r5, pc}
      return -1;
 80038a6:	f04f 34ff 	mov.w	r4, #4294967295
 80038aa:	e7fa      	b.n	80038a2 <owSearchCmd+0x22>

080038ac <owMatchRomCmd>:
void owSkipRomCmd(OneWire *ow) {//отправляет команду пропуска ROM после этого следующая команда будет
  owResetCmd();                 //для всех устройств на шине
  owSendByte(ONEWIRE_SKIP_ROM);
}

void owMatchRomCmd(RomCode *rom) {//позволяет мастеру обращаться к конкретному  ведомому устройству
 80038ac:	b538      	push	{r3, r4, r5, lr}
 80038ae:	4604      	mov	r4, r0
	int i = 0;
  owResetCmd();
 80038b0:	f7ff ff24 	bl	80036fc <owResetCmd>
  owSendByte(ONEWIRE_MATCH_ROM);//обращаемся к конкретному устройсву
 80038b4:	2055      	movs	r0, #85	; 0x55
 80038b6:	f7ff ff47 	bl	8003748 <owSendByte>
 80038ba:	1e65      	subs	r5, r4, #1
 80038bc:	3407      	adds	r4, #7
  for (; i < 8; i++)
	owSendByte(*(((uint8_t *) rom) + i));//"перебираемся по структуре как по массиву" первой звездочкой получаем i тый байт из структуры
 80038be:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80038c2:	f7ff ff41 	bl	8003748 <owSendByte>
  for (; i < 8; i++)
 80038c6:	42a5      	cmp	r5, r4
 80038c8:	d1f9      	bne.n	80038be <owMatchRomCmd+0x12>
}
 80038ca:	bd38      	pop	{r3, r4, r5, pc}

080038cc <owConvertTemperatureCmd>:

void owConvertTemperatureCmd(OneWire *ow, RomCode *rom) {
 80038cc:	b508      	push	{r3, lr}
  owMatchRomCmd(rom);//позволяет мастеру обращаться к конкретному  ведомому устройству
 80038ce:	4608      	mov	r0, r1
 80038d0:	f7ff ffec 	bl	80038ac <owMatchRomCmd>
  owSendByte(ONEWIRE_CONVERT_TEMPERATURE);//говорим датчику пора бы преобразовать температуру
}
 80038d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  owSendByte(ONEWIRE_CONVERT_TEMPERATURE);//говорим датчику пора бы преобразовать температуру
 80038d8:	2044      	movs	r0, #68	; 0x44
 80038da:	f7ff bf35 	b.w	8003748 <owSendByte>

080038de <owReadScratchpadCmd>:
 * @param data -- buffer for data
 * @return data
 */
uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {//читаем память датчика
  uint16_t b = 0, p;
  switch (rom->family) {
 80038de:	780b      	ldrb	r3, [r1, #0]
uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {//читаем память датчика
 80038e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (rom->family) {
 80038e4:	2b10      	cmp	r3, #16
uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {//читаем память датчика
 80038e6:	4616      	mov	r6, r2
  switch (rom->family) {
 80038e8:	d001      	beq.n	80038ee <owReadScratchpadCmd+0x10>
 80038ea:	2b28      	cmp	r3, #40	; 0x28
 80038ec:	d121      	bne.n	8003932 <owReadScratchpadCmd+0x54>
      break;
    default:
      return data;

  }
  owMatchRomCmd(rom);
 80038ee:	4608      	mov	r0, r1
 80038f0:	f7ff ffdc 	bl	80038ac <owMatchRomCmd>
  owSendByte(ONEWIRE_READ_SCRATCHPAD);//отправляем команду на чтение памяти
 80038f4:	20be      	movs	r0, #190	; 0xbe
 80038f6:	f7ff ff27 	bl	8003748 <owSendByte>
 80038fa:	2700      	movs	r7, #0
 80038fc:	f04f 0801 	mov.w	r8, #1
  while (b < p) {// пока мы не обработали 9 байт 
    uint8_t pos = (uint8_t) ((p - 8) / 8 - (b / 8)); //позиция обрабатываемого байта
    uint8_t bt; 
		owSend(OW_READ);
 8003900:	20ff      	movs	r0, #255	; 0xff
 8003902:	f7ff fed7 	bl	80036b4 <owSend>
    bt = owReadSlot(owEchoRead());//читаем данные 
 8003906:	f7ff fee7 	bl	80036d8 <owEchoRead>
 800390a:	b2bc      	uxth	r4, r7
    uint8_t pos = (uint8_t) ((p - 8) / 8 - (b / 8)); //позиция обрабатываемого байта
 800390c:	08e5      	lsrs	r5, r4, #3
 800390e:	f1c5 0508 	rsb	r5, r5, #8
 8003912:	b2ed      	uxtb	r5, r5
    if (bt == 1)
      data[pos] |= 1 << b % 8;//выставляем бит в нужной позиции
 8003914:	5d73      	ldrb	r3, [r6, r5]
 8003916:	f004 0407 	and.w	r4, r4, #7
    if (bt == 1)
 800391a:	28ff      	cmp	r0, #255	; 0xff
      data[pos] |= 1 << b % 8;//выставляем бит в нужной позиции
 800391c:	fa08 f404 	lsl.w	r4, r8, r4
 8003920:	f107 0701 	add.w	r7, r7, #1
 8003924:	bf0c      	ite	eq
 8003926:	431c      	orreq	r4, r3
    else
      data[pos] &= ~(1 << b % 8);//сбрасываем бит в нужной позиции
 8003928:	ea23 0404 	bicne.w	r4, r3, r4
  while (b < p) {// пока мы не обработали 9 байт 
 800392c:	2f48      	cmp	r7, #72	; 0x48
      data[pos] &= ~(1 << b % 8);//сбрасываем бит в нужной позиции
 800392e:	5574      	strb	r4, [r6, r5]
  while (b < p) {// пока мы не обработали 9 байт 
 8003930:	d1e6      	bne.n	8003900 <owReadScratchpadCmd+0x22>
    b++;//следующий бит
  }
  return data;
}
 8003932:	4630      	mov	r0, r6
 8003934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003938 <readTemperature>:
 * @param ow -- OneWire bus pointer
 * @param rom -- selected device
 * @param reSense -- do you want resense temp for next time?
 * @return struct with data
 */
Temperature readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 8003938:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint8_t pad[9];
  t.inCelsus = 0x00;
  t.frac = 0x00;
  sp = (Scratchpad_DS18B20 *) &pad; 
  spP = (Scratchpad_DS18S20 *) &pad;
  switch (rom->family) {
 800393c:	780b      	ldrb	r3, [r1, #0]
Temperature readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 800393e:	4606      	mov	r6, r0
  switch (rom->family) {
 8003940:	2b10      	cmp	r3, #16
Temperature readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 8003942:	460d      	mov	r5, r1
 8003944:	4617      	mov	r7, r2
  switch (rom->family) {
 8003946:	d01e      	beq.n	8003986 <readTemperature+0x4e>
 8003948:	2b28      	cmp	r3, #40	; 0x28
 800394a:	d128      	bne.n	800399e <readTemperature+0x66>
    case DS18B20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18B20
 800394c:	aa01      	add	r2, sp, #4
 800394e:	f7ff ffc6 	bl	80038de <owReadScratchpadCmd>
      t.inCelsus = (int8_t) (sp->temp_msb << 4) | (sp->temp_lsb >> 4);//целая часть
 8003952:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8003956:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800395a:	ea4f 1814 	mov.w	r8, r4, lsr #4
 800395e:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
      t.frac = (uint8_t) ((((sp->temp_lsb & 0x0F)) * 10) >> 4);//дробная
 8003962:	f004 030f 	and.w	r3, r4, #15
 8003966:	240a      	movs	r4, #10
 8003968:	435c      	muls	r4, r3
      t.inCelsus = (int8_t) (sp->temp_msb << 4) | (sp->temp_lsb >> 4);//целая часть
 800396a:	fa4f f888 	sxtb.w	r8, r8
      t.frac = (uint8_t) ((((sp->temp_lsb & 0x0F)) * 10) >> 4);//дробная
 800396e:	f3c4 1407 	ubfx	r4, r4, #4, #8
      t.frac = (uint8_t) 5 * (spP->temp_lsb & 0x01);
      break;
    default:
      return t;
  }
  if (reSense) {
 8003972:	b11f      	cbz	r7, 800397c <readTemperature+0x44>
    owConvertTemperatureCmd(ow, rom);//можно сразу после как забрали данные отдаем датчику команду на преобразования температуры
 8003974:	4629      	mov	r1, r5
 8003976:	4630      	mov	r0, r6
 8003978:	f7ff ffa8 	bl	80038cc <owConvertTemperatureCmd>
  }
  return t;
 800397c:	f88d 8000 	strb.w	r8, [sp]
 8003980:	f88d 4001 	strb.w	r4, [sp, #1]
 8003984:	e010      	b.n	80039a8 <readTemperature+0x70>
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18S20
 8003986:	aa01      	add	r2, sp, #4
 8003988:	f7ff ffa9 	bl	80038de <owReadScratchpadCmd>
      t.inCelsus = spP->temp_lsb >> 1;
 800398c:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8003990:	ea4f 0854 	mov.w	r8, r4, lsr #1
      t.frac = (uint8_t) 5 * (spP->temp_lsb & 0x01);
 8003994:	f004 0401 	and.w	r4, r4, #1
 8003998:	00a3      	lsls	r3, r4, #2
 800399a:	441c      	add	r4, r3
      break;
 800399c:	e7e9      	b.n	8003972 <readTemperature+0x3a>
      return t;
 800399e:	2300      	movs	r3, #0
 80039a0:	f88d 3000 	strb.w	r3, [sp]
 80039a4:	f88d 3001 	strb.w	r3, [sp, #1]
 80039a8:	2000      	movs	r0, #0
 80039aa:	f89d 3000 	ldrb.w	r3, [sp]
 80039ae:	f363 0007 	bfi	r0, r3, #0, #8
 80039b2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80039b6:	f363 200f 	bfi	r0, r3, #8, #8
}
 80039ba:	b004      	add	sp, #16
 80039bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080039c0 <EE_Format>:

//##########################################################################################################
//##########################################################################################################
//##########################################################################################################
bool	EE_Format(void)
{
 80039c0:	b510      	push	{r4, lr}
 80039c2:	b086      	sub	sp, #24
	uint32_t	error;
	HAL_FLASH_Unlock();
 80039c4:	f7fd f88a 	bl	8000adc <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	flashErase;
	flashErase.NbPages=1;
 80039c8:	2301      	movs	r3, #1
	#if ( _EEPROM_F1_LOW_DESTINY==1 || _EEPROM_F1_MEDIUM_DESTINY==1 || _EEPROM_F1_HIGH_DESTINY==1 )
	flashErase.Banks = FLASH_BANK_1;
	#endif
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80039ca:	2400      	movs	r4, #0
	flashErase.NbPages=1;
 80039cc:	9305      	str	r3, [sp, #20]
	flashErase.Banks = FLASH_BANK_1;
 80039ce:	9303      	str	r3, [sp, #12]
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <EE_Format+0x38>)
	if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 80039d2:	a901      	add	r1, sp, #4
 80039d4:	a802      	add	r0, sp, #8
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 80039d6:	9304      	str	r3, [sp, #16]
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80039d8:	9402      	str	r4, [sp, #8]
	if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 80039da:	f7fd f92f 	bl	8000c3c <HAL_FLASHEx_Erase>
 80039de:	b938      	cbnz	r0, 80039f0 <EE_Format+0x30>
	{
		HAL_FLASH_Lock();
 80039e0:	f7fd f88e 	bl	8000b00 <HAL_FLASH_Lock>
		if(error != 0xFFFFFFFF)
 80039e4:	9801      	ldr	r0, [sp, #4]
 80039e6:	1c43      	adds	r3, r0, #1
 80039e8:	4258      	negs	r0, r3
 80039ea:	4158      	adcs	r0, r3
		else
			return true;	
	}
	HAL_FLASH_Lock();
	return false;	
}
 80039ec:	b006      	add	sp, #24
 80039ee:	bd10      	pop	{r4, pc}
	HAL_FLASH_Lock();
 80039f0:	f7fd f886 	bl	8000b00 <HAL_FLASH_Lock>
	return false;	
 80039f4:	4620      	mov	r0, r4
 80039f6:	e7f9      	b.n	80039ec <EE_Format+0x2c>
 80039f8:	0800f800 	.word	0x0800f800

080039fc <EE_Read>:
//##########################################################################################################
bool EE_Read(uint16_t VirtualAddress, uint32_t* Data) {
	if(VirtualAddress >=	(_EEPROM_FLASH_PAGE_SIZE/4))
 80039fc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
		return false;
	*Data =  (*(__IO uint32_t*)((VirtualAddress*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 8003a00:	bf3f      	itttt	cc
 8003a02:	0080      	lslcc	r0, r0, #2
 8003a04:	f100 6000 	addcc.w	r0, r0, #134217728	; 0x8000000
 8003a08:	f500 4078 	addcc.w	r0, r0, #63488	; 0xf800
 8003a0c:	6803      	ldrcc	r3, [r0, #0]
	return true;
 8003a0e:	bf3a      	itte	cc
 8003a10:	2001      	movcc	r0, #1
	*Data =  (*(__IO uint32_t*)((VirtualAddress*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 8003a12:	600b      	strcc	r3, [r1, #0]
		return false;
 8003a14:	2000      	movcs	r0, #0
}
 8003a16:	4770      	bx	lr

08003a18 <EE_Reads>:
	HAL_FLASH_Lock();
	return true;
}
//##########################################################################################################
bool EE_Reads(uint16_t StartVirtualAddress,uint16_t HowMuchToRead,uint32_t* Data) {
	if((StartVirtualAddress+HowMuchToRead) >	(_EEPROM_FLASH_PAGE_SIZE/4)) return false;
 8003a18:	4401      	add	r1, r0
 8003a1a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003a1e:	dd0b      	ble.n	8003a38 <EE_Reads+0x20>
 8003a20:	2000      	movs	r0, #0
	for(uint16_t	i=StartVirtualAddress ; i<HowMuchToRead+StartVirtualAddress ; i++) {
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
		Data++;
	}
	return true;
}
 8003a22:	4770      	bx	lr
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 8003a24:	0083      	lsls	r3, r0, #2
 8003a26:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003a2a:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 8003a2e:	681b      	ldr	r3, [r3, #0]
	for(uint16_t	i=StartVirtualAddress ; i<HowMuchToRead+StartVirtualAddress ; i++) {
 8003a30:	3001      	adds	r0, #1
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 8003a32:	f842 3b04 	str.w	r3, [r2], #4
	for(uint16_t	i=StartVirtualAddress ; i<HowMuchToRead+StartVirtualAddress ; i++) {
 8003a36:	b280      	uxth	r0, r0
 8003a38:	4281      	cmp	r1, r0
 8003a3a:	dcf3      	bgt.n	8003a24 <EE_Reads+0xc>
	return true;
 8003a3c:	2001      	movs	r0, #1
 8003a3e:	4770      	bx	lr

08003a40 <EE_Write>:
	if(VirtualAddress >=	(_EEPROM_FLASH_PAGE_SIZE/4))
 8003a40:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
bool EE_Write(uint16_t VirtualAddress, uint32_t Data) {
 8003a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a48:	4605      	mov	r5, r0
 8003a4a:	460f      	mov	r7, r1
	if(VirtualAddress >=	(_EEPROM_FLASH_PAGE_SIZE/4))
 8003a4c:	d21a      	bcs.n	8003a84 <EE_Write+0x44>
	if((*(__IO uint32_t*)((VirtualAddress*4)+_EEPROM_FLASH_PAGE_ADDRESS)) != 0xFFFFFFFF) {
 8003a4e:	0084      	lsls	r4, r0, #2
 8003a50:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
 8003a54:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	d108      	bne.n	8003a70 <EE_Write+0x30>
	HAL_FLASH_Unlock();
 8003a5e:	f7fd f83d 	bl	8000adc <HAL_FLASH_Unlock>
	if(Data!=0xFFFFFFFF) {
 8003a62:	1c7b      	adds	r3, r7, #1
 8003a64:	d12a      	bne.n	8003abc <EE_Write+0x7c>
			HAL_FLASH_Lock();
 8003a66:	f7fd f84b 	bl	8000b00 <HAL_FLASH_Lock>
			return true;
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if( EE_Reads(0,(_EEPROM_FLASH_PAGE_SIZE/4),EEPROMPageBackup)==false) {
 8003a70:	4e17      	ldr	r6, [pc, #92]	; (8003ad0 <EE_Write+0x90>)
 8003a72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a76:	4632      	mov	r2, r6
 8003a78:	2000      	movs	r0, #0
 8003a7a:	f7ff ffcd 	bl	8003a18 <EE_Reads>
 8003a7e:	b920      	cbnz	r0, 8003a8a <EE_Write+0x4a>
			HAL_FLASH_Lock();
 8003a80:	f7fd f83e 	bl	8000b00 <HAL_FLASH_Lock>
		return false;
 8003a84:	2000      	movs	r0, #0
}
 8003a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		EEPROMPageBackup[VirtualAddress]=Data;
 8003a8a:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
		EE_Format();
 8003a8e:	f7ff ff97 	bl	80039c0 <EE_Format>
		HAL_FLASH_Unlock();
 8003a92:	f7fd f823 	bl	8000adc <HAL_FLASH_Unlock>
 8003a96:	4d0f      	ldr	r5, [pc, #60]	; (8003ad4 <EE_Write+0x94>)
		for(uint16_t	i=0 ; i<_EEPROM_FLASH_PAGE_SIZE/4 ; i++) {
 8003a98:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8003ad8 <EE_Write+0x98>
			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(i*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)EEPROMPageBackup[i])!=HAL_OK)
 8003a9c:	f105 4378 	add.w	r3, r5, #4160749568	; 0xf8000000
 8003aa0:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 8003aa4:	58f2      	ldr	r2, [r6, r3]
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	2002      	movs	r0, #2
 8003aac:	f7fd f85c 	bl	8000b68 <HAL_FLASH_Program>
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	d1e5      	bne.n	8003a80 <EE_Write+0x40>
 8003ab4:	3504      	adds	r5, #4
		for(uint16_t	i=0 ; i<_EEPROM_FLASH_PAGE_SIZE/4 ; i++) {
 8003ab6:	4545      	cmp	r5, r8
 8003ab8:	d1f0      	bne.n	8003a9c <EE_Write+0x5c>
 8003aba:	e7d0      	b.n	8003a5e <EE_Write+0x1e>
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(VirtualAddress*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)Data)==HAL_OK) {
 8003abc:	463a      	mov	r2, r7
 8003abe:	2300      	movs	r3, #0
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	2002      	movs	r0, #2
 8003ac4:	f7fd f850 	bl	8000b68 <HAL_FLASH_Program>
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	d1d9      	bne.n	8003a80 <EE_Write+0x40>
 8003acc:	e7cb      	b.n	8003a66 <EE_Write+0x26>
 8003ace:	bf00      	nop
 8003ad0:	20000440 	.word	0x20000440
 8003ad4:	0800f800 	.word	0x0800f800
 8003ad8:	08010000 	.word	0x08010000

08003adc <button_press.part.1>:
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void button_press(uint8_t button) {
 8003adc:	b510      	push	{r4, lr}
	switch (button)	{
	case ONOFF_BUTTON:
		HAL_GPIO_WritePin(BUTTON_ONOFF_GPIO_Port,BUTTON_ONOFF_Pin,SET);
 8003ade:	4c0a      	ldr	r4, [pc, #40]	; (8003b08 <button_press.part.1+0x2c>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	f7fd f9d6 	bl	8000e98 <HAL_GPIO_WritePin>
		HAL_Delay(DELAY1_MS);
 8003aec:	203c      	movs	r0, #60	; 0x3c
 8003aee:	f7fc fef9 	bl	80008e4 <HAL_Delay>
		HAL_GPIO_WritePin(BUTTON_ONOFF_GPIO_Port,BUTTON_ONOFF_Pin,RESET);
 8003af2:	4620      	mov	r0, r4
 8003af4:	2200      	movs	r2, #0
 8003af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003afa:	f7fd f9cd 	bl	8000e98 <HAL_GPIO_WritePin>
		HAL_Delay(DELAY1_MS);
		HAL_GPIO_WritePin(BUTTON_DOWN_GPIO_Port,BUTTON_DOWN_Pin,RESET);
		HAL_Delay(DELAY1_MS);
		break;
	}
}
 8003afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_Delay(DELAY1_MS);
 8003b02:	203c      	movs	r0, #60	; 0x3c
 8003b04:	f7fc beee 	b.w	80008e4 <HAL_Delay>
 8003b08:	40010c00 	.word	0x40010c00

08003b0c <WriteDefaultsConstantToEEP>:
void WriteDefaultsConstantToEEP() {
 8003b0c:	b510      	push	{r4, lr}
 8003b0e:	2401      	movs	r4, #1
		EE_Write(EEP_HYST_MIN + i * 5, 25); //
 8003b10:	2119      	movs	r1, #25
 8003b12:	4620      	mov	r0, r4
 8003b14:	f7ff ff94 	bl	8003a40 <EE_Write>
		EE_Write(EEP_HYST_MAX + i * 5, 30); //
 8003b18:	1c60      	adds	r0, r4, #1
 8003b1a:	211e      	movs	r1, #30
 8003b1c:	b280      	uxth	r0, r0
 8003b1e:	f7ff ff8f 	bl	8003a40 <EE_Write>
		EE_Write(EEP_HYST_POWER + i * 5, 1); //
 8003b22:	1ca0      	adds	r0, r4, #2
 8003b24:	3405      	adds	r4, #5
 8003b26:	2101      	movs	r1, #1
 8003b28:	b280      	uxth	r0, r0
 8003b2a:	b2a4      	uxth	r4, r4
 8003b2c:	f7ff ff88 	bl	8003a40 <EE_Write>
	for (uint8_t i=0;i<MAX_HYST;i++) {
 8003b30:	2c1a      	cmp	r4, #26
 8003b32:	d1ed      	bne.n	8003b10 <WriteDefaultsConstantToEEP+0x4>
}
 8003b34:	bd10      	pop	{r4, pc}
	...

08003b38 <WriteValuesToEEprom>:
void WriteValuesToEEprom() {
 8003b38:	b538      	push	{r3, r4, r5, lr}
 8003b3a:	2401      	movs	r4, #1
 8003b3c:	4d0d      	ldr	r5, [pc, #52]	; (8003b74 <WriteValuesToEEprom+0x3c>)
		EE_Write(EEP_HYST_MIN + i * 5, hyst[i].min_temp);
 8003b3e:	6828      	ldr	r0, [r5, #0]
 8003b40:	f7fc fe68 	bl	8000814 <__aeabi_f2uiz>
 8003b44:	4601      	mov	r1, r0
 8003b46:	4620      	mov	r0, r4
 8003b48:	f7ff ff7a 	bl	8003a40 <EE_Write>
		EE_Write(EEP_HYST_MAX + i * 5, hyst[i].max_temp);
 8003b4c:	6868      	ldr	r0, [r5, #4]
 8003b4e:	f7fc fe61 	bl	8000814 <__aeabi_f2uiz>
 8003b52:	1c63      	adds	r3, r4, #1
 8003b54:	4601      	mov	r1, r0
 8003b56:	b298      	uxth	r0, r3
 8003b58:	f7ff ff72 	bl	8003a40 <EE_Write>
		EE_Write(EEP_HYST_POWER + i * 5, hyst[i].power);
 8003b5c:	1ca0      	adds	r0, r4, #2
 8003b5e:	3405      	adds	r4, #5
 8003b60:	7a29      	ldrb	r1, [r5, #8]
 8003b62:	b280      	uxth	r0, r0
 8003b64:	b2a4      	uxth	r4, r4
 8003b66:	f7ff ff6b 	bl	8003a40 <EE_Write>
	for (uint8_t i=0;i<MAX_HYST;i++) {
 8003b6a:	2c1a      	cmp	r4, #26
 8003b6c:	f105 050c 	add.w	r5, r5, #12
 8003b70:	d1e5      	bne.n	8003b3e <WriteValuesToEEprom+0x6>
}
 8003b72:	bd38      	pop	{r3, r4, r5, pc}
 8003b74:	20000cc8 	.word	0x20000cc8

08003b78 <ReadConstantsFromEEP>:
void ReadConstantsFromEEP(void) {
 8003b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b7a:	2401      	movs	r4, #1
 8003b7c:	4d10      	ldr	r5, [pc, #64]	; (8003bc0 <ReadConstantsFromEEP+0x48>)
		EE_Read(EEP_HYST_MIN + i*5, &_data);hyst[i].min_temp = _data;
 8003b7e:	a901      	add	r1, sp, #4
 8003b80:	4620      	mov	r0, r4
 8003b82:	f7ff ff3b 	bl	80039fc <EE_Read>
 8003b86:	9801      	ldr	r0, [sp, #4]
 8003b88:	f7fc fdec 	bl	8000764 <__aeabi_ui2f>
 8003b8c:	6028      	str	r0, [r5, #0]
		EE_Read(EEP_HYST_MAX + i*5, &_data);hyst[i].max_temp = _data;
 8003b8e:	1c60      	adds	r0, r4, #1
 8003b90:	a901      	add	r1, sp, #4
 8003b92:	b280      	uxth	r0, r0
 8003b94:	f7ff ff32 	bl	80039fc <EE_Read>
 8003b98:	9801      	ldr	r0, [sp, #4]
 8003b9a:	f7fc fde3 	bl	8000764 <__aeabi_ui2f>
 8003b9e:	6068      	str	r0, [r5, #4]
		EE_Read(EEP_HYST_POWER + i*5, &_data);hyst[i].power = _data;
 8003ba0:	1ca0      	adds	r0, r4, #2
 8003ba2:	a901      	add	r1, sp, #4
 8003ba4:	b280      	uxth	r0, r0
 8003ba6:	3405      	adds	r4, #5
 8003ba8:	f7ff ff28 	bl	80039fc <EE_Read>
 8003bac:	b2a4      	uxth	r4, r4
 8003bae:	9b01      	ldr	r3, [sp, #4]
	for (uint8_t i=0;i<MAX_HYST;i++) {
 8003bb0:	2c1a      	cmp	r4, #26
		EE_Read(EEP_HYST_POWER + i*5, &_data);hyst[i].power = _data;
 8003bb2:	722b      	strb	r3, [r5, #8]
 8003bb4:	f105 050c 	add.w	r5, r5, #12
	for (uint8_t i=0;i<MAX_HYST;i++) {
 8003bb8:	d1e1      	bne.n	8003b7e <ReadConstantsFromEEP+0x6>
}
 8003bba:	b003      	add	sp, #12
 8003bbc:	bd30      	pop	{r4, r5, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000cc8 	.word	0x20000cc8

08003bc4 <ReadEEprom>:
void ReadEEprom() {
 8003bc4:	b513      	push	{r0, r1, r4, lr}
	if (data_!= CHECK_DATA)	{
 8003bc6:	f240 3477 	movw	r4, #887	; 0x377
	EE_Read(EEP_CHECK_ADDR,&data_);
 8003bca:	a901      	add	r1, sp, #4
 8003bcc:	200a      	movs	r0, #10
 8003bce:	f7ff ff15 	bl	80039fc <EE_Read>
	if (data_!= CHECK_DATA)	{
 8003bd2:	9b01      	ldr	r3, [sp, #4]
 8003bd4:	42a3      	cmp	r3, r4
 8003bd6:	d007      	beq.n	8003be8 <ReadEEprom+0x24>
		EE_Format();
 8003bd8:	f7ff fef2 	bl	80039c0 <EE_Format>
		WriteDefaultsConstantToEEP();
 8003bdc:	f7ff ff96 	bl	8003b0c <WriteDefaultsConstantToEEP>
		EE_Write(EEP_CHECK_ADDR,CHECK_DATA);
 8003be0:	4621      	mov	r1, r4
 8003be2:	200a      	movs	r0, #10
 8003be4:	f7ff ff2c 	bl	8003a40 <EE_Write>
	else ReadConstantsFromEEP();
 8003be8:	f7ff ffc6 	bl	8003b78 <ReadConstantsFromEEP>
}
 8003bec:	b002      	add	sp, #8
 8003bee:	bd10      	pop	{r4, pc}

08003bf0 <SystemClock_Config>:
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8003bf4:	b510      	push	{r4, lr}
 8003bf6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003bf8:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bfa:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003bfc:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bfe:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c00:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003c02:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c06:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c08:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003c0a:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c0c:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c0e:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003c10:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c12:	f7fd fd2f 	bl	8001674 <HAL_RCC_OscConfig>
 8003c16:	b100      	cbz	r0, 8003c1a <SystemClock_Config+0x2a>
 8003c18:	e7fe      	b.n	8003c18 <SystemClock_Config+0x28>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c1a:	230f      	movs	r3, #15
 8003c1c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c22:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c24:	4621      	mov	r1, r4
 8003c26:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c28:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c2a:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c2c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c2e:	f7fd fee9 	bl	8001a04 <HAL_RCC_ClockConfig>
 8003c32:	b100      	cbz	r0, 8003c36 <SystemClock_Config+0x46>
 8003c34:	e7fe      	b.n	8003c34 <SystemClock_Config+0x44>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003c36:	2310      	movs	r3, #16
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003c38:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c3a:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003c3c:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c3e:	f7fd ffab 	bl	8001b98 <HAL_RCCEx_PeriphCLKConfig>
 8003c42:	4604      	mov	r4, r0
 8003c44:	b100      	cbz	r0, 8003c48 <SystemClock_Config+0x58>
 8003c46:	e7fe      	b.n	8003c46 <SystemClock_Config+0x56>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003c48:	f7fd ff80 	bl	8001b4c <HAL_RCC_GetHCLKFreq>
 8003c4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c50:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c54:	f7fc feaa 	bl	80009ac <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003c58:	2004      	movs	r0, #4
 8003c5a:	f7fc febd 	bl	80009d8 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003c5e:	4622      	mov	r2, r4
 8003c60:	4621      	mov	r1, r4
 8003c62:	f04f 30ff 	mov.w	r0, #4294967295
 8003c66:	f7fc fe61 	bl	800092c <HAL_NVIC_SetPriority>
}
 8003c6a:	b014      	add	sp, #80	; 0x50
 8003c6c:	bd10      	pop	{r4, pc}
	...

08003c70 <button_press>:
	switch (button)	{
 8003c70:	2801      	cmp	r0, #1
void button_press(uint8_t button) {
 8003c72:	b508      	push	{r3, lr}
	switch (button)	{
 8003c74:	d002      	beq.n	8003c7c <button_press+0xc>
 8003c76:	2803      	cmp	r0, #3
 8003c78:	d004      	beq.n	8003c84 <button_press+0x14>
 8003c7a:	bd08      	pop	{r3, pc}
}
 8003c7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003c80:	f7ff bf2c 	b.w	8003adc <button_press.part.1>
		HAL_GPIO_WritePin(BUTTON_DOWN_GPIO_Port,BUTTON_DOWN_Pin,SET);
 8003c84:	2201      	movs	r2, #1
 8003c86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c8a:	4808      	ldr	r0, [pc, #32]	; (8003cac <button_press+0x3c>)
 8003c8c:	f7fd f904 	bl	8000e98 <HAL_GPIO_WritePin>
		HAL_Delay(DELAY1_MS);
 8003c90:	203c      	movs	r0, #60	; 0x3c
 8003c92:	f7fc fe27 	bl	80008e4 <HAL_Delay>
		HAL_GPIO_WritePin(BUTTON_DOWN_GPIO_Port,BUTTON_DOWN_Pin,RESET);
 8003c96:	4805      	ldr	r0, [pc, #20]	; (8003cac <button_press+0x3c>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c9e:	f7fd f8fb 	bl	8000e98 <HAL_GPIO_WritePin>
}
 8003ca2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_Delay(DELAY1_MS);
 8003ca6:	203c      	movs	r0, #60	; 0x3c
 8003ca8:	f7fc be1c 	b.w	80008e4 <HAL_Delay>
 8003cac:	40010c00 	.word	0x40010c00

08003cb0 <SetPower>:

void SetPower(uint8_t power) {
 8003cb0:	b538      	push	{r3, r4, r5, lr}
	for (uint8_t i = 0; i< 6 - power;i++) {
 8003cb2:	2400      	movs	r4, #0
 8003cb4:	f1c0 0506 	rsb	r5, r0, #6
 8003cb8:	b2e3      	uxtb	r3, r4
 8003cba:	42ab      	cmp	r3, r5
 8003cbc:	f104 0401 	add.w	r4, r4, #1
 8003cc0:	db00      	blt.n	8003cc4 <SetPower+0x14>
		button_press(DOWN_BUTTON);
		HAL_Delay(DELAY1_MS);
	}
}
 8003cc2:	bd38      	pop	{r3, r4, r5, pc}
		button_press(DOWN_BUTTON);
 8003cc4:	2003      	movs	r0, #3
 8003cc6:	f7ff ffd3 	bl	8003c70 <button_press>
		HAL_Delay(DELAY1_MS);
 8003cca:	203c      	movs	r0, #60	; 0x3c
 8003ccc:	f7fc fe0a 	bl	80008e4 <HAL_Delay>
 8003cd0:	e7f2      	b.n	8003cb8 <SetPower+0x8>
	...

08003cd4 <get_ROMid>:

void get_ROMid (void) {
 8003cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd8:	b088      	sub	sp, #32

	if (owResetCmd() != ONEWIRE_NOBODY)	{    // is anybody on the bus?
 8003cda:	f7ff fd0f 	bl	80036fc <owResetCmd>
 8003cde:	28f0      	cmp	r0, #240	; 0xf0
 8003ce0:	d032      	beq.n	8003d48 <get_ROMid+0x74>
		devices = owSearchCmd(&ow);        // получить ROMid всех устройст на шине или вернуть код ошибки
 8003ce2:	483c      	ldr	r0, [pc, #240]	; (8003dd4 <get_ROMid+0x100>)
 8003ce4:	f7ff fdcc 	bl	8003880 <owSearchCmd>
 8003ce8:	4e3b      	ldr	r6, [pc, #236]	; (8003dd8 <get_ROMid+0x104>)
 8003cea:	b2c3      	uxtb	r3, r0
 8003cec:	7033      	strb	r3, [r6, #0]
 8003cee:	4d3b      	ldr	r5, [pc, #236]	; (8003ddc <get_ROMid+0x108>)
		if (devices <= 0) {
 8003cf0:	b98b      	cbnz	r3, 8003d16 <get_ROMid+0x42>
			snprintf(str,sizeof(str),"Error has happened!");
 8003cf2:	493b      	ldr	r1, [pc, #236]	; (8003de0 <get_ROMid+0x10c>)
 8003cf4:	483b      	ldr	r0, [pc, #236]	; (8003de4 <get_ROMid+0x110>)
 8003cf6:	f000 ff99 	bl	8004c2c <strcpy>
			HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str), HAL_MAX_DELAY);
 8003cfa:	483a      	ldr	r0, [pc, #232]	; (8003de4 <get_ROMid+0x110>)
 8003cfc:	f7fc fa28 	bl	8000150 <strlen>
 8003d00:	f04f 33ff 	mov.w	r3, #4294967295
 8003d04:	b282      	uxth	r2, r0
 8003d06:	4937      	ldr	r1, [pc, #220]	; (8003de4 <get_ROMid+0x110>)
 8003d08:	4837      	ldr	r0, [pc, #220]	; (8003de8 <get_ROMid+0x114>)
 8003d0a:	f7fe fadf 	bl	80022cc <HAL_UART_Transmit>
			while (1) {
				pDelay = 1000000;
 8003d0e:	4a37      	ldr	r2, [pc, #220]	; (8003dec <get_ROMid+0x118>)
 8003d10:	4b37      	ldr	r3, [pc, #220]	; (8003df0 <get_ROMid+0x11c>)
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	e7fe      	b.n	8003d14 <get_ROMid+0x40>
				for (i = 0; i < pDelay * 1; i++){}    /* Wait a bit. */
           // __asm__("nop");
			}
		}

		snprintf(str,sizeof(str),"found %d devices on 1-wire bus", devices);
 8003d16:	4a37      	ldr	r2, [pc, #220]	; (8003df4 <get_ROMid+0x120>)
 8003d18:	2164      	movs	r1, #100	; 0x64
 8003d1a:	4832      	ldr	r0, [pc, #200]	; (8003de4 <get_ROMid+0x110>)
 8003d1c:	f000 ff52 	bl	8004bc4 <sniprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str), HAL_MAX_DELAY);
 8003d20:	4830      	ldr	r0, [pc, #192]	; (8003de4 <get_ROMid+0x110>)
 8003d22:	f7fc fa15 	bl	8000150 <strlen>
 8003d26:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2a:	b282      	uxth	r2, r0
 8003d2c:	492d      	ldr	r1, [pc, #180]	; (8003de4 <get_ROMid+0x110>)
 8003d2e:	482e      	ldr	r0, [pc, #184]	; (8003de8 <get_ROMid+0x114>)
 8003d30:	f7fe facc 	bl	80022cc <HAL_UART_Transmit>

		for (i = 0; i < devices; i++) {
 8003d34:	2300      	movs	r3, #0
			RomCode *r = &ow.ids[i];
 8003d36:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8003dd4 <get_ROMid+0x100>
			uint8_t crc = owCRC8(r);
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 8003d3a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8003e0c <get_ROMid+0x138>
		for (i = 0; i < devices; i++) {
 8003d3e:	702b      	strb	r3, [r5, #0]
 8003d40:	782f      	ldrb	r7, [r5, #0]
 8003d42:	7833      	ldrb	r3, [r6, #0]
 8003d44:	42bb      	cmp	r3, r7
 8003d46:	d802      	bhi.n	8003d4e <get_ROMid+0x7a>
				snprintf(str,sizeof(str),"CRCok\n\r");
				HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str), HAL_MAX_DELAY);
			}
		}
	}
}
 8003d48:	b008      	add	sp, #32
 8003d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			RomCode *r = &ow.ids[i];
 8003d4e:	eb08 04c7 	add.w	r4, r8, r7, lsl #3
			uint8_t crc = owCRC8(r);
 8003d52:	4620      	mov	r0, r4
 8003d54:	f7ff fd25 	bl	80037a2 <owCRC8>
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 8003d58:	79e2      	ldrb	r2, [r4, #7]
 8003d5a:	4b27      	ldr	r3, [pc, #156]	; (8003df8 <get_ROMid+0x124>)
 8003d5c:	4927      	ldr	r1, [pc, #156]	; (8003dfc <get_ROMid+0x128>)
 8003d5e:	4290      	cmp	r0, r2
 8003d60:	bf08      	it	eq
 8003d62:	464b      	moveq	r3, r9
 8003d64:	600b      	str	r3, [r1, #0]
			snprintf(str,sizeof(str),"\n\rdevice %d (SN: %02X/%02X%02X%02X%02X%02X%02X/%02X) ", i,
 8003d66:	9207      	str	r2, [sp, #28]
 8003d68:	7862      	ldrb	r2, [r4, #1]
 8003d6a:	782b      	ldrb	r3, [r5, #0]
 8003d6c:	9206      	str	r2, [sp, #24]
 8003d6e:	78a2      	ldrb	r2, [r4, #2]
 8003d70:	2164      	movs	r1, #100	; 0x64
 8003d72:	9205      	str	r2, [sp, #20]
 8003d74:	78e2      	ldrb	r2, [r4, #3]
			uint8_t crc = owCRC8(r);
 8003d76:	4682      	mov	sl, r0
			snprintf(str,sizeof(str),"\n\rdevice %d (SN: %02X/%02X%02X%02X%02X%02X%02X/%02X) ", i,
 8003d78:	9204      	str	r2, [sp, #16]
 8003d7a:	7922      	ldrb	r2, [r4, #4]
 8003d7c:	4819      	ldr	r0, [pc, #100]	; (8003de4 <get_ROMid+0x110>)
 8003d7e:	9203      	str	r2, [sp, #12]
 8003d80:	7962      	ldrb	r2, [r4, #5]
 8003d82:	9202      	str	r2, [sp, #8]
 8003d84:	79a2      	ldrb	r2, [r4, #6]
 8003d86:	9201      	str	r2, [sp, #4]
 8003d88:	f818 2037 	ldrb.w	r2, [r8, r7, lsl #3]
 8003d8c:	9200      	str	r2, [sp, #0]
 8003d8e:	4a1c      	ldr	r2, [pc, #112]	; (8003e00 <get_ROMid+0x12c>)
 8003d90:	f000 ff18 	bl	8004bc4 <sniprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str), HAL_MAX_DELAY);
 8003d94:	4813      	ldr	r0, [pc, #76]	; (8003de4 <get_ROMid+0x110>)
 8003d96:	f7fc f9db 	bl	8000150 <strlen>
 8003d9a:	4912      	ldr	r1, [pc, #72]	; (8003de4 <get_ROMid+0x110>)
 8003d9c:	b282      	uxth	r2, r0
 8003d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003da2:	4811      	ldr	r0, [pc, #68]	; (8003de8 <get_ROMid+0x114>)
 8003da4:	f7fe fa92 	bl	80022cc <HAL_UART_Transmit>
			if (crc != r->crc) {
 8003da8:	79e3      	ldrb	r3, [r4, #7]
				snprintf(str,sizeof(str),"CRCok\n\r");
 8003daa:	480e      	ldr	r0, [pc, #56]	; (8003de4 <get_ROMid+0x110>)
			if (crc != r->crc) {
 8003dac:	4553      	cmp	r3, sl
				snprintf(str,sizeof(str),"CRCfailedk\n\r");
 8003dae:	bf14      	ite	ne
 8003db0:	4914      	ldrne	r1, [pc, #80]	; (8003e04 <get_ROMid+0x130>)
				snprintf(str,sizeof(str),"CRCok\n\r");
 8003db2:	4915      	ldreq	r1, [pc, #84]	; (8003e08 <get_ROMid+0x134>)
 8003db4:	f000 ff3a 	bl	8004c2c <strcpy>
				HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str), HAL_MAX_DELAY);
 8003db8:	480a      	ldr	r0, [pc, #40]	; (8003de4 <get_ROMid+0x110>)
 8003dba:	f7fc f9c9 	bl	8000150 <strlen>
 8003dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc2:	b282      	uxth	r2, r0
 8003dc4:	4907      	ldr	r1, [pc, #28]	; (8003de4 <get_ROMid+0x110>)
 8003dc6:	4808      	ldr	r0, [pc, #32]	; (8003de8 <get_ROMid+0x114>)
 8003dc8:	f7fe fa80 	bl	80022cc <HAL_UART_Transmit>
		for (i = 0; i < devices; i++) {
 8003dcc:	782b      	ldrb	r3, [r5, #0]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	702b      	strb	r3, [r5, #0]
 8003dd2:	e7b5      	b.n	8003d40 <get_ROMid+0x6c>
 8003dd4:	20000c44 	.word	0x20000c44
 8003dd8:	20000d49 	.word	0x20000d49
 8003ddc:	20000c83 	.word	0x20000c83
 8003de0:	08005521 	.word	0x08005521
 8003de4:	20000d8c 	.word	0x20000d8c
 8003de8:	20000c84 	.word	0x20000c84
 8003dec:	000f4240 	.word	0x000f4240
 8003df0:	20000118 	.word	0x20000118
 8003df4:	08005535 	.word	0x08005535
 8003df8:	08005516 	.word	0x08005516
 8003dfc:	20000df0 	.word	0x20000df0
 8003e00:	08005554 	.word	0x08005554
 8003e04:	0800558a 	.word	0x0800558a
 8003e08:	08005597 	.word	0x08005597
 8003e0c:	0800550f 	.word	0x0800550f

08003e10 <CheckAndSetPower>:

void CheckAndSetPower(float celsium) {
 8003e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	if (celsium < hyst[profile_num].min_temp + 0.1) {
 8003e14:	f04f 080c 	mov.w	r8, #12
 8003e18:	f7fc fb12 	bl	8000440 <__aeabi_f2d>
 8003e1c:	4d3e      	ldr	r5, [pc, #248]	; (8003f18 <CheckAndSetPower+0x108>)
 8003e1e:	4c3f      	ldr	r4, [pc, #252]	; (8003f1c <CheckAndSetPower+0x10c>)
 8003e20:	782b      	ldrb	r3, [r5, #0]
 8003e22:	4606      	mov	r6, r0
 8003e24:	fb08 f303 	mul.w	r3, r8, r3
 8003e28:	58e0      	ldr	r0, [r4, r3]
 8003e2a:	460f      	mov	r7, r1
 8003e2c:	eb04 0a03 	add.w	sl, r4, r3
 8003e30:	f7fc fb06 	bl	8000440 <__aeabi_f2d>
 8003e34:	a336      	add	r3, pc, #216	; (adr r3, 8003f10 <CheckAndSetPower+0x100>)
 8003e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3a:	f7fc f9a3 	bl	8000184 <__adddf3>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4630      	mov	r0, r6
 8003e44:	4639      	mov	r1, r7
 8003e46:	f7fc fbaf 	bl	80005a8 <__aeabi_dcmplt>
 8003e4a:	b338      	cbz	r0, 8003e9c <CheckAndSetPower+0x8c>
		if (!flag_hyst1) {
 8003e4c:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8003f2c <CheckAndSetPower+0x11c>
 8003e50:	f899 3000 	ldrb.w	r3, [r9]
 8003e54:	bb13      	cbnz	r3, 8003e9c <CheckAndSetPower+0x8c>
			snprintf(str,sizeof(str),"Set power to %d\n\r",hyst[profile_num].power);
 8003e56:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8003e5a:	4a31      	ldr	r2, [pc, #196]	; (8003f20 <CheckAndSetPower+0x110>)
 8003e5c:	2164      	movs	r1, #100	; 0x64
 8003e5e:	4831      	ldr	r0, [pc, #196]	; (8003f24 <CheckAndSetPower+0x114>)
 8003e60:	f000 feb0 	bl	8004bc4 <sniprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str), HAL_MAX_DELAY);
 8003e64:	482f      	ldr	r0, [pc, #188]	; (8003f24 <CheckAndSetPower+0x114>)
 8003e66:	f7fc f973 	bl	8000150 <strlen>
 8003e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6e:	b282      	uxth	r2, r0
 8003e70:	492c      	ldr	r1, [pc, #176]	; (8003f24 <CheckAndSetPower+0x114>)
 8003e72:	482d      	ldr	r0, [pc, #180]	; (8003f28 <CheckAndSetPower+0x118>)
 8003e74:	f7fe fa2a 	bl	80022cc <HAL_UART_Transmit>
			CDC_Transmit_FS(str, strlen(str));
 8003e78:	482a      	ldr	r0, [pc, #168]	; (8003f24 <CheckAndSetPower+0x114>)
 8003e7a:	f7fc f969 	bl	8000150 <strlen>
 8003e7e:	4601      	mov	r1, r0
 8003e80:	4828      	ldr	r0, [pc, #160]	; (8003f24 <CheckAndSetPower+0x114>)
 8003e82:	f000 fcbf 	bl	8004804 <CDC_Transmit_FS>
 8003e86:	f7ff fe29 	bl	8003adc <button_press.part.1>

			button_press(ONOFF_BUTTON);
			SetPower(hyst[profile_num].power);
 8003e8a:	782b      	ldrb	r3, [r5, #0]
 8003e8c:	fb08 4303 	mla	r3, r8, r3, r4
 8003e90:	7a18      	ldrb	r0, [r3, #8]
 8003e92:	f7ff ff0d 	bl	8003cb0 <SetPower>
			flag_hyst1 = true;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f889 3000 	strb.w	r3, [r9]
		}
	}

	if ((celsium > hyst[profile_num].max_temp - 0.1) & (flag_hyst1)) {
 8003e9c:	220c      	movs	r2, #12
 8003e9e:	782b      	ldrb	r3, [r5, #0]
 8003ea0:	fb02 4403 	mla	r4, r2, r3, r4
 8003ea4:	6860      	ldr	r0, [r4, #4]
 8003ea6:	f7fc facb 	bl	8000440 <__aeabi_f2d>
 8003eaa:	a319      	add	r3, pc, #100	; (adr r3, 8003f10 <CheckAndSetPower+0x100>)
 8003eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb0:	f7fc f966 	bl	8000180 <__aeabi_dsub>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4630      	mov	r0, r6
 8003eba:	4639      	mov	r1, r7
 8003ebc:	f04f 0401 	mov.w	r4, #1
 8003ec0:	f7fc fb90 	bl	80005e4 <__aeabi_dcmpgt>
 8003ec4:	b900      	cbnz	r0, 8003ec8 <CheckAndSetPower+0xb8>
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	f014 0fff 	tst.w	r4, #255	; 0xff
 8003ecc:	d01b      	beq.n	8003f06 <CheckAndSetPower+0xf6>
 8003ece:	4c17      	ldr	r4, [pc, #92]	; (8003f2c <CheckAndSetPower+0x11c>)
 8003ed0:	7823      	ldrb	r3, [r4, #0]
 8003ed2:	b1c3      	cbz	r3, 8003f06 <CheckAndSetPower+0xf6>
		snprintf(str,sizeof(str),"Power off.\n\r");
 8003ed4:	4916      	ldr	r1, [pc, #88]	; (8003f30 <CheckAndSetPower+0x120>)
 8003ed6:	4813      	ldr	r0, [pc, #76]	; (8003f24 <CheckAndSetPower+0x114>)
 8003ed8:	f000 fea8 	bl	8004c2c <strcpy>
		HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str), HAL_MAX_DELAY);
 8003edc:	4811      	ldr	r0, [pc, #68]	; (8003f24 <CheckAndSetPower+0x114>)
 8003ede:	f7fc f937 	bl	8000150 <strlen>
 8003ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee6:	b282      	uxth	r2, r0
 8003ee8:	490e      	ldr	r1, [pc, #56]	; (8003f24 <CheckAndSetPower+0x114>)
 8003eea:	480f      	ldr	r0, [pc, #60]	; (8003f28 <CheckAndSetPower+0x118>)
 8003eec:	f7fe f9ee 	bl	80022cc <HAL_UART_Transmit>
		CDC_Transmit_FS(str, strlen(str));
 8003ef0:	480c      	ldr	r0, [pc, #48]	; (8003f24 <CheckAndSetPower+0x114>)
 8003ef2:	f7fc f92d 	bl	8000150 <strlen>
 8003ef6:	4601      	mov	r1, r0
 8003ef8:	480a      	ldr	r0, [pc, #40]	; (8003f24 <CheckAndSetPower+0x114>)
 8003efa:	f000 fc83 	bl	8004804 <CDC_Transmit_FS>
 8003efe:	f7ff fded 	bl	8003adc <button_press.part.1>

		button_press(ONOFF_BUTTON);
		flag_hyst1 = false;
 8003f02:	2300      	movs	r3, #0
 8003f04:	7023      	strb	r3, [r4, #0]
 8003f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f0a:	bf00      	nop
 8003f0c:	f3af 8000 	nop.w
 8003f10:	9999999a 	.word	0x9999999a
 8003f14:	3fb99999 	.word	0x3fb99999
 8003f18:	200001e6 	.word	0x200001e6
 8003f1c:	20000cc8 	.word	0x20000cc8
 8003f20:	080054f0 	.word	0x080054f0
 8003f24:	20000d8c 	.word	0x20000d8c
 8003f28:	20000c84 	.word	0x20000c84
 8003f2c:	20000cc5 	.word	0x20000cc5
 8003f30:	08005502 	.word	0x08005502

08003f34 <MX_USART2_UART_Init>:
	}
}

void MX_USART2_UART_Init(uint32_t baud) {
 8003f34:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8003f36:	4a09      	ldr	r2, [pc, #36]	; (8003f5c <MX_USART2_UART_Init+0x28>)
 8003f38:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <MX_USART2_UART_Init+0x2c>)
  huart2.Init.BaudRate = baud;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f3a:	210c      	movs	r1, #12
  huart2.Instance = USART2;
 8003f3c:	601a      	str	r2, [r3, #0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f3e:	2200      	movs	r2, #0
  huart2.Init.BaudRate = baud;
 8003f40:	6058      	str	r0, [r3, #4]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;

  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8003f42:	4618      	mov	r0, r3
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f44:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f46:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f48:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f4a:	6159      	str	r1, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f4c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f4e:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8003f50:	f7fe f98a 	bl	8002268 <HAL_HalfDuplex_Init>
 8003f54:	b100      	cbz	r0, 8003f58 <MX_USART2_UART_Init+0x24>
 8003f56:	e7fe      	b.n	8003f56 <MX_USART2_UART_Init+0x22>
 8003f58:	bd08      	pop	{r3, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40004400 	.word	0x40004400
 8003f60:	20000d4c 	.word	0x20000d4c

08003f64 <main>:
{
 8003f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f68:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8003f6a:	f7fc fc97 	bl	800089c <HAL_Init>
  SystemClock_Config();
 8003f6e:	f7ff fe3f 	bl	8003bf0 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f72:	4b41      	ldr	r3, [pc, #260]	; (8004078 <main+0x114>)
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003f74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f78:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003f7a:	4840      	ldr	r0, [pc, #256]	; (800407c <main+0x118>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f7c:	f042 0210 	orr.w	r2, r2, #16
 8003f80:	619a      	str	r2, [r3, #24]
 8003f82:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f84:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f86:	f002 0210 	and.w	r2, r2, #16
 8003f8a:	9206      	str	r2, [sp, #24]
 8003f8c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f8e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f90:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f92:	f042 0220 	orr.w	r2, r2, #32
 8003f96:	619a      	str	r2, [r3, #24]
 8003f98:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9a:	2502      	movs	r5, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f9c:	f002 0220 	and.w	r2, r2, #32
 8003fa0:	9207      	str	r2, [sp, #28]
 8003fa2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fa4:	699a      	ldr	r2, [r3, #24]
  huart1.Init.BaudRate = 115200;
 8003fa6:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003faa:	f042 0204 	orr.w	r2, r2, #4
 8003fae:	619a      	str	r2, [r3, #24]
 8003fb0:	699a      	ldr	r2, [r3, #24]
 8003fb2:	f002 0204 	and.w	r2, r2, #4
 8003fb6:	9208      	str	r2, [sp, #32]
 8003fb8:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fba:	699a      	ldr	r2, [r3, #24]
 8003fbc:	f042 0208 	orr.w	r2, r2, #8
 8003fc0:	619a      	str	r2, [r3, #24]
 8003fc2:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003fc4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	9309      	str	r3, [sp, #36]	; 0x24
 8003fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003fce:	f7fc ff63 	bl	8000e98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, BUTTON_ONOFF_Pin|BUTTON_UP_Pin|BUTTON_DOWN_Pin, GPIO_PIN_RESET);
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8003fd8:	4829      	ldr	r0, [pc, #164]	; (8004080 <main+0x11c>)
 8003fda:	f7fc ff5d 	bl	8000e98 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 8003fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003fe2:	a90c      	add	r1, sp, #48	; 0x30
 8003fe4:	4825      	ldr	r0, [pc, #148]	; (800407c <main+0x118>)
  GPIO_InitStruct.Pin = LED_Pin;
 8003fe6:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fe8:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fea:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fec:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003fee:	f7fc fe73 	bl	8000cd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUTTON_ONOFF_Pin|BUTTON_UP_Pin|BUTTON_DOWN_Pin;
 8003ff2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ff6:	a90c      	add	r1, sp, #48	; 0x30
 8003ff8:	4821      	ldr	r0, [pc, #132]	; (8004080 <main+0x11c>)
  GPIO_InitStruct.Pin = BUTTON_ONOFF_Pin|BUTTON_UP_Pin|BUTTON_DOWN_Pin;
 8003ffa:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ffc:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ffe:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004000:	940e      	str	r4, [sp, #56]	; 0x38
  huart1.Instance = USART1;
 8004002:	4d20      	ldr	r5, [pc, #128]	; (8004084 <main+0x120>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004004:	f7fc fe68 	bl	8000cd8 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 8004008:	4b1f      	ldr	r3, [pc, #124]	; (8004088 <main+0x124>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800400a:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 115200;
 800400c:	e885 0088 	stmia.w	r5, {r3, r7}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004010:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004012:	60ac      	str	r4, [r5, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004014:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004016:	612c      	str	r4, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004018:	616b      	str	r3, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800401a:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800401c:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800401e:	f7fe f8f5 	bl	800220c <HAL_UART_Init>
 8004022:	4606      	mov	r6, r0
 8004024:	b100      	cbz	r0, 8004028 <main+0xc4>
 8004026:	e7fe      	b.n	8004026 <main+0xc2>
  MX_USART2_UART_Init(115200);
 8004028:	4638      	mov	r0, r7
 800402a:	f7ff ff83 	bl	8003f34 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800402e:	f000 fb15 	bl	800465c <MX_USB_DEVICE_Init>
  htim2.Init.Period = 199;
 8004032:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004036:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 800403a:	2210      	movs	r2, #16
 800403c:	23c7      	movs	r3, #199	; 0xc7
  htim2.Instance = TIM2;
 800403e:	4c13      	ldr	r4, [pc, #76]	; (800408c <main+0x128>)
  htim2.Init.Period = 199;
 8004040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004044:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004046:	6126      	str	r6, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004048:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800404a:	f7fd ffcd 	bl	8001fe8 <HAL_TIM_Base_Init>
 800404e:	b100      	cbz	r0, 8004052 <main+0xee>
 8004050:	e7fe      	b.n	8004050 <main+0xec>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004056:	a90c      	add	r1, sp, #48	; 0x30
 8004058:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800405a:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800405c:	f7fd fe2c 	bl	8001cb8 <HAL_TIM_ConfigClockSource>
 8004060:	b100      	cbz	r0, 8004064 <main+0x100>
 8004062:	e7fe      	b.n	8004062 <main+0xfe>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004064:	900a      	str	r0, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004066:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004068:	a90a      	add	r1, sp, #40	; 0x28
 800406a:	4620      	mov	r0, r4
 800406c:	f7fd ffd6 	bl	800201c <HAL_TIMEx_MasterConfigSynchronization>
 8004070:	4606      	mov	r6, r0
 8004072:	b168      	cbz	r0, 8004090 <main+0x12c>
 8004074:	e7fe      	b.n	8004074 <main+0x110>
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000
 800407c:	40011000 	.word	0x40011000
 8004080:	40010c00 	.word	0x40010c00
 8004084:	20000c84 	.word	0x20000c84
 8004088:	40013800 	.word	0x40013800
 800408c:	20000d08 	.word	0x20000d08
  HAL_TIM_Base_Start(&htim2);
 8004090:	4620      	mov	r0, r4
 8004092:	f7fd fdf9 	bl	8001c88 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8004096:	4620      	mov	r0, r4
 8004098:	f7fd fe03 	bl	8001ca2 <HAL_TIM_Base_Start_IT>
  snprintf(str,sizeof(str),"Kernel started...\n\rget_ROMid function executed...\n\r");
 800409c:	49b7      	ldr	r1, [pc, #732]	; (800437c <main+0x418>)
 800409e:	48b8      	ldr	r0, [pc, #736]	; (8004380 <main+0x41c>)
 80040a0:	f000 fdc4 	bl	8004c2c <strcpy>
  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str), HAL_MAX_DELAY);
 80040a4:	48b6      	ldr	r0, [pc, #728]	; (8004380 <main+0x41c>)
 80040a6:	f7fc f853 	bl	8000150 <strlen>
 80040aa:	f04f 33ff 	mov.w	r3, #4294967295
 80040ae:	b282      	uxth	r2, r0
 80040b0:	49b3      	ldr	r1, [pc, #716]	; (8004380 <main+0x41c>)
 80040b2:	4628      	mov	r0, r5
 80040b4:	f7fe f90a 	bl	80022cc <HAL_UART_Transmit>
  get_ROMid();
 80040b8:	f7ff fe0c 	bl	8003cd4 <get_ROMid>
  ReadEEprom();
 80040bc:	f7ff fd82 	bl	8003bc4 <ReadEEprom>
  for (uint8_t i = 0; i < devices; i++) {
 80040c0:	4635      	mov	r5, r6
 80040c2:	f8df 8300 	ldr.w	r8, [pc, #768]	; 80043c4 <main+0x460>
	  LED_ONOFF();
 80040c6:	4faf      	ldr	r7, [pc, #700]	; (8004384 <main+0x420>)
	  switch ((ow.ids[i]).family) {
 80040c8:	4eaf      	ldr	r6, [pc, #700]	; (8004388 <main+0x424>)
  for (uint8_t i = 0; i < devices; i++) {
 80040ca:	f898 3000 	ldrb.w	r3, [r8]
 80040ce:	b2ec      	uxtb	r4, r5
 80040d0:	42a3      	cmp	r3, r4
 80040d2:	f200 8123 	bhi.w	800431c <main+0x3b8>
  snprintf(str,sizeof(str),"get_ROMid function complete.\n\r");
 80040d6:	49ad      	ldr	r1, [pc, #692]	; (800438c <main+0x428>)
 80040d8:	48a9      	ldr	r0, [pc, #676]	; (8004380 <main+0x41c>)
 80040da:	f000 fda7 	bl	8004c2c <strcpy>
  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str), HAL_MAX_DELAY);
 80040de:	48a8      	ldr	r0, [pc, #672]	; (8004380 <main+0x41c>)
 80040e0:	f7fc f836 	bl	8000150 <strlen>
	  if (flag_timer2_counter) {
 80040e4:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 80043c8 <main+0x464>
  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str), HAL_MAX_DELAY);
 80040e8:	b282      	uxth	r2, r0
 80040ea:	f04f 33ff 	mov.w	r3, #4294967295
 80040ee:	49a4      	ldr	r1, [pc, #656]	; (8004380 <main+0x41c>)
 80040f0:	48a7      	ldr	r0, [pc, #668]	; (8004390 <main+0x42c>)
 80040f2:	f7fe f8eb 	bl	80022cc <HAL_UART_Transmit>
 80040f6:	46c2      	mov	sl, r8
		  if (timer2_counter > MAX_UPDATE_CNT) {
 80040f8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80043cc <main+0x468>
	  if (flag_timer2_counter) {
 80040fc:	f898 3000 	ldrb.w	r3, [r8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d040      	beq.n	8004186 <main+0x222>
		  if (timer2_counter > MAX_UPDATE_CNT) {
 8004104:	f8b9 3000 	ldrh.w	r3, [r9]
 8004108:	2b14      	cmp	r3, #20
 800410a:	d939      	bls.n	8004180 <main+0x21c>
			  t = readTemperature(&ow, &ow.ids[0], 1);
 800410c:	499e      	ldr	r1, [pc, #632]	; (8004388 <main+0x424>)
 800410e:	2201      	movs	r2, #1
 8004110:	4608      	mov	r0, r1
 8004112:	f7ff fc11 	bl	8003938 <readTemperature>
 8004116:	4c9f      	ldr	r4, [pc, #636]	; (8004394 <main+0x430>)
 8004118:	b200      	sxth	r0, r0
 800411a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800411e:	7020      	strb	r0, [r4, #0]
 8004120:	7063      	strb	r3, [r4, #1]
			  snprintf(str,sizeof(str),"DS18B20 N_%2u , Temp: %3u.%2uC\n\r",0,t.inCelsus, t.frac);
 8004122:	b240      	sxtb	r0, r0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	4a9c      	ldr	r2, [pc, #624]	; (8004398 <main+0x434>)
 8004128:	2164      	movs	r1, #100	; 0x64
 800412a:	9301      	str	r3, [sp, #4]
 800412c:	9000      	str	r0, [sp, #0]
 800412e:	2300      	movs	r3, #0
 8004130:	4893      	ldr	r0, [pc, #588]	; (8004380 <main+0x41c>)
 8004132:	f000 fd47 	bl	8004bc4 <sniprintf>
			  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str), HAL_MAX_DELAY);
 8004136:	4892      	ldr	r0, [pc, #584]	; (8004380 <main+0x41c>)
 8004138:	f7fc f80a 	bl	8000150 <strlen>
 800413c:	f04f 33ff 	mov.w	r3, #4294967295
 8004140:	b282      	uxth	r2, r0
 8004142:	498f      	ldr	r1, [pc, #572]	; (8004380 <main+0x41c>)
 8004144:	4892      	ldr	r0, [pc, #584]	; (8004390 <main+0x42c>)
 8004146:	f7fe f8c1 	bl	80022cc <HAL_UART_Transmit>
			  CDC_Transmit_FS(str, strlen(str));
 800414a:	488d      	ldr	r0, [pc, #564]	; (8004380 <main+0x41c>)
 800414c:	f7fc f800 	bl	8000150 <strlen>
 8004150:	4601      	mov	r1, r0
 8004152:	488b      	ldr	r0, [pc, #556]	; (8004380 <main+0x41c>)
 8004154:	f000 fb56 	bl	8004804 <CDC_Transmit_FS>
			  timer2_counter = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	f8a9 3000 	strh.w	r3, [r9]
			  CheckAndSetPower((float)t.inCelsus+t.frac/10);
 800415e:	230a      	movs	r3, #10
 8004160:	7860      	ldrb	r0, [r4, #1]
 8004162:	fbb0 f0f3 	udiv	r0, r0, r3
 8004166:	f7fc fb01 	bl	800076c <__aeabi_i2f>
 800416a:	4605      	mov	r5, r0
 800416c:	f994 0000 	ldrsb.w	r0, [r4]
 8004170:	f7fc fafc 	bl	800076c <__aeabi_i2f>
 8004174:	4601      	mov	r1, r0
 8004176:	4628      	mov	r0, r5
 8004178:	f7fc fa44 	bl	8000604 <__addsf3>
 800417c:	f7ff fe48 	bl	8003e10 <CheckAndSetPower>
		  flag_timer2_counter = false;
 8004180:	2300      	movs	r3, #0
 8004182:	f88a 3000 	strb.w	r3, [sl]
	  if (flag_usb == SAVE_CFG) {
 8004186:	4d85      	ldr	r5, [pc, #532]	; (800439c <main+0x438>)
 8004188:	782b      	ldrb	r3, [r5, #0]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d118      	bne.n	80041c0 <main+0x25c>
		  flag_usb = 0;
 800418e:	2300      	movs	r3, #0
		  snprintf(str,sizeof(str),"Settings stored to EEP !\n\r");
 8004190:	4983      	ldr	r1, [pc, #524]	; (80043a0 <main+0x43c>)
 8004192:	487b      	ldr	r0, [pc, #492]	; (8004380 <main+0x41c>)
		  flag_usb = 0;
 8004194:	702b      	strb	r3, [r5, #0]
		  snprintf(str,sizeof(str),"Settings stored to EEP !\n\r");
 8004196:	f000 fd49 	bl	8004c2c <strcpy>
		  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str), HAL_MAX_DELAY);
 800419a:	4879      	ldr	r0, [pc, #484]	; (8004380 <main+0x41c>)
 800419c:	f7fb ffd8 	bl	8000150 <strlen>
 80041a0:	f04f 33ff 	mov.w	r3, #4294967295
 80041a4:	b282      	uxth	r2, r0
 80041a6:	4976      	ldr	r1, [pc, #472]	; (8004380 <main+0x41c>)
 80041a8:	4879      	ldr	r0, [pc, #484]	; (8004390 <main+0x42c>)
 80041aa:	f7fe f88f 	bl	80022cc <HAL_UART_Transmit>
		  CDC_Transmit_FS(str, strlen(str));
 80041ae:	4874      	ldr	r0, [pc, #464]	; (8004380 <main+0x41c>)
 80041b0:	f7fb ffce 	bl	8000150 <strlen>
 80041b4:	4601      	mov	r1, r0
 80041b6:	4872      	ldr	r0, [pc, #456]	; (8004380 <main+0x41c>)
 80041b8:	f000 fb24 	bl	8004804 <CDC_Transmit_FS>
		  WriteValuesToEEprom();
 80041bc:	f7ff fcbc 	bl	8003b38 <WriteValuesToEEprom>
	  if (flag_usb == GET_CFG) {
 80041c0:	782b      	ldrb	r3, [r5, #0]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d15b      	bne.n	800427e <main+0x31a>
		  flag_usb = 0;
 80041c6:	2400      	movs	r4, #0
		  snprintf(str,sizeof(str),"Hysteresis EEP values:\n\rprofile_num:%u\n\r",profile_num);
 80041c8:	4b76      	ldr	r3, [pc, #472]	; (80043a4 <main+0x440>)
 80041ca:	4a77      	ldr	r2, [pc, #476]	; (80043a8 <main+0x444>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2164      	movs	r1, #100	; 0x64
 80041d0:	486b      	ldr	r0, [pc, #428]	; (8004380 <main+0x41c>)
		  flag_usb = 0;
 80041d2:	702c      	strb	r4, [r5, #0]
		  snprintf(str,sizeof(str),"Hysteresis EEP values:\n\rprofile_num:%u\n\r",profile_num);
 80041d4:	f000 fcf6 	bl	8004bc4 <sniprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str), HAL_MAX_DELAY);
 80041d8:	4869      	ldr	r0, [pc, #420]	; (8004380 <main+0x41c>)
 80041da:	f7fb ffb9 	bl	8000150 <strlen>
 80041de:	f04f 33ff 	mov.w	r3, #4294967295
 80041e2:	b282      	uxth	r2, r0
 80041e4:	4966      	ldr	r1, [pc, #408]	; (8004380 <main+0x41c>)
 80041e6:	486a      	ldr	r0, [pc, #424]	; (8004390 <main+0x42c>)
 80041e8:	f7fe f870 	bl	80022cc <HAL_UART_Transmit>
		  CDC_Transmit_FS(str, strlen(str));
 80041ec:	4864      	ldr	r0, [pc, #400]	; (8004380 <main+0x41c>)
 80041ee:	f7fb ffaf 	bl	8000150 <strlen>
 80041f2:	4601      	mov	r1, r0
 80041f4:	4862      	ldr	r0, [pc, #392]	; (8004380 <main+0x41c>)
 80041f6:	f000 fb05 	bl	8004804 <CDC_Transmit_FS>
 80041fa:	4f6c      	ldr	r7, [pc, #432]	; (80043ac <main+0x448>)
			  snprintf(str,sizeof(str),"hyst[%u]_min:%2u, hyst[%u]_max:%2u, hyst[%u]_power:%1u\n\r",
 80041fc:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 80043d0 <main+0x46c>
 8004200:	4e5f      	ldr	r6, [pc, #380]	; (8004380 <main+0x41c>)
 8004202:	7a3b      	ldrb	r3, [r7, #8]
 8004204:	9403      	str	r4, [sp, #12]
 8004206:	9304      	str	r3, [sp, #16]
					  i,(uint8_t)hyst[i].min_temp,i,(uint8_t)hyst[i].max_temp,i, hyst[i].power);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fc fb03 	bl	8000814 <__aeabi_f2uiz>
			  snprintf(str,sizeof(str),"hyst[%u]_min:%2u, hyst[%u]_max:%2u, hyst[%u]_power:%1u\n\r",
 800420e:	b2c0      	uxtb	r0, r0
 8004210:	9401      	str	r4, [sp, #4]
 8004212:	9002      	str	r0, [sp, #8]
					  i,(uint8_t)hyst[i].min_temp,i,(uint8_t)hyst[i].max_temp,i, hyst[i].power);
 8004214:	f857 0b0c 	ldr.w	r0, [r7], #12
 8004218:	f7fc fafc 	bl	8000814 <__aeabi_f2uiz>
			  snprintf(str,sizeof(str),"hyst[%u]_min:%2u, hyst[%u]_max:%2u, hyst[%u]_power:%1u\n\r",
 800421c:	b2c0      	uxtb	r0, r0
 800421e:	4623      	mov	r3, r4
 8004220:	465a      	mov	r2, fp
 8004222:	2164      	movs	r1, #100	; 0x64
 8004224:	9000      	str	r0, [sp, #0]
 8004226:	4630      	mov	r0, r6
 8004228:	f000 fccc 	bl	8004bc4 <sniprintf>
			  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str), HAL_MAX_DELAY);
 800422c:	4630      	mov	r0, r6
 800422e:	f7fb ff8f 	bl	8000150 <strlen>
 8004232:	f04f 33ff 	mov.w	r3, #4294967295
 8004236:	b282      	uxth	r2, r0
 8004238:	4631      	mov	r1, r6
 800423a:	4855      	ldr	r0, [pc, #340]	; (8004390 <main+0x42c>)
 800423c:	f7fe f846 	bl	80022cc <HAL_UART_Transmit>
			  CDC_Transmit_FS(str, strlen(str));
 8004240:	4630      	mov	r0, r6
 8004242:	f7fb ff85 	bl	8000150 <strlen>
 8004246:	3401      	adds	r4, #1
 8004248:	4601      	mov	r1, r0
 800424a:	4630      	mov	r0, r6
 800424c:	f000 fada 	bl	8004804 <CDC_Transmit_FS>
		  for (uint8_t i = 0;i<MAX_HYST;i++) {
 8004250:	2c05      	cmp	r4, #5
 8004252:	d1d6      	bne.n	8004202 <main+0x29e>
		  snprintf(str,sizeof(str),"\n\r--====--\n\rLutsk,UA, 2019 Build:051119 (by }{aTa6, Email:dragosha2000@gmx.net)\n\r\n\r\n\r");
 8004254:	4956      	ldr	r1, [pc, #344]	; (80043b0 <main+0x44c>)
 8004256:	484a      	ldr	r0, [pc, #296]	; (8004380 <main+0x41c>)
 8004258:	f000 fce8 	bl	8004c2c <strcpy>
		  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str), HAL_MAX_DELAY);
 800425c:	4848      	ldr	r0, [pc, #288]	; (8004380 <main+0x41c>)
 800425e:	f7fb ff77 	bl	8000150 <strlen>
 8004262:	4947      	ldr	r1, [pc, #284]	; (8004380 <main+0x41c>)
 8004264:	b282      	uxth	r2, r0
 8004266:	f04f 33ff 	mov.w	r3, #4294967295
 800426a:	4849      	ldr	r0, [pc, #292]	; (8004390 <main+0x42c>)
 800426c:	f7fe f82e 	bl	80022cc <HAL_UART_Transmit>
		  CDC_Transmit_FS(str, strlen(str));
 8004270:	4843      	ldr	r0, [pc, #268]	; (8004380 <main+0x41c>)
 8004272:	f7fb ff6d 	bl	8000150 <strlen>
 8004276:	4601      	mov	r1, r0
 8004278:	4841      	ldr	r0, [pc, #260]	; (8004380 <main+0x41c>)
 800427a:	f000 fac3 	bl	8004804 <CDC_Transmit_FS>
	  if (flag_usb == SET_PROFILE) {
 800427e:	782b      	ldrb	r3, [r5, #0]
 8004280:	2b04      	cmp	r3, #4
 8004282:	d119      	bne.n	80042b8 <main+0x354>
		  flag_usb = 0;
 8004284:	2300      	movs	r3, #0
 8004286:	702b      	strb	r3, [r5, #0]
		  snprintf(str,sizeof(str),"Profile changed to %u\n\r", profile_num);
 8004288:	4b46      	ldr	r3, [pc, #280]	; (80043a4 <main+0x440>)
 800428a:	4a4a      	ldr	r2, [pc, #296]	; (80043b4 <main+0x450>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2164      	movs	r1, #100	; 0x64
 8004290:	483b      	ldr	r0, [pc, #236]	; (8004380 <main+0x41c>)
 8004292:	f000 fc97 	bl	8004bc4 <sniprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str), HAL_MAX_DELAY);
 8004296:	483a      	ldr	r0, [pc, #232]	; (8004380 <main+0x41c>)
 8004298:	f7fb ff5a 	bl	8000150 <strlen>
 800429c:	4938      	ldr	r1, [pc, #224]	; (8004380 <main+0x41c>)
 800429e:	b282      	uxth	r2, r0
 80042a0:	f04f 33ff 	mov.w	r3, #4294967295
 80042a4:	483a      	ldr	r0, [pc, #232]	; (8004390 <main+0x42c>)
 80042a6:	f7fe f811 	bl	80022cc <HAL_UART_Transmit>
		  CDC_Transmit_FS(str, strlen(str));
 80042aa:	4835      	ldr	r0, [pc, #212]	; (8004380 <main+0x41c>)
 80042ac:	f7fb ff50 	bl	8000150 <strlen>
 80042b0:	4601      	mov	r1, r0
 80042b2:	4833      	ldr	r0, [pc, #204]	; (8004380 <main+0x41c>)
 80042b4:	f000 faa6 	bl	8004804 <CDC_Transmit_FS>
	  if (flag_usb == SET_VALUES) {
 80042b8:	782b      	ldrb	r3, [r5, #0]
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	f47f af1e 	bne.w	80040fc <main+0x198>
		  flag_usb = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	702b      	strb	r3, [r5, #0]
				  (uint8_t)hyst[common_array_number].max_temp,common_array_number, hyst[common_array_number].power);
 80042c4:	250c      	movs	r5, #12
		  snprintf(str,sizeof(str),"values changed !\n\rhyst[%u]_min:%2u, hyst[%u]_max:%2u, hyst[%u]_power:%1u\n\r",
 80042c6:	4b3c      	ldr	r3, [pc, #240]	; (80043b8 <main+0x454>)
				  (uint8_t)hyst[common_array_number].max_temp,common_array_number, hyst[common_array_number].power);
 80042c8:	4e38      	ldr	r6, [pc, #224]	; (80043ac <main+0x448>)
		  snprintf(str,sizeof(str),"values changed !\n\rhyst[%u]_min:%2u, hyst[%u]_max:%2u, hyst[%u]_power:%1u\n\r",
 80042ca:	781c      	ldrb	r4, [r3, #0]
				  (uint8_t)hyst[common_array_number].max_temp,common_array_number, hyst[common_array_number].power);
 80042cc:	4365      	muls	r5, r4
 80042ce:	1973      	adds	r3, r6, r5
		  snprintf(str,sizeof(str),"values changed !\n\rhyst[%u]_min:%2u, hyst[%u]_max:%2u, hyst[%u]_power:%1u\n\r",
 80042d0:	7a1a      	ldrb	r2, [r3, #8]
 80042d2:	9403      	str	r4, [sp, #12]
 80042d4:	9204      	str	r2, [sp, #16]
				  (uint8_t)hyst[common_array_number].max_temp,common_array_number, hyst[common_array_number].power);
 80042d6:	6858      	ldr	r0, [r3, #4]
 80042d8:	f7fc fa9c 	bl	8000814 <__aeabi_f2uiz>
		  snprintf(str,sizeof(str),"values changed !\n\rhyst[%u]_min:%2u, hyst[%u]_max:%2u, hyst[%u]_power:%1u\n\r",
 80042dc:	b2c0      	uxtb	r0, r0
 80042de:	9002      	str	r0, [sp, #8]
 80042e0:	9401      	str	r4, [sp, #4]
				  common_array_number,(uint8_t)hyst[common_array_number].min_temp,common_array_number,
 80042e2:	5970      	ldr	r0, [r6, r5]
 80042e4:	f7fc fa96 	bl	8000814 <__aeabi_f2uiz>
		  snprintf(str,sizeof(str),"values changed !\n\rhyst[%u]_min:%2u, hyst[%u]_max:%2u, hyst[%u]_power:%1u\n\r",
 80042e8:	b2c0      	uxtb	r0, r0
 80042ea:	4623      	mov	r3, r4
 80042ec:	9000      	str	r0, [sp, #0]
 80042ee:	4a33      	ldr	r2, [pc, #204]	; (80043bc <main+0x458>)
 80042f0:	2164      	movs	r1, #100	; 0x64
 80042f2:	4823      	ldr	r0, [pc, #140]	; (8004380 <main+0x41c>)
 80042f4:	f000 fc66 	bl	8004bc4 <sniprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str), HAL_MAX_DELAY);
 80042f8:	4821      	ldr	r0, [pc, #132]	; (8004380 <main+0x41c>)
 80042fa:	f7fb ff29 	bl	8000150 <strlen>
 80042fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004302:	b282      	uxth	r2, r0
 8004304:	491e      	ldr	r1, [pc, #120]	; (8004380 <main+0x41c>)
 8004306:	4822      	ldr	r0, [pc, #136]	; (8004390 <main+0x42c>)
 8004308:	f7fd ffe0 	bl	80022cc <HAL_UART_Transmit>
		  CDC_Transmit_FS(str, strlen(str));
 800430c:	481c      	ldr	r0, [pc, #112]	; (8004380 <main+0x41c>)
 800430e:	f7fb ff1f 	bl	8000150 <strlen>
 8004312:	4601      	mov	r1, r0
 8004314:	481a      	ldr	r0, [pc, #104]	; (8004380 <main+0x41c>)
 8004316:	f000 fa75 	bl	8004804 <CDC_Transmit_FS>
 800431a:	e6ef      	b.n	80040fc <main+0x198>
	  LED_ONOFF();
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004322:	60fb      	str	r3, [r7, #12]
	  switch ((ow.ids[i]).family) {
 8004324:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
 8004328:	2b10      	cmp	r3, #16
 800432a:	d053      	beq.n	80043d4 <main+0x470>
 800432c:	2b28      	cmp	r3, #40	; 0x28
 800432e:	d003      	beq.n	8004338 <main+0x3d4>
 8004330:	2b00      	cmp	r3, #0
 8004332:	d162      	bne.n	80043fa <main+0x496>
 8004334:	3501      	adds	r5, #1
 8004336:	e6c8      	b.n	80040ca <main+0x166>
    	  t = readTemperature(&ow, &ow.ids[i], 1);
 8004338:	2201      	movs	r2, #1
 800433a:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 800433e:	4630      	mov	r0, r6
 8004340:	f7ff fafa 	bl	8003938 <readTemperature>
 8004344:	4a13      	ldr	r2, [pc, #76]	; (8004394 <main+0x430>)
 8004346:	b200      	sxth	r0, r0
 8004348:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800434c:	7053      	strb	r3, [r2, #1]
    	  snprintf(str,sizeof(str),"DS18B20 N_%2u , Temperature: %3u.%2uC\n\r",i,t.inCelsus, t.frac);
 800434e:	b2db      	uxtb	r3, r3
    	  t = readTemperature(&ow, &ow.ids[i], 1);
 8004350:	7010      	strb	r0, [r2, #0]
    	  snprintf(str,sizeof(str),"DS18B20 N_%2u , Temperature: %3u.%2uC\n\r",i,t.inCelsus, t.frac);
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	4623      	mov	r3, r4
 8004356:	b240      	sxtb	r0, r0
 8004358:	4a19      	ldr	r2, [pc, #100]	; (80043c0 <main+0x45c>)
 800435a:	9000      	str	r0, [sp, #0]
    	  snprintf(str,sizeof(str),"DS18S20 N_%2u , Temperature: %3u.%2uC\n\r",i,t.inCelsus, t.frac);
 800435c:	2164      	movs	r1, #100	; 0x64
 800435e:	4808      	ldr	r0, [pc, #32]	; (8004380 <main+0x41c>)
 8004360:	f000 fc30 	bl	8004bc4 <sniprintf>
    	  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str), HAL_MAX_DELAY);
 8004364:	4806      	ldr	r0, [pc, #24]	; (8004380 <main+0x41c>)
 8004366:	f7fb fef3 	bl	8000150 <strlen>
 800436a:	f04f 33ff 	mov.w	r3, #4294967295
 800436e:	b282      	uxth	r2, r0
 8004370:	4903      	ldr	r1, [pc, #12]	; (8004380 <main+0x41c>)
 8004372:	4807      	ldr	r0, [pc, #28]	; (8004390 <main+0x42c>)
 8004374:	f7fd ffaa 	bl	80022cc <HAL_UART_Transmit>
    	  break;
 8004378:	e7dc      	b.n	8004334 <main+0x3d0>
 800437a:	bf00      	nop
 800437c:	0800559f 	.word	0x0800559f
 8004380:	20000d8c 	.word	0x20000d8c
 8004384:	40011000 	.word	0x40011000
 8004388:	20000c44 	.word	0x20000c44
 800438c:	0800564a 	.word	0x0800564a
 8004390:	20000c84 	.word	0x20000c84
 8004394:	20000c40 	.word	0x20000c40
 8004398:	08005669 	.word	0x08005669
 800439c:	20000cc4 	.word	0x20000cc4
 80043a0:	0800568a 	.word	0x0800568a
 80043a4:	200001e6 	.word	0x200001e6
 80043a8:	080056a5 	.word	0x080056a5
 80043ac:	20000cc8 	.word	0x20000cc8
 80043b0:	080056ce 	.word	0x080056ce
 80043b4:	08005724 	.word	0x08005724
 80043b8:	20000d48 	.word	0x20000d48
 80043bc:	0800573c 	.word	0x0800573c
 80043c0:	080055d3 	.word	0x080055d3
 80043c4:	20000d49 	.word	0x20000d49
 80043c8:	20000c82 	.word	0x20000c82
 80043cc:	20000c80 	.word	0x20000c80
 80043d0:	0800574e 	.word	0x0800574e
    	  t = readTemperature(&ow, &ow.ids[i], 1);
 80043d4:	2201      	movs	r2, #1
 80043d6:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 80043da:	4630      	mov	r0, r6
 80043dc:	f7ff faac 	bl	8003938 <readTemperature>
 80043e0:	4a10      	ldr	r2, [pc, #64]	; (8004424 <main+0x4c0>)
 80043e2:	b200      	sxth	r0, r0
 80043e4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80043e8:	7010      	strb	r0, [r2, #0]
 80043ea:	7053      	strb	r3, [r2, #1]
    	  snprintf(str,sizeof(str),"DS18S20 N_%2u , Temperature: %3u.%2uC\n\r",i,t.inCelsus, t.frac);
 80043ec:	b240      	sxtb	r0, r0
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	9301      	str	r3, [sp, #4]
 80043f2:	9000      	str	r0, [sp, #0]
 80043f4:	4623      	mov	r3, r4
 80043f6:	4a0c      	ldr	r2, [pc, #48]	; (8004428 <main+0x4c4>)
 80043f8:	e7b0      	b.n	800435c <main+0x3f8>
    			  (ow.ids[i]).family, (ow.ids[i]).code[0],(ow.ids[i]).code[1],(ow.ids[i]).code[2],(ow.ids[i]).code[3], (ow.ids[i]).code[4], (ow.ids[i]).code[5]);
 80043fa:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
    	  snprintf(str,sizeof(str),"UNKNOWN Family:%x (SN: %x%x%x%x%x%x\n\r)",
 80043fe:	79a2      	ldrb	r2, [r4, #6]
 8004400:	2164      	movs	r1, #100	; 0x64
 8004402:	9205      	str	r2, [sp, #20]
 8004404:	7962      	ldrb	r2, [r4, #5]
 8004406:	4809      	ldr	r0, [pc, #36]	; (800442c <main+0x4c8>)
 8004408:	9204      	str	r2, [sp, #16]
 800440a:	7922      	ldrb	r2, [r4, #4]
 800440c:	9203      	str	r2, [sp, #12]
 800440e:	78e2      	ldrb	r2, [r4, #3]
 8004410:	9202      	str	r2, [sp, #8]
 8004412:	78a2      	ldrb	r2, [r4, #2]
 8004414:	9201      	str	r2, [sp, #4]
 8004416:	7862      	ldrb	r2, [r4, #1]
 8004418:	9200      	str	r2, [sp, #0]
 800441a:	4a05      	ldr	r2, [pc, #20]	; (8004430 <main+0x4cc>)
 800441c:	f000 fbd2 	bl	8004bc4 <sniprintf>
 8004420:	e7a0      	b.n	8004364 <main+0x400>
 8004422:	bf00      	nop
 8004424:	20000c40 	.word	0x20000c40
 8004428:	080055fb 	.word	0x080055fb
 800442c:	20000d8c 	.word	0x20000d8c
 8004430:	08005623 	.word	0x08005623

08004434 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8004434:	e7fe      	b.n	8004434 <_Error_Handler>
	...

08004438 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004438:	4b25      	ldr	r3, [pc, #148]	; (80044d0 <HAL_MspInit+0x98>)
{
 800443a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 800443c:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800443e:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004440:	f042 0201 	orr.w	r2, r2, #1
 8004444:	619a      	str	r2, [r3, #24]
 8004446:	699a      	ldr	r2, [r3, #24]
 8004448:	f002 0201 	and.w	r2, r2, #1
 800444c:	9200      	str	r2, [sp, #0]
 800444e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004450:	69da      	ldr	r2, [r3, #28]
 8004452:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004456:	61da      	str	r2, [r3, #28]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445e:	9301      	str	r3, [sp, #4]
 8004460:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004462:	f7fc fa51 	bl	8000908 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004466:	2200      	movs	r2, #0
 8004468:	f06f 000b 	mvn.w	r0, #11
 800446c:	4611      	mov	r1, r2
 800446e:	f7fc fa5d 	bl	800092c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004472:	2200      	movs	r2, #0
 8004474:	f06f 000a 	mvn.w	r0, #10
 8004478:	4611      	mov	r1, r2
 800447a:	f7fc fa57 	bl	800092c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800447e:	2200      	movs	r2, #0
 8004480:	f06f 0009 	mvn.w	r0, #9
 8004484:	4611      	mov	r1, r2
 8004486:	f7fc fa51 	bl	800092c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800448a:	2200      	movs	r2, #0
 800448c:	f06f 0004 	mvn.w	r0, #4
 8004490:	4611      	mov	r1, r2
 8004492:	f7fc fa4b 	bl	800092c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004496:	2200      	movs	r2, #0
 8004498:	f06f 0003 	mvn.w	r0, #3
 800449c:	4611      	mov	r1, r2
 800449e:	f7fc fa45 	bl	800092c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80044a2:	2200      	movs	r2, #0
 80044a4:	f06f 0001 	mvn.w	r0, #1
 80044a8:	4611      	mov	r1, r2
 80044aa:	f7fc fa3f 	bl	800092c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80044ae:	2200      	movs	r2, #0
 80044b0:	f04f 30ff 	mov.w	r0, #4294967295
 80044b4:	4611      	mov	r1, r2
 80044b6:	f7fc fa39 	bl	800092c <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80044ba:	4a06      	ldr	r2, [pc, #24]	; (80044d4 <HAL_MspInit+0x9c>)
 80044bc:	6853      	ldr	r3, [r2, #4]
 80044be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80044c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044c6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044c8:	b003      	add	sp, #12
 80044ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80044ce:	bf00      	nop
 80044d0:	40021000 	.word	0x40021000
 80044d4:	40010000 	.word	0x40010000

080044d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 80044d8:	6803      	ldr	r3, [r0, #0]
{
 80044da:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 80044dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e0:	d112      	bne.n	8004508 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044e2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80044e6:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80044e8:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80044f0:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044f2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80044f4:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	9301      	str	r3, [sp, #4]
 80044fc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80044fe:	f7fc fa15 	bl	800092c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004502:	201c      	movs	r0, #28
 8004504:	f7fc fa46 	bl	8000994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004508:	b003      	add	sp, #12
 800450a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004510 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004510:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8004512:	6803      	ldr	r3, [r0, #0]
 8004514:	4a22      	ldr	r2, [pc, #136]	; (80045a0 <HAL_UART_MspInit+0x90>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d121      	bne.n	800455e <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800451a:	4b22      	ldr	r3, [pc, #136]	; (80045a4 <HAL_UART_MspInit+0x94>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800451c:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800451e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004520:	4821      	ldr	r0, [pc, #132]	; (80045a8 <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004526:	619a      	str	r2, [r3, #24]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004532:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004536:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004538:	2302      	movs	r3, #2
 800453a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800453c:	2303      	movs	r3, #3
 800453e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004540:	f7fc fbca 	bl	8000cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004548:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800454a:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800454c:	a902      	add	r1, sp, #8
 800454e:	4816      	ldr	r0, [pc, #88]	; (80045a8 <HAL_UART_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004550:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004552:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004554:	f7fc fbc0 	bl	8000cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004558:	b007      	add	sp, #28
 800455a:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(huart->Instance==USART2)
 800455e:	4a13      	ldr	r2, [pc, #76]	; (80045ac <HAL_UART_MspInit+0x9c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d1f9      	bne.n	8004558 <HAL_UART_MspInit+0x48>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004564:	4b0f      	ldr	r3, [pc, #60]	; (80045a4 <HAL_UART_MspInit+0x94>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004566:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8004568:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800456a:	480f      	ldr	r0, [pc, #60]	; (80045a8 <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800456c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004570:	61da      	str	r2, [r3, #28]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004578:	9301      	str	r3, [sp, #4]
 800457a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800457c:	2304      	movs	r3, #4
 800457e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004580:	2312      	movs	r3, #18
 8004582:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004584:	2303      	movs	r3, #3
 8004586:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004588:	f7fc fba6 	bl	8000cd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800458c:	2200      	movs	r2, #0
 800458e:	2026      	movs	r0, #38	; 0x26
 8004590:	4611      	mov	r1, r2
 8004592:	f7fc f9cb 	bl	800092c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004596:	2026      	movs	r0, #38	; 0x26
 8004598:	f7fc f9fc 	bl	8000994 <HAL_NVIC_EnableIRQ>
}
 800459c:	e7dc      	b.n	8004558 <HAL_UART_MspInit+0x48>
 800459e:	bf00      	nop
 80045a0:	40013800 	.word	0x40013800
 80045a4:	40021000 	.word	0x40021000
 80045a8:	40010800 	.word	0x40010800
 80045ac:	40004400 	.word	0x40004400

080045b0 <NMI_Handler>:
 80045b0:	4770      	bx	lr

080045b2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80045b2:	e7fe      	b.n	80045b2 <HardFault_Handler>

080045b4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80045b4:	e7fe      	b.n	80045b4 <MemManage_Handler>

080045b6 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80045b6:	e7fe      	b.n	80045b6 <BusFault_Handler>

080045b8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80045b8:	e7fe      	b.n	80045b8 <UsageFault_Handler>

080045ba <SVC_Handler>:
 80045ba:	4770      	bx	lr

080045bc <DebugMon_Handler>:
 80045bc:	4770      	bx	lr

080045be <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80045be:	4770      	bx	lr

080045c0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80045c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045c2:	f7fc f97d 	bl	80008c0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80045ca:	f7fc ba12 	b.w	80009f2 <HAL_SYSTICK_IRQHandler>
	...

080045d0 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80045d0:	4801      	ldr	r0, [pc, #4]	; (80045d8 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80045d2:	f7fc bd73 	b.w	80010bc <HAL_PCD_IRQHandler>
 80045d6:	bf00      	nop
 80045d8:	200017e8 	.word	0x200017e8

080045dc <TIM2_IRQHandler>:
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */
	timer2_counter++;
 80045dc:	4a04      	ldr	r2, [pc, #16]	; (80045f0 <TIM2_IRQHandler+0x14>)
	flag_timer2_counter = true;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80045de:	4805      	ldr	r0, [pc, #20]	; (80045f4 <TIM2_IRQHandler+0x18>)
	timer2_counter++;
 80045e0:	8813      	ldrh	r3, [r2, #0]
 80045e2:	3301      	adds	r3, #1
 80045e4:	8013      	strh	r3, [r2, #0]
	flag_timer2_counter = true;
 80045e6:	2201      	movs	r2, #1
 80045e8:	4b03      	ldr	r3, [pc, #12]	; (80045f8 <TIM2_IRQHandler+0x1c>)
 80045ea:	701a      	strb	r2, [r3, #0]
  HAL_TIM_IRQHandler(&htim2);
 80045ec:	f7fd bc22 	b.w	8001e34 <HAL_TIM_IRQHandler>
 80045f0:	20000c80 	.word	0x20000c80
 80045f4:	20000d08 	.word	0x20000d08
 80045f8:	20000c82 	.word	0x20000c82

080045fc <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 80045fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80045fe:	4803      	ldr	r0, [pc, #12]	; (800460c <USART2_IRQHandler+0x10>)
 8004600:	f7fd ff02 	bl	8002408 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	owReadHandler();
  /* USER CODE END USART2_IRQn 1 */
}
 8004604:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	owReadHandler();
 8004608:	f7ff b83a 	b.w	8003680 <owReadHandler>
 800460c:	20000d4c 	.word	0x20000d4c

08004610 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004610:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <SystemInit+0x40>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	f042 0201 	orr.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800461a:	6859      	ldr	r1, [r3, #4]
 800461c:	4a0d      	ldr	r2, [pc, #52]	; (8004654 <SystemInit+0x44>)
 800461e:	400a      	ands	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004628:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800462c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004634:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800463c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800463e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004642:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004644:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004648:	4b03      	ldr	r3, [pc, #12]	; (8004658 <SystemInit+0x48>)
 800464a:	609a      	str	r2, [r3, #8]
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40021000 	.word	0x40021000
 8004654:	f8ff0000 	.word	0xf8ff0000
 8004658:	e000ed00 	.word	0xe000ed00

0800465c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800465c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800465e:	4c09      	ldr	r4, [pc, #36]	; (8004684 <MX_USB_DEVICE_Init+0x28>)
 8004660:	2200      	movs	r2, #0
 8004662:	4909      	ldr	r1, [pc, #36]	; (8004688 <MX_USB_DEVICE_Init+0x2c>)
 8004664:	4620      	mov	r0, r4
 8004666:	f7fe fcb9 	bl	8002fdc <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 800466a:	4908      	ldr	r1, [pc, #32]	; (800468c <MX_USB_DEVICE_Init+0x30>)
 800466c:	4620      	mov	r0, r4
 800466e:	f7fe fcca 	bl	8003006 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8004672:	4620      	mov	r0, r4
 8004674:	4906      	ldr	r1, [pc, #24]	; (8004690 <MX_USB_DEVICE_Init+0x34>)
 8004676:	f7fe fc72 	bl	8002f5e <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 800467a:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800467c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8004680:	f7fe bcc8 	b.w	8003014 <USBD_Start>
 8004684:	20000df4 	.word	0x20000df4
 8004688:	20000130 	.word	0x20000130
 800468c:	20000008 	.word	0x20000008
 8004690:	20000120 	.word	0x20000120

08004694 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004694:	2000      	movs	r0, #0
 8004696:	4770      	bx	lr

08004698 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004698:	2000      	movs	r0, #0
 800469a:	4770      	bx	lr

0800469c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800469c:	b570      	push	{r4, r5, r6, lr}
 800469e:	b08e      	sub	sp, #56	; 0x38
	size_t index ;
	char* pos;
	uint8_t array_number;
	char str_rx[50];

	strncpy(str_rx,(char*)Buf,*Len);
 80046a0:	ac01      	add	r4, sp, #4
 80046a2:	680a      	ldr	r2, [r1, #0]
{
 80046a4:	4606      	mov	r6, r0
	strncpy(str_rx,(char*)Buf,*Len);
 80046a6:	4601      	mov	r1, r0
 80046a8:	4620      	mov	r0, r4
 80046aa:	f000 fac7 	bl	8004c3c <strncpy>
	pos = strstr(str_rx,"hyst");
 80046ae:	493f      	ldr	r1, [pc, #252]	; (80047ac <CDC_Receive_FS+0x110>)
 80046b0:	4620      	mov	r0, r4
 80046b2:	f000 fad8 	bl	8004c66 <strstr>
	if (pos ) {
 80046b6:	b318      	cbz	r0, 8004700 <CDC_Receive_FS+0x64>
		flag_usb = SET_VALUES;
 80046b8:	2203      	movs	r2, #3
 80046ba:	4b3d      	ldr	r3, [pc, #244]	; (80047b0 <CDC_Receive_FS+0x114>)
		index = pos - str_rx;
 80046bc:	1b00      	subs	r0, r0, r4
		flag_usb = SET_VALUES;
 80046be:	701a      	strb	r2, [r3, #0]
		array_number = str_rx[index + 4] - 0x30; // calculate number of array
 80046c0:	ab0e      	add	r3, sp, #56	; 0x38
 80046c2:	4418      	add	r0, r3
 80046c4:	f810 5c30 	ldrb.w	r5, [r0, #-48]
		common_array_number = array_number ;
 80046c8:	4b3a      	ldr	r3, [pc, #232]	; (80047b4 <CDC_Receive_FS+0x118>)
		array_number = str_rx[index + 4] - 0x30; // calculate number of array
 80046ca:	3d30      	subs	r5, #48	; 0x30
 80046cc:	b2ed      	uxtb	r5, r5
		pos = strstr(str_rx,"_min:");
 80046ce:	493a      	ldr	r1, [pc, #232]	; (80047b8 <CDC_Receive_FS+0x11c>)
 80046d0:	4620      	mov	r0, r4
		common_array_number = array_number ;
 80046d2:	701d      	strb	r5, [r3, #0]
		pos = strstr(str_rx,"_min:");
 80046d4:	f000 fac7 	bl	8004c66 <strstr>
		if (pos) {
 80046d8:	2800      	cmp	r0, #0
 80046da:	d03b      	beq.n	8004754 <CDC_Receive_FS+0xb8>
			index = pos - str_rx;
			hyst[array_number].min_temp  = (str_rx[index + 5] - 0x30) * 10 + (str_rx[index + 6] - 0x30);
 80046dc:	230c      	movs	r3, #12
			index = pos - str_rx;
 80046de:	1b00      	subs	r0, r0, r4
			hyst[array_number].min_temp  = (str_rx[index + 5] - 0x30) * 10 + (str_rx[index + 6] - 0x30);
 80046e0:	435d      	muls	r5, r3
 80046e2:	ab0e      	add	r3, sp, #56	; 0x38
 80046e4:	4403      	add	r3, r0
 80046e6:	200a      	movs	r0, #10
 80046e8:	f813 2c2f 	ldrb.w	r2, [r3, #-47]
 80046ec:	f813 3c2e 	ldrb.w	r3, [r3, #-46]
 80046f0:	3a30      	subs	r2, #48	; 0x30
 80046f2:	3b30      	subs	r3, #48	; 0x30
 80046f4:	fb00 3002 	mla	r0, r0, r2, r3
 80046f8:	f7fc f838 	bl	800076c <__aeabi_i2f>
 80046fc:	4b2f      	ldr	r3, [pc, #188]	; (80047bc <CDC_Receive_FS+0x120>)
 80046fe:	5158      	str	r0, [r3, r5]
				}
			}
		}
	}

	pos = strstr(str_rx,"get_cfg");
 8004700:	492f      	ldr	r1, [pc, #188]	; (80047c0 <CDC_Receive_FS+0x124>)
 8004702:	4620      	mov	r0, r4
 8004704:	f000 faaf 	bl	8004c66 <strstr>
	if (pos ) flag_usb = GET_CFG;
 8004708:	b110      	cbz	r0, 8004710 <CDC_Receive_FS+0x74>
 800470a:	2202      	movs	r2, #2
 800470c:	4b28      	ldr	r3, [pc, #160]	; (80047b0 <CDC_Receive_FS+0x114>)
 800470e:	701a      	strb	r2, [r3, #0]

	pos = strstr(str_rx,"profile:");
 8004710:	492c      	ldr	r1, [pc, #176]	; (80047c4 <CDC_Receive_FS+0x128>)
 8004712:	4620      	mov	r0, r4
 8004714:	f000 faa7 	bl	8004c66 <strstr>
	if (pos ) {
 8004718:	b150      	cbz	r0, 8004730 <CDC_Receive_FS+0x94>
		index = pos - str_rx;
		profile_num = str_rx[index + 8] - 0x30;
 800471a:	ab0e      	add	r3, sp, #56	; 0x38
		index = pos - str_rx;
 800471c:	1b00      	subs	r0, r0, r4
		profile_num = str_rx[index + 8] - 0x30;
 800471e:	4418      	add	r0, r3
 8004720:	f810 3c2c 	ldrb.w	r3, [r0, #-44]
 8004724:	4a28      	ldr	r2, [pc, #160]	; (80047c8 <CDC_Receive_FS+0x12c>)
 8004726:	3b30      	subs	r3, #48	; 0x30
 8004728:	7013      	strb	r3, [r2, #0]
		flag_usb = SET_PROFILE;
 800472a:	2204      	movs	r2, #4
 800472c:	4b20      	ldr	r3, [pc, #128]	; (80047b0 <CDC_Receive_FS+0x114>)
 800472e:	701a      	strb	r2, [r3, #0]
	}

    pos = strstr(str_rx,"save_cfg");
 8004730:	4926      	ldr	r1, [pc, #152]	; (80047cc <CDC_Receive_FS+0x130>)
 8004732:	4620      	mov	r0, r4
 8004734:	f000 fa97 	bl	8004c66 <strstr>
    if (pos) flag_usb = SAVE_CFG;
 8004738:	b110      	cbz	r0, 8004740 <CDC_Receive_FS+0xa4>
 800473a:	2201      	movs	r2, #1
 800473c:	4b1c      	ldr	r3, [pc, #112]	; (80047b0 <CDC_Receive_FS+0x114>)
 800473e:	701a      	strb	r2, [r3, #0]

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004740:	4631      	mov	r1, r6
 8004742:	4823      	ldr	r0, [pc, #140]	; (80047d0 <CDC_Receive_FS+0x134>)
 8004744:	f7fe fc1a 	bl	8002f7c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004748:	4821      	ldr	r0, [pc, #132]	; (80047d0 <CDC_Receive_FS+0x134>)
 800474a:	f7fe fc34 	bl	8002fb6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800474e:	2000      	movs	r0, #0
 8004750:	b00e      	add	sp, #56	; 0x38
 8004752:	bd70      	pop	{r4, r5, r6, pc}
			pos = strstr(str_rx,"_max:");
 8004754:	491f      	ldr	r1, [pc, #124]	; (80047d4 <CDC_Receive_FS+0x138>)
 8004756:	4620      	mov	r0, r4
 8004758:	f000 fa85 	bl	8004c66 <strstr>
			if (pos) {
 800475c:	b198      	cbz	r0, 8004786 <CDC_Receive_FS+0xea>
				hyst[array_number].max_temp  = (str_rx[index + 5] - 0x30) * 10 + (str_rx[index + 6] - 0x30);
 800475e:	230c      	movs	r3, #12
 8004760:	4a16      	ldr	r2, [pc, #88]	; (80047bc <CDC_Receive_FS+0x120>)
				index = pos - str_rx;
 8004762:	1b00      	subs	r0, r0, r4
				hyst[array_number].max_temp  = (str_rx[index + 5] - 0x30) * 10 + (str_rx[index + 6] - 0x30);
 8004764:	fb03 2505 	mla	r5, r3, r5, r2
 8004768:	ab0e      	add	r3, sp, #56	; 0x38
 800476a:	4403      	add	r3, r0
 800476c:	200a      	movs	r0, #10
 800476e:	f813 2c2f 	ldrb.w	r2, [r3, #-47]
 8004772:	f813 3c2e 	ldrb.w	r3, [r3, #-46]
 8004776:	3a30      	subs	r2, #48	; 0x30
 8004778:	3b30      	subs	r3, #48	; 0x30
 800477a:	fb00 3002 	mla	r0, r0, r2, r3
 800477e:	f7fb fff5 	bl	800076c <__aeabi_i2f>
 8004782:	6068      	str	r0, [r5, #4]
 8004784:	e7bc      	b.n	8004700 <CDC_Receive_FS+0x64>
				pos = strstr(str_rx,"_power:");
 8004786:	4914      	ldr	r1, [pc, #80]	; (80047d8 <CDC_Receive_FS+0x13c>)
 8004788:	4620      	mov	r0, r4
 800478a:	f000 fa6c 	bl	8004c66 <strstr>
				if (pos) {
 800478e:	2800      	cmp	r0, #0
 8004790:	d0b6      	beq.n	8004700 <CDC_Receive_FS+0x64>
					hyst[array_number].power  = str_rx[index + 7] - 0x30;
 8004792:	220c      	movs	r2, #12
 8004794:	4b09      	ldr	r3, [pc, #36]	; (80047bc <CDC_Receive_FS+0x120>)
					index = pos - str_rx;
 8004796:	1b00      	subs	r0, r0, r4
					hyst[array_number].power  = str_rx[index + 7] - 0x30;
 8004798:	fb02 3505 	mla	r5, r2, r5, r3
 800479c:	ab0e      	add	r3, sp, #56	; 0x38
 800479e:	4418      	add	r0, r3
 80047a0:	f810 3c2d 	ldrb.w	r3, [r0, #-45]
 80047a4:	3b30      	subs	r3, #48	; 0x30
 80047a6:	722b      	strb	r3, [r5, #8]
 80047a8:	e7aa      	b.n	8004700 <CDC_Receive_FS+0x64>
 80047aa:	bf00      	nop
 80047ac:	0800579f 	.word	0x0800579f
 80047b0:	20000cc4 	.word	0x20000cc4
 80047b4:	20000d48 	.word	0x20000d48
 80047b8:	080057a4 	.word	0x080057a4
 80047bc:	20000cc8 	.word	0x20000cc8
 80047c0:	080057b8 	.word	0x080057b8
 80047c4:	080057c0 	.word	0x080057c0
 80047c8:	200001e6 	.word	0x200001e6
 80047cc:	080057c9 	.word	0x080057c9
 80047d0:	20000df4 	.word	0x20000df4
 80047d4:	080057aa 	.word	0x080057aa
 80047d8:	080057b0 	.word	0x080057b0

080047dc <CDC_Init_FS>:
{
 80047dc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80047de:	4c06      	ldr	r4, [pc, #24]	; (80047f8 <CDC_Init_FS+0x1c>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	4906      	ldr	r1, [pc, #24]	; (80047fc <CDC_Init_FS+0x20>)
 80047e4:	4620      	mov	r0, r4
 80047e6:	f7fe fbc1 	bl	8002f6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80047ea:	4905      	ldr	r1, [pc, #20]	; (8004800 <CDC_Init_FS+0x24>)
 80047ec:	4620      	mov	r0, r4
 80047ee:	f7fe fbc5 	bl	8002f7c <USBD_CDC_SetRxBuffer>
}
 80047f2:	2000      	movs	r0, #0
 80047f4:	bd10      	pop	{r4, pc}
 80047f6:	bf00      	nop
 80047f8:	20000df4 	.word	0x20000df4
 80047fc:	20001400 	.word	0x20001400
 8004800:	20001018 	.word	0x20001018

08004804 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8004804:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004806:	4c09      	ldr	r4, [pc, #36]	; (800482c <CDC_Transmit_FS+0x28>)
{
 8004808:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800480a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  if (hcdc->TxState != 0) {
 800480e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004812:	b943      	cbnz	r3, 8004826 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004814:	4601      	mov	r1, r0
 8004816:	4620      	mov	r0, r4
 8004818:	f7fe fba8 	bl	8002f6c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800481c:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 800481e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004822:	f7fe bbb1 	b.w	8002f88 <USBD_CDC_TransmitPacket>
}
 8004826:	2001      	movs	r0, #1
 8004828:	bd10      	pop	{r4, pc}
 800482a:	bf00      	nop
 800482c:	20000df4 	.word	0x20000df4

08004830 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004830:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8004832:	4b0d      	ldr	r3, [pc, #52]	; (8004868 <HAL_PCD_MspInit+0x38>)
 8004834:	6802      	ldr	r2, [r0, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d112      	bne.n	8004860 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800483a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800483e:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004840:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8004842:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004846:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004848:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800484a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800484c:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800484e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004852:	9301      	str	r3, [sp, #4]
 8004854:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004856:	f7fc f869 	bl	800092c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800485a:	2014      	movs	r0, #20
 800485c:	f7fc f89a 	bl	8000994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004860:	b003      	add	sp, #12
 8004862:	f85d fb04 	ldr.w	pc, [sp], #4
 8004866:	bf00      	nop
 8004868:	40005c00 	.word	0x40005c00

0800486c <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800486c:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8004870:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004874:	f7fe bbe5 	b.w	8003042 <USBD_LL_SetupStage>

08004878 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004878:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800487c:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8004880:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004884:	f7fe bc0a 	b.w	800309c <USBD_LL_DataOutStage>

08004888 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004888:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800488c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800488e:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004892:	f7fe bc35 	b.w	8003100 <USBD_LL_DataInStage>

08004896 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004896:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800489a:	f7fe bcb1 	b.w	8003200 <USBD_LL_SOF>

0800489e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800489e:	b510      	push	{r4, lr}
 80048a0:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80048a2:	2101      	movs	r1, #1
 80048a4:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80048a8:	f7fe fc98 	bl	80031dc <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80048ac:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 80048b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80048b4:	f7fe bc73 	b.w	800319e <USBD_LL_Reset>

080048b8 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80048b8:	b510      	push	{r4, lr}
 80048ba:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80048bc:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80048c0:	f7fe fc8f 	bl	80031e2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80048c4:	69a3      	ldr	r3, [r4, #24]
 80048c6:	b123      	cbz	r3, 80048d2 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80048c8:	4a02      	ldr	r2, [pc, #8]	; (80048d4 <HAL_PCD_SuspendCallback+0x1c>)
 80048ca:	6913      	ldr	r3, [r2, #16]
 80048cc:	f043 0306 	orr.w	r3, r3, #6
 80048d0:	6113      	str	r3, [r2, #16]
 80048d2:	bd10      	pop	{r4, pc}
 80048d4:	e000ed00 	.word	0xe000ed00

080048d8 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80048d8:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80048dc:	f7fe bc8a 	b.w	80031f4 <USBD_LL_Resume>

080048e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80048e0:	b510      	push	{r4, lr}
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 80048e2:	2302      	movs	r3, #2
 80048e4:	2208      	movs	r2, #8
 80048e6:	f04f 0e03 	mov.w	lr, #3
{
 80048ea:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 80048ec:	491d      	ldr	r1, [pc, #116]	; (8004964 <USBD_LL_Init+0x84>)
  hpcd_USB_FS.pData = pdev;
 80048ee:	481e      	ldr	r0, [pc, #120]	; (8004968 <USBD_LL_Init+0x88>)
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 80048f0:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80048f4:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 80048f6:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 80048fa:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80048fe:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004900:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004902:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004904:	f7fc facd 	bl	8000ea2 <HAL_PCD_Init>
 8004908:	b120      	cbz	r0, 8004914 <USBD_LL_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 800490a:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800490e:	4817      	ldr	r0, [pc, #92]	; (800496c <USBD_LL_Init+0x8c>)
 8004910:	f7ff fd90 	bl	8004434 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004914:	2200      	movs	r2, #0
 8004916:	2318      	movs	r3, #24
 8004918:	4611      	mov	r1, r2
 800491a:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800491e:	f7fc fe91 	bl	8001644 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004922:	2358      	movs	r3, #88	; 0x58
 8004924:	2200      	movs	r2, #0
 8004926:	2180      	movs	r1, #128	; 0x80
 8004928:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800492c:	f7fc fe8a 	bl	8001644 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004930:	23c0      	movs	r3, #192	; 0xc0
 8004932:	2200      	movs	r2, #0
 8004934:	2181      	movs	r1, #129	; 0x81
 8004936:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800493a:	f7fc fe83 	bl	8001644 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800493e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004942:	2200      	movs	r2, #0
 8004944:	2101      	movs	r1, #1
 8004946:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800494a:	f7fc fe7b 	bl	8001644 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800494e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004952:	2200      	movs	r2, #0
 8004954:	2182      	movs	r1, #130	; 0x82
 8004956:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800495a:	f7fc fe73 	bl	8001644 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 800495e:	2000      	movs	r0, #0
 8004960:	bd10      	pop	{r4, pc}
 8004962:	bf00      	nop
 8004964:	40005c00 	.word	0x40005c00
 8004968:	200017e8 	.word	0x200017e8
 800496c:	080057d6 	.word	0x080057d6

08004970 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004970:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8004972:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004976:	f7fc fafd 	bl	8000f74 <HAL_PCD_Start>
 800497a:	2803      	cmp	r0, #3
 800497c:	bf9a      	itte	ls
 800497e:	4b02      	ldrls	r3, [pc, #8]	; (8004988 <USBD_LL_Start+0x18>)
 8004980:	5c18      	ldrbls	r0, [r3, r0]
 8004982:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004984:	bd08      	pop	{r3, pc}
 8004986:	bf00      	nop
 8004988:	080057d2 	.word	0x080057d2

0800498c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800498c:	b510      	push	{r4, lr}
 800498e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004990:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004994:	4613      	mov	r3, r2
 8004996:	4622      	mov	r2, r4
 8004998:	f7fc fb17 	bl	8000fca <HAL_PCD_EP_Open>
 800499c:	2803      	cmp	r0, #3
 800499e:	bf9a      	itte	ls
 80049a0:	4b01      	ldrls	r3, [pc, #4]	; (80049a8 <USBD_LL_OpenEP+0x1c>)
 80049a2:	5c18      	ldrbls	r0, [r3, r0]
 80049a4:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80049a6:	bd10      	pop	{r4, pc}
 80049a8:	080057d2 	.word	0x080057d2

080049ac <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80049ac:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80049ae:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80049b2:	f7fc fb2d 	bl	8001010 <HAL_PCD_EP_Close>
 80049b6:	2803      	cmp	r0, #3
 80049b8:	bf9a      	itte	ls
 80049ba:	4b02      	ldrls	r3, [pc, #8]	; (80049c4 <USBD_LL_CloseEP+0x18>)
 80049bc:	5c18      	ldrbls	r0, [r3, r0]
 80049be:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80049c0:	bd08      	pop	{r3, pc}
 80049c2:	bf00      	nop
 80049c4:	080057d2 	.word	0x080057d2

080049c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80049c8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80049ca:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80049ce:	f7fc fded 	bl	80015ac <HAL_PCD_EP_SetStall>
 80049d2:	2803      	cmp	r0, #3
 80049d4:	bf9a      	itte	ls
 80049d6:	4b02      	ldrls	r3, [pc, #8]	; (80049e0 <USBD_LL_StallEP+0x18>)
 80049d8:	5c18      	ldrbls	r0, [r3, r0]
 80049da:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80049dc:	bd08      	pop	{r3, pc}
 80049de:	bf00      	nop
 80049e0:	080057d2 	.word	0x080057d2

080049e4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80049e4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80049e6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80049ea:	f7fc fe08 	bl	80015fe <HAL_PCD_EP_ClrStall>
 80049ee:	2803      	cmp	r0, #3
 80049f0:	bf9a      	itte	ls
 80049f2:	4b02      	ldrls	r3, [pc, #8]	; (80049fc <USBD_LL_ClearStallEP+0x18>)
 80049f4:	5c18      	ldrbls	r0, [r3, r0]
 80049f6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80049f8:	bd08      	pop	{r3, pc}
 80049fa:	bf00      	nop
 80049fc:	080057d2 	.word	0x080057d2

08004a00 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8004a00:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004a02:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004a06:	bf45      	ittet	mi
 8004a08:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8004a0c:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004a10:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004a14:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004a18:	bf58      	it	pl
 8004a1a:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 8004a1e:	4770      	bx	lr

08004a20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004a20:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004a22:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004a26:	f7fc fabc 	bl	8000fa2 <HAL_PCD_SetAddress>
 8004a2a:	2803      	cmp	r0, #3
 8004a2c:	bf9a      	itte	ls
 8004a2e:	4b02      	ldrls	r3, [pc, #8]	; (8004a38 <USBD_LL_SetUSBAddress+0x18>)
 8004a30:	5c18      	ldrbls	r0, [r3, r0]
 8004a32:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004a34:	bd08      	pop	{r3, pc}
 8004a36:	bf00      	nop
 8004a38:	080057d2 	.word	0x080057d2

08004a3c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004a3c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004a3e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004a42:	f7fc fb25 	bl	8001090 <HAL_PCD_EP_Transmit>
 8004a46:	2803      	cmp	r0, #3
 8004a48:	bf9a      	itte	ls
 8004a4a:	4b02      	ldrls	r3, [pc, #8]	; (8004a54 <USBD_LL_Transmit+0x18>)
 8004a4c:	5c18      	ldrbls	r0, [r3, r0]
 8004a4e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8004a50:	bd08      	pop	{r3, pc}
 8004a52:	bf00      	nop
 8004a54:	080057d2 	.word	0x080057d2

08004a58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004a58:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004a5a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004a5e:	f7fc faf8 	bl	8001052 <HAL_PCD_EP_Receive>
 8004a62:	2803      	cmp	r0, #3
 8004a64:	bf9a      	itte	ls
 8004a66:	4b02      	ldrls	r3, [pc, #8]	; (8004a70 <USBD_LL_PrepareReceive+0x18>)
 8004a68:	5c18      	ldrbls	r0, [r3, r0]
 8004a6a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8004a6c:	bd08      	pop	{r3, pc}
 8004a6e:	bf00      	nop
 8004a70:	080057d2 	.word	0x080057d2

08004a74 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004a74:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004a76:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004a7a:	f7fc fb02 	bl	8001082 <HAL_PCD_EP_GetRxCount>
}
 8004a7e:	bd08      	pop	{r3, pc}

08004a80 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8004a80:	4800      	ldr	r0, [pc, #0]	; (8004a84 <USBD_static_malloc+0x4>)
 8004a82:	4770      	bx	lr
 8004a84:	200001e8 	.word	0x200001e8

08004a88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8004a88:	4770      	bx	lr

08004a8a <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8004a8a:	4770      	bx	lr

08004a8c <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8004a8c:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8004a8e:	4801      	ldr	r0, [pc, #4]	; (8004a94 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8004a90:	800b      	strh	r3, [r1, #0]
}
 8004a92:	4770      	bx	lr
 8004a94:	2000014c 	.word	0x2000014c

08004a98 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8004a98:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8004a9a:	4801      	ldr	r0, [pc, #4]	; (8004aa0 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8004a9c:	800b      	strh	r3, [r1, #0]
}
 8004a9e:	4770      	bx	lr
 8004aa0:	20000160 	.word	0x20000160

08004aa4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004aa4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004aa6:	4c04      	ldr	r4, [pc, #16]	; (8004ab8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004aa8:	460a      	mov	r2, r1
 8004aaa:	4804      	ldr	r0, [pc, #16]	; (8004abc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004aac:	4621      	mov	r1, r4
 8004aae:	f7fe fd48 	bl	8003542 <USBD_GetString>
  return USBD_StrDesc;
}
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	bd10      	pop	{r4, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20001c48 	.word	0x20001c48
 8004abc:	08005802 	.word	0x08005802

08004ac0 <USBD_FS_ProductStrDescriptor>:
{
 8004ac0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004ac2:	4c04      	ldr	r4, [pc, #16]	; (8004ad4 <USBD_FS_ProductStrDescriptor+0x14>)
 8004ac4:	460a      	mov	r2, r1
 8004ac6:	4804      	ldr	r0, [pc, #16]	; (8004ad8 <USBD_FS_ProductStrDescriptor+0x18>)
 8004ac8:	4621      	mov	r1, r4
 8004aca:	f7fe fd3a 	bl	8003542 <USBD_GetString>
}
 8004ace:	4620      	mov	r0, r4
 8004ad0:	bd10      	pop	{r4, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20001c48 	.word	0x20001c48
 8004ad8:	08005815 	.word	0x08005815

08004adc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004adc:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8004ade:	4c04      	ldr	r4, [pc, #16]	; (8004af0 <USBD_FS_SerialStrDescriptor+0x14>)
 8004ae0:	460a      	mov	r2, r1
 8004ae2:	4804      	ldr	r0, [pc, #16]	; (8004af4 <USBD_FS_SerialStrDescriptor+0x18>)
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	f7fe fd2c 	bl	8003542 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8004aea:	4620      	mov	r0, r4
 8004aec:	bd10      	pop	{r4, pc}
 8004aee:	bf00      	nop
 8004af0:	20001c48 	.word	0x20001c48
 8004af4:	0800582b 	.word	0x0800582b

08004af8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004af8:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004afa:	4c04      	ldr	r4, [pc, #16]	; (8004b0c <USBD_FS_ConfigStrDescriptor+0x14>)
 8004afc:	460a      	mov	r2, r1
 8004afe:	4804      	ldr	r0, [pc, #16]	; (8004b10 <USBD_FS_ConfigStrDescriptor+0x18>)
 8004b00:	4621      	mov	r1, r4
 8004b02:	f7fe fd1e 	bl	8003542 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8004b06:	4620      	mov	r0, r4
 8004b08:	bd10      	pop	{r4, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20001c48 	.word	0x20001c48
 8004b10:	080057e9 	.word	0x080057e9

08004b14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004b14:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004b16:	4c04      	ldr	r4, [pc, #16]	; (8004b28 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8004b18:	460a      	mov	r2, r1
 8004b1a:	4804      	ldr	r0, [pc, #16]	; (8004b2c <USBD_FS_InterfaceStrDescriptor+0x18>)
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	f7fe fd10 	bl	8003542 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8004b22:	4620      	mov	r0, r4
 8004b24:	bd10      	pop	{r4, pc}
 8004b26:	bf00      	nop
 8004b28:	20001c48 	.word	0x20001c48
 8004b2c:	080057f4 	.word	0x080057f4

08004b30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004b30:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004b32:	e003      	b.n	8004b3c <LoopCopyDataInit>

08004b34 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004b36:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004b38:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004b3a:	3104      	adds	r1, #4

08004b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004b3c:	480a      	ldr	r0, [pc, #40]	; (8004b68 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004b3e:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004b40:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004b42:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004b44:	d3f6      	bcc.n	8004b34 <CopyDataInit>
  ldr r2, =_sbss
 8004b46:	4a0a      	ldr	r2, [pc, #40]	; (8004b70 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004b48:	e002      	b.n	8004b50 <LoopFillZerobss>

08004b4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004b4a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004b4c:	f842 3b04 	str.w	r3, [r2], #4

08004b50 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004b50:	4b08      	ldr	r3, [pc, #32]	; (8004b74 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004b52:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004b54:	d3f9      	bcc.n	8004b4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004b56:	f7ff fd5b 	bl	8004610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b5a:	f000 f80f 	bl	8004b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b5e:	f7ff fa01 	bl	8003f64 <main>
  bx lr
 8004b62:	4770      	bx	lr
  ldr r3, =_sidata
 8004b64:	08005874 	.word	0x08005874
  ldr r0, =_sdata
 8004b68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004b6c:	200001c8 	.word	0x200001c8
  ldr r2, =_sbss
 8004b70:	200001c8 	.word	0x200001c8
  ldr r3, = _ebss
 8004b74:	20001e4c 	.word	0x20001e4c

08004b78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b78:	e7fe      	b.n	8004b78 <ADC1_2_IRQHandler>
	...

08004b7c <__libc_init_array>:
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	2500      	movs	r5, #0
 8004b80:	4e0c      	ldr	r6, [pc, #48]	; (8004bb4 <__libc_init_array+0x38>)
 8004b82:	4c0d      	ldr	r4, [pc, #52]	; (8004bb8 <__libc_init_array+0x3c>)
 8004b84:	1ba4      	subs	r4, r4, r6
 8004b86:	10a4      	asrs	r4, r4, #2
 8004b88:	42a5      	cmp	r5, r4
 8004b8a:	d109      	bne.n	8004ba0 <__libc_init_array+0x24>
 8004b8c:	f000 fc9c 	bl	80054c8 <_init>
 8004b90:	2500      	movs	r5, #0
 8004b92:	4e0a      	ldr	r6, [pc, #40]	; (8004bbc <__libc_init_array+0x40>)
 8004b94:	4c0a      	ldr	r4, [pc, #40]	; (8004bc0 <__libc_init_array+0x44>)
 8004b96:	1ba4      	subs	r4, r4, r6
 8004b98:	10a4      	asrs	r4, r4, #2
 8004b9a:	42a5      	cmp	r5, r4
 8004b9c:	d105      	bne.n	8004baa <__libc_init_array+0x2e>
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ba4:	4798      	blx	r3
 8004ba6:	3501      	adds	r5, #1
 8004ba8:	e7ee      	b.n	8004b88 <__libc_init_array+0xc>
 8004baa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bae:	4798      	blx	r3
 8004bb0:	3501      	adds	r5, #1
 8004bb2:	e7f2      	b.n	8004b9a <__libc_init_array+0x1e>
 8004bb4:	0800586c 	.word	0x0800586c
 8004bb8:	0800586c 	.word	0x0800586c
 8004bbc:	0800586c 	.word	0x0800586c
 8004bc0:	08005870 	.word	0x08005870

08004bc4 <sniprintf>:
 8004bc4:	b40c      	push	{r2, r3}
 8004bc6:	b530      	push	{r4, r5, lr}
 8004bc8:	4b17      	ldr	r3, [pc, #92]	; (8004c28 <sniprintf+0x64>)
 8004bca:	1e0c      	subs	r4, r1, #0
 8004bcc:	b09d      	sub	sp, #116	; 0x74
 8004bce:	681d      	ldr	r5, [r3, #0]
 8004bd0:	da08      	bge.n	8004be4 <sniprintf+0x20>
 8004bd2:	238b      	movs	r3, #139	; 0x8b
 8004bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd8:	602b      	str	r3, [r5, #0]
 8004bda:	b01d      	add	sp, #116	; 0x74
 8004bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004be0:	b002      	add	sp, #8
 8004be2:	4770      	bx	lr
 8004be4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004be8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004bec:	bf0c      	ite	eq
 8004bee:	4623      	moveq	r3, r4
 8004bf0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004bf4:	9304      	str	r3, [sp, #16]
 8004bf6:	9307      	str	r3, [sp, #28]
 8004bf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bfc:	9002      	str	r0, [sp, #8]
 8004bfe:	9006      	str	r0, [sp, #24]
 8004c00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c06:	ab21      	add	r3, sp, #132	; 0x84
 8004c08:	a902      	add	r1, sp, #8
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	9301      	str	r3, [sp, #4]
 8004c0e:	f000 f8a1 	bl	8004d54 <_svfiprintf_r>
 8004c12:	1c43      	adds	r3, r0, #1
 8004c14:	bfbc      	itt	lt
 8004c16:	238b      	movlt	r3, #139	; 0x8b
 8004c18:	602b      	strlt	r3, [r5, #0]
 8004c1a:	2c00      	cmp	r4, #0
 8004c1c:	d0dd      	beq.n	8004bda <sniprintf+0x16>
 8004c1e:	2200      	movs	r2, #0
 8004c20:	9b02      	ldr	r3, [sp, #8]
 8004c22:	701a      	strb	r2, [r3, #0]
 8004c24:	e7d9      	b.n	8004bda <sniprintf+0x16>
 8004c26:	bf00      	nop
 8004c28:	20000164 	.word	0x20000164

08004c2c <strcpy>:
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c32:	f803 2b01 	strb.w	r2, [r3], #1
 8004c36:	2a00      	cmp	r2, #0
 8004c38:	d1f9      	bne.n	8004c2e <strcpy+0x2>
 8004c3a:	4770      	bx	lr

08004c3c <strncpy>:
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	4604      	mov	r4, r0
 8004c40:	b902      	cbnz	r2, 8004c44 <strncpy+0x8>
 8004c42:	bd70      	pop	{r4, r5, r6, pc}
 8004c44:	4623      	mov	r3, r4
 8004c46:	f811 5b01 	ldrb.w	r5, [r1], #1
 8004c4a:	1e56      	subs	r6, r2, #1
 8004c4c:	f803 5b01 	strb.w	r5, [r3], #1
 8004c50:	b91d      	cbnz	r5, 8004c5a <strncpy+0x1e>
 8004c52:	4414      	add	r4, r2
 8004c54:	42a3      	cmp	r3, r4
 8004c56:	d103      	bne.n	8004c60 <strncpy+0x24>
 8004c58:	bd70      	pop	{r4, r5, r6, pc}
 8004c5a:	461c      	mov	r4, r3
 8004c5c:	4632      	mov	r2, r6
 8004c5e:	e7ef      	b.n	8004c40 <strncpy+0x4>
 8004c60:	f803 5b01 	strb.w	r5, [r3], #1
 8004c64:	e7f6      	b.n	8004c54 <strncpy+0x18>

08004c66 <strstr>:
 8004c66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c68:	7803      	ldrb	r3, [r0, #0]
 8004c6a:	b133      	cbz	r3, 8004c7a <strstr+0x14>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	4618      	mov	r0, r3
 8004c70:	1c5e      	adds	r6, r3, #1
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	b933      	cbnz	r3, 8004c84 <strstr+0x1e>
 8004c76:	4618      	mov	r0, r3
 8004c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c7a:	780b      	ldrb	r3, [r1, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	bf18      	it	ne
 8004c80:	2000      	movne	r0, #0
 8004c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c84:	1e4d      	subs	r5, r1, #1
 8004c86:	1e44      	subs	r4, r0, #1
 8004c88:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004c8c:	2a00      	cmp	r2, #0
 8004c8e:	d0f3      	beq.n	8004c78 <strstr+0x12>
 8004c90:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8004c94:	4633      	mov	r3, r6
 8004c96:	4297      	cmp	r7, r2
 8004c98:	d0f6      	beq.n	8004c88 <strstr+0x22>
 8004c9a:	e7e8      	b.n	8004c6e <strstr+0x8>

08004c9c <__ssputs_r>:
 8004c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca0:	688e      	ldr	r6, [r1, #8]
 8004ca2:	4682      	mov	sl, r0
 8004ca4:	429e      	cmp	r6, r3
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	4691      	mov	r9, r2
 8004caa:	4698      	mov	r8, r3
 8004cac:	d835      	bhi.n	8004d1a <__ssputs_r+0x7e>
 8004cae:	898a      	ldrh	r2, [r1, #12]
 8004cb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004cb4:	d031      	beq.n	8004d1a <__ssputs_r+0x7e>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	6825      	ldr	r5, [r4, #0]
 8004cba:	6909      	ldr	r1, [r1, #16]
 8004cbc:	1a6f      	subs	r7, r5, r1
 8004cbe:	6965      	ldr	r5, [r4, #20]
 8004cc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cc4:	fb95 f5f3 	sdiv	r5, r5, r3
 8004cc8:	f108 0301 	add.w	r3, r8, #1
 8004ccc:	443b      	add	r3, r7
 8004cce:	429d      	cmp	r5, r3
 8004cd0:	bf38      	it	cc
 8004cd2:	461d      	movcc	r5, r3
 8004cd4:	0553      	lsls	r3, r2, #21
 8004cd6:	d531      	bpl.n	8004d3c <__ssputs_r+0xa0>
 8004cd8:	4629      	mov	r1, r5
 8004cda:	f000 fb47 	bl	800536c <_malloc_r>
 8004cde:	4606      	mov	r6, r0
 8004ce0:	b950      	cbnz	r0, 8004cf8 <__ssputs_r+0x5c>
 8004ce2:	230c      	movs	r3, #12
 8004ce4:	f8ca 3000 	str.w	r3, [sl]
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	f04f 30ff 	mov.w	r0, #4294967295
 8004cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cf2:	81a3      	strh	r3, [r4, #12]
 8004cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf8:	463a      	mov	r2, r7
 8004cfa:	6921      	ldr	r1, [r4, #16]
 8004cfc:	f000 fac4 	bl	8005288 <memcpy>
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d0a:	81a3      	strh	r3, [r4, #12]
 8004d0c:	6126      	str	r6, [r4, #16]
 8004d0e:	443e      	add	r6, r7
 8004d10:	6026      	str	r6, [r4, #0]
 8004d12:	4646      	mov	r6, r8
 8004d14:	6165      	str	r5, [r4, #20]
 8004d16:	1bed      	subs	r5, r5, r7
 8004d18:	60a5      	str	r5, [r4, #8]
 8004d1a:	4546      	cmp	r6, r8
 8004d1c:	bf28      	it	cs
 8004d1e:	4646      	movcs	r6, r8
 8004d20:	4649      	mov	r1, r9
 8004d22:	4632      	mov	r2, r6
 8004d24:	6820      	ldr	r0, [r4, #0]
 8004d26:	f000 faba 	bl	800529e <memmove>
 8004d2a:	68a3      	ldr	r3, [r4, #8]
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	1b9b      	subs	r3, r3, r6
 8004d30:	60a3      	str	r3, [r4, #8]
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	441e      	add	r6, r3
 8004d36:	6026      	str	r6, [r4, #0]
 8004d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d3c:	462a      	mov	r2, r5
 8004d3e:	f000 fb73 	bl	8005428 <_realloc_r>
 8004d42:	4606      	mov	r6, r0
 8004d44:	2800      	cmp	r0, #0
 8004d46:	d1e1      	bne.n	8004d0c <__ssputs_r+0x70>
 8004d48:	6921      	ldr	r1, [r4, #16]
 8004d4a:	4650      	mov	r0, sl
 8004d4c:	f000 fac2 	bl	80052d4 <_free_r>
 8004d50:	e7c7      	b.n	8004ce2 <__ssputs_r+0x46>
	...

08004d54 <_svfiprintf_r>:
 8004d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d58:	b09d      	sub	sp, #116	; 0x74
 8004d5a:	9303      	str	r3, [sp, #12]
 8004d5c:	898b      	ldrh	r3, [r1, #12]
 8004d5e:	4680      	mov	r8, r0
 8004d60:	061c      	lsls	r4, r3, #24
 8004d62:	460d      	mov	r5, r1
 8004d64:	4616      	mov	r6, r2
 8004d66:	d50f      	bpl.n	8004d88 <_svfiprintf_r+0x34>
 8004d68:	690b      	ldr	r3, [r1, #16]
 8004d6a:	b96b      	cbnz	r3, 8004d88 <_svfiprintf_r+0x34>
 8004d6c:	2140      	movs	r1, #64	; 0x40
 8004d6e:	f000 fafd 	bl	800536c <_malloc_r>
 8004d72:	6028      	str	r0, [r5, #0]
 8004d74:	6128      	str	r0, [r5, #16]
 8004d76:	b928      	cbnz	r0, 8004d84 <_svfiprintf_r+0x30>
 8004d78:	230c      	movs	r3, #12
 8004d7a:	f8c8 3000 	str.w	r3, [r8]
 8004d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d82:	e0c4      	b.n	8004f0e <_svfiprintf_r+0x1ba>
 8004d84:	2340      	movs	r3, #64	; 0x40
 8004d86:	616b      	str	r3, [r5, #20]
 8004d88:	2300      	movs	r3, #0
 8004d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d8c:	2320      	movs	r3, #32
 8004d8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d92:	2330      	movs	r3, #48	; 0x30
 8004d94:	f04f 0b01 	mov.w	fp, #1
 8004d98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d9c:	4637      	mov	r7, r6
 8004d9e:	463c      	mov	r4, r7
 8004da0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d13c      	bne.n	8004e22 <_svfiprintf_r+0xce>
 8004da8:	ebb7 0a06 	subs.w	sl, r7, r6
 8004dac:	d00b      	beq.n	8004dc6 <_svfiprintf_r+0x72>
 8004dae:	4653      	mov	r3, sl
 8004db0:	4632      	mov	r2, r6
 8004db2:	4629      	mov	r1, r5
 8004db4:	4640      	mov	r0, r8
 8004db6:	f7ff ff71 	bl	8004c9c <__ssputs_r>
 8004dba:	3001      	adds	r0, #1
 8004dbc:	f000 80a2 	beq.w	8004f04 <_svfiprintf_r+0x1b0>
 8004dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dc2:	4453      	add	r3, sl
 8004dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc6:	783b      	ldrb	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 809b 	beq.w	8004f04 <_svfiprintf_r+0x1b0>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd4:	9304      	str	r3, [sp, #16]
 8004dd6:	9307      	str	r3, [sp, #28]
 8004dd8:	9205      	str	r2, [sp, #20]
 8004dda:	9306      	str	r3, [sp, #24]
 8004ddc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004de0:	931a      	str	r3, [sp, #104]	; 0x68
 8004de2:	2205      	movs	r2, #5
 8004de4:	7821      	ldrb	r1, [r4, #0]
 8004de6:	4850      	ldr	r0, [pc, #320]	; (8004f28 <_svfiprintf_r+0x1d4>)
 8004de8:	f000 fa40 	bl	800526c <memchr>
 8004dec:	1c67      	adds	r7, r4, #1
 8004dee:	9b04      	ldr	r3, [sp, #16]
 8004df0:	b9d8      	cbnz	r0, 8004e2a <_svfiprintf_r+0xd6>
 8004df2:	06d9      	lsls	r1, r3, #27
 8004df4:	bf44      	itt	mi
 8004df6:	2220      	movmi	r2, #32
 8004df8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004dfc:	071a      	lsls	r2, r3, #28
 8004dfe:	bf44      	itt	mi
 8004e00:	222b      	movmi	r2, #43	; 0x2b
 8004e02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e06:	7822      	ldrb	r2, [r4, #0]
 8004e08:	2a2a      	cmp	r2, #42	; 0x2a
 8004e0a:	d016      	beq.n	8004e3a <_svfiprintf_r+0xe6>
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	200a      	movs	r0, #10
 8004e10:	9a07      	ldr	r2, [sp, #28]
 8004e12:	4627      	mov	r7, r4
 8004e14:	783b      	ldrb	r3, [r7, #0]
 8004e16:	3401      	adds	r4, #1
 8004e18:	3b30      	subs	r3, #48	; 0x30
 8004e1a:	2b09      	cmp	r3, #9
 8004e1c:	d950      	bls.n	8004ec0 <_svfiprintf_r+0x16c>
 8004e1e:	b1c9      	cbz	r1, 8004e54 <_svfiprintf_r+0x100>
 8004e20:	e011      	b.n	8004e46 <_svfiprintf_r+0xf2>
 8004e22:	2b25      	cmp	r3, #37	; 0x25
 8004e24:	d0c0      	beq.n	8004da8 <_svfiprintf_r+0x54>
 8004e26:	4627      	mov	r7, r4
 8004e28:	e7b9      	b.n	8004d9e <_svfiprintf_r+0x4a>
 8004e2a:	4a3f      	ldr	r2, [pc, #252]	; (8004f28 <_svfiprintf_r+0x1d4>)
 8004e2c:	463c      	mov	r4, r7
 8004e2e:	1a80      	subs	r0, r0, r2
 8004e30:	fa0b f000 	lsl.w	r0, fp, r0
 8004e34:	4318      	orrs	r0, r3
 8004e36:	9004      	str	r0, [sp, #16]
 8004e38:	e7d3      	b.n	8004de2 <_svfiprintf_r+0x8e>
 8004e3a:	9a03      	ldr	r2, [sp, #12]
 8004e3c:	1d11      	adds	r1, r2, #4
 8004e3e:	6812      	ldr	r2, [r2, #0]
 8004e40:	9103      	str	r1, [sp, #12]
 8004e42:	2a00      	cmp	r2, #0
 8004e44:	db01      	blt.n	8004e4a <_svfiprintf_r+0xf6>
 8004e46:	9207      	str	r2, [sp, #28]
 8004e48:	e004      	b.n	8004e54 <_svfiprintf_r+0x100>
 8004e4a:	4252      	negs	r2, r2
 8004e4c:	f043 0302 	orr.w	r3, r3, #2
 8004e50:	9207      	str	r2, [sp, #28]
 8004e52:	9304      	str	r3, [sp, #16]
 8004e54:	783b      	ldrb	r3, [r7, #0]
 8004e56:	2b2e      	cmp	r3, #46	; 0x2e
 8004e58:	d10d      	bne.n	8004e76 <_svfiprintf_r+0x122>
 8004e5a:	787b      	ldrb	r3, [r7, #1]
 8004e5c:	1c79      	adds	r1, r7, #1
 8004e5e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e60:	d132      	bne.n	8004ec8 <_svfiprintf_r+0x174>
 8004e62:	9b03      	ldr	r3, [sp, #12]
 8004e64:	3702      	adds	r7, #2
 8004e66:	1d1a      	adds	r2, r3, #4
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	9203      	str	r2, [sp, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	bfb8      	it	lt
 8004e70:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e74:	9305      	str	r3, [sp, #20]
 8004e76:	4c2d      	ldr	r4, [pc, #180]	; (8004f2c <_svfiprintf_r+0x1d8>)
 8004e78:	2203      	movs	r2, #3
 8004e7a:	7839      	ldrb	r1, [r7, #0]
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f000 f9f5 	bl	800526c <memchr>
 8004e82:	b138      	cbz	r0, 8004e94 <_svfiprintf_r+0x140>
 8004e84:	2340      	movs	r3, #64	; 0x40
 8004e86:	1b00      	subs	r0, r0, r4
 8004e88:	fa03 f000 	lsl.w	r0, r3, r0
 8004e8c:	9b04      	ldr	r3, [sp, #16]
 8004e8e:	3701      	adds	r7, #1
 8004e90:	4303      	orrs	r3, r0
 8004e92:	9304      	str	r3, [sp, #16]
 8004e94:	7839      	ldrb	r1, [r7, #0]
 8004e96:	2206      	movs	r2, #6
 8004e98:	4825      	ldr	r0, [pc, #148]	; (8004f30 <_svfiprintf_r+0x1dc>)
 8004e9a:	1c7e      	adds	r6, r7, #1
 8004e9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ea0:	f000 f9e4 	bl	800526c <memchr>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d035      	beq.n	8004f14 <_svfiprintf_r+0x1c0>
 8004ea8:	4b22      	ldr	r3, [pc, #136]	; (8004f34 <_svfiprintf_r+0x1e0>)
 8004eaa:	b9fb      	cbnz	r3, 8004eec <_svfiprintf_r+0x198>
 8004eac:	9b03      	ldr	r3, [sp, #12]
 8004eae:	3307      	adds	r3, #7
 8004eb0:	f023 0307 	bic.w	r3, r3, #7
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	9303      	str	r3, [sp, #12]
 8004eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eba:	444b      	add	r3, r9
 8004ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8004ebe:	e76d      	b.n	8004d9c <_svfiprintf_r+0x48>
 8004ec0:	fb00 3202 	mla	r2, r0, r2, r3
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	e7a4      	b.n	8004e12 <_svfiprintf_r+0xbe>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	240a      	movs	r4, #10
 8004ecc:	4618      	mov	r0, r3
 8004ece:	9305      	str	r3, [sp, #20]
 8004ed0:	460f      	mov	r7, r1
 8004ed2:	783a      	ldrb	r2, [r7, #0]
 8004ed4:	3101      	adds	r1, #1
 8004ed6:	3a30      	subs	r2, #48	; 0x30
 8004ed8:	2a09      	cmp	r2, #9
 8004eda:	d903      	bls.n	8004ee4 <_svfiprintf_r+0x190>
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0ca      	beq.n	8004e76 <_svfiprintf_r+0x122>
 8004ee0:	9005      	str	r0, [sp, #20]
 8004ee2:	e7c8      	b.n	8004e76 <_svfiprintf_r+0x122>
 8004ee4:	fb04 2000 	mla	r0, r4, r0, r2
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e7f1      	b.n	8004ed0 <_svfiprintf_r+0x17c>
 8004eec:	ab03      	add	r3, sp, #12
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	462a      	mov	r2, r5
 8004ef2:	4b11      	ldr	r3, [pc, #68]	; (8004f38 <_svfiprintf_r+0x1e4>)
 8004ef4:	a904      	add	r1, sp, #16
 8004ef6:	4640      	mov	r0, r8
 8004ef8:	f3af 8000 	nop.w
 8004efc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004f00:	4681      	mov	r9, r0
 8004f02:	d1d9      	bne.n	8004eb8 <_svfiprintf_r+0x164>
 8004f04:	89ab      	ldrh	r3, [r5, #12]
 8004f06:	065b      	lsls	r3, r3, #25
 8004f08:	f53f af39 	bmi.w	8004d7e <_svfiprintf_r+0x2a>
 8004f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f0e:	b01d      	add	sp, #116	; 0x74
 8004f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f14:	ab03      	add	r3, sp, #12
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	462a      	mov	r2, r5
 8004f1a:	4b07      	ldr	r3, [pc, #28]	; (8004f38 <_svfiprintf_r+0x1e4>)
 8004f1c:	a904      	add	r1, sp, #16
 8004f1e:	4640      	mov	r0, r8
 8004f20:	f000 f884 	bl	800502c <_printf_i>
 8004f24:	e7ea      	b.n	8004efc <_svfiprintf_r+0x1a8>
 8004f26:	bf00      	nop
 8004f28:	08005838 	.word	0x08005838
 8004f2c:	0800583e 	.word	0x0800583e
 8004f30:	08005842 	.word	0x08005842
 8004f34:	00000000 	.word	0x00000000
 8004f38:	08004c9d 	.word	0x08004c9d

08004f3c <_printf_common>:
 8004f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f40:	4691      	mov	r9, r2
 8004f42:	461f      	mov	r7, r3
 8004f44:	688a      	ldr	r2, [r1, #8]
 8004f46:	690b      	ldr	r3, [r1, #16]
 8004f48:	4606      	mov	r6, r0
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	bfb8      	it	lt
 8004f4e:	4613      	movlt	r3, r2
 8004f50:	f8c9 3000 	str.w	r3, [r9]
 8004f54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f58:	460c      	mov	r4, r1
 8004f5a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f5e:	b112      	cbz	r2, 8004f66 <_printf_common+0x2a>
 8004f60:	3301      	adds	r3, #1
 8004f62:	f8c9 3000 	str.w	r3, [r9]
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	0699      	lsls	r1, r3, #26
 8004f6a:	bf42      	ittt	mi
 8004f6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f70:	3302      	addmi	r3, #2
 8004f72:	f8c9 3000 	strmi.w	r3, [r9]
 8004f76:	6825      	ldr	r5, [r4, #0]
 8004f78:	f015 0506 	ands.w	r5, r5, #6
 8004f7c:	d107      	bne.n	8004f8e <_printf_common+0x52>
 8004f7e:	f104 0a19 	add.w	sl, r4, #25
 8004f82:	68e3      	ldr	r3, [r4, #12]
 8004f84:	f8d9 2000 	ldr.w	r2, [r9]
 8004f88:	1a9b      	subs	r3, r3, r2
 8004f8a:	429d      	cmp	r5, r3
 8004f8c:	db2a      	blt.n	8004fe4 <_printf_common+0xa8>
 8004f8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f92:	6822      	ldr	r2, [r4, #0]
 8004f94:	3300      	adds	r3, #0
 8004f96:	bf18      	it	ne
 8004f98:	2301      	movne	r3, #1
 8004f9a:	0692      	lsls	r2, r2, #26
 8004f9c:	d42f      	bmi.n	8004ffe <_printf_common+0xc2>
 8004f9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fa2:	4639      	mov	r1, r7
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	47c0      	blx	r8
 8004fa8:	3001      	adds	r0, #1
 8004faa:	d022      	beq.n	8004ff2 <_printf_common+0xb6>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	68e5      	ldr	r5, [r4, #12]
 8004fb0:	f003 0306 	and.w	r3, r3, #6
 8004fb4:	2b04      	cmp	r3, #4
 8004fb6:	bf18      	it	ne
 8004fb8:	2500      	movne	r5, #0
 8004fba:	f8d9 2000 	ldr.w	r2, [r9]
 8004fbe:	f04f 0900 	mov.w	r9, #0
 8004fc2:	bf08      	it	eq
 8004fc4:	1aad      	subeq	r5, r5, r2
 8004fc6:	68a3      	ldr	r3, [r4, #8]
 8004fc8:	6922      	ldr	r2, [r4, #16]
 8004fca:	bf08      	it	eq
 8004fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	bfc4      	itt	gt
 8004fd4:	1a9b      	subgt	r3, r3, r2
 8004fd6:	18ed      	addgt	r5, r5, r3
 8004fd8:	341a      	adds	r4, #26
 8004fda:	454d      	cmp	r5, r9
 8004fdc:	d11b      	bne.n	8005016 <_printf_common+0xda>
 8004fde:	2000      	movs	r0, #0
 8004fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	4652      	mov	r2, sl
 8004fe8:	4639      	mov	r1, r7
 8004fea:	4630      	mov	r0, r6
 8004fec:	47c0      	blx	r8
 8004fee:	3001      	adds	r0, #1
 8004ff0:	d103      	bne.n	8004ffa <_printf_common+0xbe>
 8004ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ffa:	3501      	adds	r5, #1
 8004ffc:	e7c1      	b.n	8004f82 <_printf_common+0x46>
 8004ffe:	2030      	movs	r0, #48	; 0x30
 8005000:	18e1      	adds	r1, r4, r3
 8005002:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800500c:	4422      	add	r2, r4
 800500e:	3302      	adds	r3, #2
 8005010:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005014:	e7c3      	b.n	8004f9e <_printf_common+0x62>
 8005016:	2301      	movs	r3, #1
 8005018:	4622      	mov	r2, r4
 800501a:	4639      	mov	r1, r7
 800501c:	4630      	mov	r0, r6
 800501e:	47c0      	blx	r8
 8005020:	3001      	adds	r0, #1
 8005022:	d0e6      	beq.n	8004ff2 <_printf_common+0xb6>
 8005024:	f109 0901 	add.w	r9, r9, #1
 8005028:	e7d7      	b.n	8004fda <_printf_common+0x9e>
	...

0800502c <_printf_i>:
 800502c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005030:	4617      	mov	r7, r2
 8005032:	7e0a      	ldrb	r2, [r1, #24]
 8005034:	b085      	sub	sp, #20
 8005036:	2a6e      	cmp	r2, #110	; 0x6e
 8005038:	4698      	mov	r8, r3
 800503a:	4606      	mov	r6, r0
 800503c:	460c      	mov	r4, r1
 800503e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005040:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005044:	f000 80bc 	beq.w	80051c0 <_printf_i+0x194>
 8005048:	d81a      	bhi.n	8005080 <_printf_i+0x54>
 800504a:	2a63      	cmp	r2, #99	; 0x63
 800504c:	d02e      	beq.n	80050ac <_printf_i+0x80>
 800504e:	d80a      	bhi.n	8005066 <_printf_i+0x3a>
 8005050:	2a00      	cmp	r2, #0
 8005052:	f000 80c8 	beq.w	80051e6 <_printf_i+0x1ba>
 8005056:	2a58      	cmp	r2, #88	; 0x58
 8005058:	f000 808a 	beq.w	8005170 <_printf_i+0x144>
 800505c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005060:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005064:	e02a      	b.n	80050bc <_printf_i+0x90>
 8005066:	2a64      	cmp	r2, #100	; 0x64
 8005068:	d001      	beq.n	800506e <_printf_i+0x42>
 800506a:	2a69      	cmp	r2, #105	; 0x69
 800506c:	d1f6      	bne.n	800505c <_printf_i+0x30>
 800506e:	6821      	ldr	r1, [r4, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005076:	d023      	beq.n	80050c0 <_printf_i+0x94>
 8005078:	1d11      	adds	r1, r2, #4
 800507a:	6019      	str	r1, [r3, #0]
 800507c:	6813      	ldr	r3, [r2, #0]
 800507e:	e027      	b.n	80050d0 <_printf_i+0xa4>
 8005080:	2a73      	cmp	r2, #115	; 0x73
 8005082:	f000 80b4 	beq.w	80051ee <_printf_i+0x1c2>
 8005086:	d808      	bhi.n	800509a <_printf_i+0x6e>
 8005088:	2a6f      	cmp	r2, #111	; 0x6f
 800508a:	d02a      	beq.n	80050e2 <_printf_i+0xb6>
 800508c:	2a70      	cmp	r2, #112	; 0x70
 800508e:	d1e5      	bne.n	800505c <_printf_i+0x30>
 8005090:	680a      	ldr	r2, [r1, #0]
 8005092:	f042 0220 	orr.w	r2, r2, #32
 8005096:	600a      	str	r2, [r1, #0]
 8005098:	e003      	b.n	80050a2 <_printf_i+0x76>
 800509a:	2a75      	cmp	r2, #117	; 0x75
 800509c:	d021      	beq.n	80050e2 <_printf_i+0xb6>
 800509e:	2a78      	cmp	r2, #120	; 0x78
 80050a0:	d1dc      	bne.n	800505c <_printf_i+0x30>
 80050a2:	2278      	movs	r2, #120	; 0x78
 80050a4:	496f      	ldr	r1, [pc, #444]	; (8005264 <_printf_i+0x238>)
 80050a6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80050aa:	e064      	b.n	8005176 <_printf_i+0x14a>
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80050b2:	1d11      	adds	r1, r2, #4
 80050b4:	6019      	str	r1, [r3, #0]
 80050b6:	6813      	ldr	r3, [r2, #0]
 80050b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050bc:	2301      	movs	r3, #1
 80050be:	e0a3      	b.n	8005208 <_printf_i+0x1dc>
 80050c0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80050c4:	f102 0104 	add.w	r1, r2, #4
 80050c8:	6019      	str	r1, [r3, #0]
 80050ca:	d0d7      	beq.n	800507c <_printf_i+0x50>
 80050cc:	f9b2 3000 	ldrsh.w	r3, [r2]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	da03      	bge.n	80050dc <_printf_i+0xb0>
 80050d4:	222d      	movs	r2, #45	; 0x2d
 80050d6:	425b      	negs	r3, r3
 80050d8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80050dc:	4962      	ldr	r1, [pc, #392]	; (8005268 <_printf_i+0x23c>)
 80050de:	220a      	movs	r2, #10
 80050e0:	e017      	b.n	8005112 <_printf_i+0xe6>
 80050e2:	6820      	ldr	r0, [r4, #0]
 80050e4:	6819      	ldr	r1, [r3, #0]
 80050e6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80050ea:	d003      	beq.n	80050f4 <_printf_i+0xc8>
 80050ec:	1d08      	adds	r0, r1, #4
 80050ee:	6018      	str	r0, [r3, #0]
 80050f0:	680b      	ldr	r3, [r1, #0]
 80050f2:	e006      	b.n	8005102 <_printf_i+0xd6>
 80050f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050f8:	f101 0004 	add.w	r0, r1, #4
 80050fc:	6018      	str	r0, [r3, #0]
 80050fe:	d0f7      	beq.n	80050f0 <_printf_i+0xc4>
 8005100:	880b      	ldrh	r3, [r1, #0]
 8005102:	2a6f      	cmp	r2, #111	; 0x6f
 8005104:	bf14      	ite	ne
 8005106:	220a      	movne	r2, #10
 8005108:	2208      	moveq	r2, #8
 800510a:	4957      	ldr	r1, [pc, #348]	; (8005268 <_printf_i+0x23c>)
 800510c:	2000      	movs	r0, #0
 800510e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005112:	6865      	ldr	r5, [r4, #4]
 8005114:	2d00      	cmp	r5, #0
 8005116:	60a5      	str	r5, [r4, #8]
 8005118:	f2c0 809c 	blt.w	8005254 <_printf_i+0x228>
 800511c:	6820      	ldr	r0, [r4, #0]
 800511e:	f020 0004 	bic.w	r0, r0, #4
 8005122:	6020      	str	r0, [r4, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d13f      	bne.n	80051a8 <_printf_i+0x17c>
 8005128:	2d00      	cmp	r5, #0
 800512a:	f040 8095 	bne.w	8005258 <_printf_i+0x22c>
 800512e:	4675      	mov	r5, lr
 8005130:	2a08      	cmp	r2, #8
 8005132:	d10b      	bne.n	800514c <_printf_i+0x120>
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	07da      	lsls	r2, r3, #31
 8005138:	d508      	bpl.n	800514c <_printf_i+0x120>
 800513a:	6923      	ldr	r3, [r4, #16]
 800513c:	6862      	ldr	r2, [r4, #4]
 800513e:	429a      	cmp	r2, r3
 8005140:	bfde      	ittt	le
 8005142:	2330      	movle	r3, #48	; 0x30
 8005144:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005148:	f105 35ff 	addle.w	r5, r5, #4294967295
 800514c:	ebae 0305 	sub.w	r3, lr, r5
 8005150:	6123      	str	r3, [r4, #16]
 8005152:	f8cd 8000 	str.w	r8, [sp]
 8005156:	463b      	mov	r3, r7
 8005158:	aa03      	add	r2, sp, #12
 800515a:	4621      	mov	r1, r4
 800515c:	4630      	mov	r0, r6
 800515e:	f7ff feed 	bl	8004f3c <_printf_common>
 8005162:	3001      	adds	r0, #1
 8005164:	d155      	bne.n	8005212 <_printf_i+0x1e6>
 8005166:	f04f 30ff 	mov.w	r0, #4294967295
 800516a:	b005      	add	sp, #20
 800516c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005170:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005174:	493c      	ldr	r1, [pc, #240]	; (8005268 <_printf_i+0x23c>)
 8005176:	6822      	ldr	r2, [r4, #0]
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800517e:	f100 0504 	add.w	r5, r0, #4
 8005182:	601d      	str	r5, [r3, #0]
 8005184:	d001      	beq.n	800518a <_printf_i+0x15e>
 8005186:	6803      	ldr	r3, [r0, #0]
 8005188:	e002      	b.n	8005190 <_printf_i+0x164>
 800518a:	0655      	lsls	r5, r2, #25
 800518c:	d5fb      	bpl.n	8005186 <_printf_i+0x15a>
 800518e:	8803      	ldrh	r3, [r0, #0]
 8005190:	07d0      	lsls	r0, r2, #31
 8005192:	bf44      	itt	mi
 8005194:	f042 0220 	orrmi.w	r2, r2, #32
 8005198:	6022      	strmi	r2, [r4, #0]
 800519a:	b91b      	cbnz	r3, 80051a4 <_printf_i+0x178>
 800519c:	6822      	ldr	r2, [r4, #0]
 800519e:	f022 0220 	bic.w	r2, r2, #32
 80051a2:	6022      	str	r2, [r4, #0]
 80051a4:	2210      	movs	r2, #16
 80051a6:	e7b1      	b.n	800510c <_printf_i+0xe0>
 80051a8:	4675      	mov	r5, lr
 80051aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80051ae:	fb02 3310 	mls	r3, r2, r0, r3
 80051b2:	5ccb      	ldrb	r3, [r1, r3]
 80051b4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80051b8:	4603      	mov	r3, r0
 80051ba:	2800      	cmp	r0, #0
 80051bc:	d1f5      	bne.n	80051aa <_printf_i+0x17e>
 80051be:	e7b7      	b.n	8005130 <_printf_i+0x104>
 80051c0:	6808      	ldr	r0, [r1, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80051c8:	6949      	ldr	r1, [r1, #20]
 80051ca:	d004      	beq.n	80051d6 <_printf_i+0x1aa>
 80051cc:	1d10      	adds	r0, r2, #4
 80051ce:	6018      	str	r0, [r3, #0]
 80051d0:	6813      	ldr	r3, [r2, #0]
 80051d2:	6019      	str	r1, [r3, #0]
 80051d4:	e007      	b.n	80051e6 <_printf_i+0x1ba>
 80051d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051da:	f102 0004 	add.w	r0, r2, #4
 80051de:	6018      	str	r0, [r3, #0]
 80051e0:	6813      	ldr	r3, [r2, #0]
 80051e2:	d0f6      	beq.n	80051d2 <_printf_i+0x1a6>
 80051e4:	8019      	strh	r1, [r3, #0]
 80051e6:	2300      	movs	r3, #0
 80051e8:	4675      	mov	r5, lr
 80051ea:	6123      	str	r3, [r4, #16]
 80051ec:	e7b1      	b.n	8005152 <_printf_i+0x126>
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	1d11      	adds	r1, r2, #4
 80051f2:	6019      	str	r1, [r3, #0]
 80051f4:	6815      	ldr	r5, [r2, #0]
 80051f6:	2100      	movs	r1, #0
 80051f8:	6862      	ldr	r2, [r4, #4]
 80051fa:	4628      	mov	r0, r5
 80051fc:	f000 f836 	bl	800526c <memchr>
 8005200:	b108      	cbz	r0, 8005206 <_printf_i+0x1da>
 8005202:	1b40      	subs	r0, r0, r5
 8005204:	6060      	str	r0, [r4, #4]
 8005206:	6863      	ldr	r3, [r4, #4]
 8005208:	6123      	str	r3, [r4, #16]
 800520a:	2300      	movs	r3, #0
 800520c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005210:	e79f      	b.n	8005152 <_printf_i+0x126>
 8005212:	6923      	ldr	r3, [r4, #16]
 8005214:	462a      	mov	r2, r5
 8005216:	4639      	mov	r1, r7
 8005218:	4630      	mov	r0, r6
 800521a:	47c0      	blx	r8
 800521c:	3001      	adds	r0, #1
 800521e:	d0a2      	beq.n	8005166 <_printf_i+0x13a>
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	079b      	lsls	r3, r3, #30
 8005224:	d507      	bpl.n	8005236 <_printf_i+0x20a>
 8005226:	2500      	movs	r5, #0
 8005228:	f104 0919 	add.w	r9, r4, #25
 800522c:	68e3      	ldr	r3, [r4, #12]
 800522e:	9a03      	ldr	r2, [sp, #12]
 8005230:	1a9b      	subs	r3, r3, r2
 8005232:	429d      	cmp	r5, r3
 8005234:	db05      	blt.n	8005242 <_printf_i+0x216>
 8005236:	68e0      	ldr	r0, [r4, #12]
 8005238:	9b03      	ldr	r3, [sp, #12]
 800523a:	4298      	cmp	r0, r3
 800523c:	bfb8      	it	lt
 800523e:	4618      	movlt	r0, r3
 8005240:	e793      	b.n	800516a <_printf_i+0x13e>
 8005242:	2301      	movs	r3, #1
 8005244:	464a      	mov	r2, r9
 8005246:	4639      	mov	r1, r7
 8005248:	4630      	mov	r0, r6
 800524a:	47c0      	blx	r8
 800524c:	3001      	adds	r0, #1
 800524e:	d08a      	beq.n	8005166 <_printf_i+0x13a>
 8005250:	3501      	adds	r5, #1
 8005252:	e7eb      	b.n	800522c <_printf_i+0x200>
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1a7      	bne.n	80051a8 <_printf_i+0x17c>
 8005258:	780b      	ldrb	r3, [r1, #0]
 800525a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800525e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005262:	e765      	b.n	8005130 <_printf_i+0x104>
 8005264:	0800585a 	.word	0x0800585a
 8005268:	08005849 	.word	0x08005849

0800526c <memchr>:
 800526c:	b510      	push	{r4, lr}
 800526e:	b2c9      	uxtb	r1, r1
 8005270:	4402      	add	r2, r0
 8005272:	4290      	cmp	r0, r2
 8005274:	4603      	mov	r3, r0
 8005276:	d101      	bne.n	800527c <memchr+0x10>
 8005278:	2000      	movs	r0, #0
 800527a:	bd10      	pop	{r4, pc}
 800527c:	781c      	ldrb	r4, [r3, #0]
 800527e:	3001      	adds	r0, #1
 8005280:	428c      	cmp	r4, r1
 8005282:	d1f6      	bne.n	8005272 <memchr+0x6>
 8005284:	4618      	mov	r0, r3
 8005286:	bd10      	pop	{r4, pc}

08005288 <memcpy>:
 8005288:	b510      	push	{r4, lr}
 800528a:	1e43      	subs	r3, r0, #1
 800528c:	440a      	add	r2, r1
 800528e:	4291      	cmp	r1, r2
 8005290:	d100      	bne.n	8005294 <memcpy+0xc>
 8005292:	bd10      	pop	{r4, pc}
 8005294:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005298:	f803 4f01 	strb.w	r4, [r3, #1]!
 800529c:	e7f7      	b.n	800528e <memcpy+0x6>

0800529e <memmove>:
 800529e:	4288      	cmp	r0, r1
 80052a0:	b510      	push	{r4, lr}
 80052a2:	eb01 0302 	add.w	r3, r1, r2
 80052a6:	d803      	bhi.n	80052b0 <memmove+0x12>
 80052a8:	1e42      	subs	r2, r0, #1
 80052aa:	4299      	cmp	r1, r3
 80052ac:	d10c      	bne.n	80052c8 <memmove+0x2a>
 80052ae:	bd10      	pop	{r4, pc}
 80052b0:	4298      	cmp	r0, r3
 80052b2:	d2f9      	bcs.n	80052a8 <memmove+0xa>
 80052b4:	1881      	adds	r1, r0, r2
 80052b6:	1ad2      	subs	r2, r2, r3
 80052b8:	42d3      	cmn	r3, r2
 80052ba:	d100      	bne.n	80052be <memmove+0x20>
 80052bc:	bd10      	pop	{r4, pc}
 80052be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052c2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80052c6:	e7f7      	b.n	80052b8 <memmove+0x1a>
 80052c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80052d0:	e7eb      	b.n	80052aa <memmove+0xc>
	...

080052d4 <_free_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	4605      	mov	r5, r0
 80052d8:	2900      	cmp	r1, #0
 80052da:	d043      	beq.n	8005364 <_free_r+0x90>
 80052dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052e0:	1f0c      	subs	r4, r1, #4
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	bfb8      	it	lt
 80052e6:	18e4      	addlt	r4, r4, r3
 80052e8:	f000 f8d4 	bl	8005494 <__malloc_lock>
 80052ec:	4a1e      	ldr	r2, [pc, #120]	; (8005368 <_free_r+0x94>)
 80052ee:	6813      	ldr	r3, [r2, #0]
 80052f0:	4610      	mov	r0, r2
 80052f2:	b933      	cbnz	r3, 8005302 <_free_r+0x2e>
 80052f4:	6063      	str	r3, [r4, #4]
 80052f6:	6014      	str	r4, [r2, #0]
 80052f8:	4628      	mov	r0, r5
 80052fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052fe:	f000 b8ca 	b.w	8005496 <__malloc_unlock>
 8005302:	42a3      	cmp	r3, r4
 8005304:	d90b      	bls.n	800531e <_free_r+0x4a>
 8005306:	6821      	ldr	r1, [r4, #0]
 8005308:	1862      	adds	r2, r4, r1
 800530a:	4293      	cmp	r3, r2
 800530c:	bf01      	itttt	eq
 800530e:	681a      	ldreq	r2, [r3, #0]
 8005310:	685b      	ldreq	r3, [r3, #4]
 8005312:	1852      	addeq	r2, r2, r1
 8005314:	6022      	streq	r2, [r4, #0]
 8005316:	6063      	str	r3, [r4, #4]
 8005318:	6004      	str	r4, [r0, #0]
 800531a:	e7ed      	b.n	80052f8 <_free_r+0x24>
 800531c:	4613      	mov	r3, r2
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	b10a      	cbz	r2, 8005326 <_free_r+0x52>
 8005322:	42a2      	cmp	r2, r4
 8005324:	d9fa      	bls.n	800531c <_free_r+0x48>
 8005326:	6819      	ldr	r1, [r3, #0]
 8005328:	1858      	adds	r0, r3, r1
 800532a:	42a0      	cmp	r0, r4
 800532c:	d10b      	bne.n	8005346 <_free_r+0x72>
 800532e:	6820      	ldr	r0, [r4, #0]
 8005330:	4401      	add	r1, r0
 8005332:	1858      	adds	r0, r3, r1
 8005334:	4282      	cmp	r2, r0
 8005336:	6019      	str	r1, [r3, #0]
 8005338:	d1de      	bne.n	80052f8 <_free_r+0x24>
 800533a:	6810      	ldr	r0, [r2, #0]
 800533c:	6852      	ldr	r2, [r2, #4]
 800533e:	4401      	add	r1, r0
 8005340:	6019      	str	r1, [r3, #0]
 8005342:	605a      	str	r2, [r3, #4]
 8005344:	e7d8      	b.n	80052f8 <_free_r+0x24>
 8005346:	d902      	bls.n	800534e <_free_r+0x7a>
 8005348:	230c      	movs	r3, #12
 800534a:	602b      	str	r3, [r5, #0]
 800534c:	e7d4      	b.n	80052f8 <_free_r+0x24>
 800534e:	6820      	ldr	r0, [r4, #0]
 8005350:	1821      	adds	r1, r4, r0
 8005352:	428a      	cmp	r2, r1
 8005354:	bf01      	itttt	eq
 8005356:	6811      	ldreq	r1, [r2, #0]
 8005358:	6852      	ldreq	r2, [r2, #4]
 800535a:	1809      	addeq	r1, r1, r0
 800535c:	6021      	streq	r1, [r4, #0]
 800535e:	6062      	str	r2, [r4, #4]
 8005360:	605c      	str	r4, [r3, #4]
 8005362:	e7c9      	b.n	80052f8 <_free_r+0x24>
 8005364:	bd38      	pop	{r3, r4, r5, pc}
 8005366:	bf00      	nop
 8005368:	20000408 	.word	0x20000408

0800536c <_malloc_r>:
 800536c:	b570      	push	{r4, r5, r6, lr}
 800536e:	1ccd      	adds	r5, r1, #3
 8005370:	f025 0503 	bic.w	r5, r5, #3
 8005374:	3508      	adds	r5, #8
 8005376:	2d0c      	cmp	r5, #12
 8005378:	bf38      	it	cc
 800537a:	250c      	movcc	r5, #12
 800537c:	2d00      	cmp	r5, #0
 800537e:	4606      	mov	r6, r0
 8005380:	db01      	blt.n	8005386 <_malloc_r+0x1a>
 8005382:	42a9      	cmp	r1, r5
 8005384:	d903      	bls.n	800538e <_malloc_r+0x22>
 8005386:	230c      	movs	r3, #12
 8005388:	6033      	str	r3, [r6, #0]
 800538a:	2000      	movs	r0, #0
 800538c:	bd70      	pop	{r4, r5, r6, pc}
 800538e:	f000 f881 	bl	8005494 <__malloc_lock>
 8005392:	4a23      	ldr	r2, [pc, #140]	; (8005420 <_malloc_r+0xb4>)
 8005394:	6814      	ldr	r4, [r2, #0]
 8005396:	4621      	mov	r1, r4
 8005398:	b991      	cbnz	r1, 80053c0 <_malloc_r+0x54>
 800539a:	4c22      	ldr	r4, [pc, #136]	; (8005424 <_malloc_r+0xb8>)
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	b91b      	cbnz	r3, 80053a8 <_malloc_r+0x3c>
 80053a0:	4630      	mov	r0, r6
 80053a2:	f000 f867 	bl	8005474 <_sbrk_r>
 80053a6:	6020      	str	r0, [r4, #0]
 80053a8:	4629      	mov	r1, r5
 80053aa:	4630      	mov	r0, r6
 80053ac:	f000 f862 	bl	8005474 <_sbrk_r>
 80053b0:	1c43      	adds	r3, r0, #1
 80053b2:	d126      	bne.n	8005402 <_malloc_r+0x96>
 80053b4:	230c      	movs	r3, #12
 80053b6:	4630      	mov	r0, r6
 80053b8:	6033      	str	r3, [r6, #0]
 80053ba:	f000 f86c 	bl	8005496 <__malloc_unlock>
 80053be:	e7e4      	b.n	800538a <_malloc_r+0x1e>
 80053c0:	680b      	ldr	r3, [r1, #0]
 80053c2:	1b5b      	subs	r3, r3, r5
 80053c4:	d41a      	bmi.n	80053fc <_malloc_r+0x90>
 80053c6:	2b0b      	cmp	r3, #11
 80053c8:	d90f      	bls.n	80053ea <_malloc_r+0x7e>
 80053ca:	600b      	str	r3, [r1, #0]
 80053cc:	18cc      	adds	r4, r1, r3
 80053ce:	50cd      	str	r5, [r1, r3]
 80053d0:	4630      	mov	r0, r6
 80053d2:	f000 f860 	bl	8005496 <__malloc_unlock>
 80053d6:	f104 000b 	add.w	r0, r4, #11
 80053da:	1d23      	adds	r3, r4, #4
 80053dc:	f020 0007 	bic.w	r0, r0, #7
 80053e0:	1ac3      	subs	r3, r0, r3
 80053e2:	d01b      	beq.n	800541c <_malloc_r+0xb0>
 80053e4:	425a      	negs	r2, r3
 80053e6:	50e2      	str	r2, [r4, r3]
 80053e8:	bd70      	pop	{r4, r5, r6, pc}
 80053ea:	428c      	cmp	r4, r1
 80053ec:	bf0b      	itete	eq
 80053ee:	6863      	ldreq	r3, [r4, #4]
 80053f0:	684b      	ldrne	r3, [r1, #4]
 80053f2:	6013      	streq	r3, [r2, #0]
 80053f4:	6063      	strne	r3, [r4, #4]
 80053f6:	bf18      	it	ne
 80053f8:	460c      	movne	r4, r1
 80053fa:	e7e9      	b.n	80053d0 <_malloc_r+0x64>
 80053fc:	460c      	mov	r4, r1
 80053fe:	6849      	ldr	r1, [r1, #4]
 8005400:	e7ca      	b.n	8005398 <_malloc_r+0x2c>
 8005402:	1cc4      	adds	r4, r0, #3
 8005404:	f024 0403 	bic.w	r4, r4, #3
 8005408:	42a0      	cmp	r0, r4
 800540a:	d005      	beq.n	8005418 <_malloc_r+0xac>
 800540c:	1a21      	subs	r1, r4, r0
 800540e:	4630      	mov	r0, r6
 8005410:	f000 f830 	bl	8005474 <_sbrk_r>
 8005414:	3001      	adds	r0, #1
 8005416:	d0cd      	beq.n	80053b4 <_malloc_r+0x48>
 8005418:	6025      	str	r5, [r4, #0]
 800541a:	e7d9      	b.n	80053d0 <_malloc_r+0x64>
 800541c:	bd70      	pop	{r4, r5, r6, pc}
 800541e:	bf00      	nop
 8005420:	20000408 	.word	0x20000408
 8005424:	2000040c 	.word	0x2000040c

08005428 <_realloc_r>:
 8005428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542a:	4607      	mov	r7, r0
 800542c:	4614      	mov	r4, r2
 800542e:	460e      	mov	r6, r1
 8005430:	b921      	cbnz	r1, 800543c <_realloc_r+0x14>
 8005432:	4611      	mov	r1, r2
 8005434:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005438:	f7ff bf98 	b.w	800536c <_malloc_r>
 800543c:	b922      	cbnz	r2, 8005448 <_realloc_r+0x20>
 800543e:	f7ff ff49 	bl	80052d4 <_free_r>
 8005442:	4625      	mov	r5, r4
 8005444:	4628      	mov	r0, r5
 8005446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005448:	f000 f826 	bl	8005498 <_malloc_usable_size_r>
 800544c:	4284      	cmp	r4, r0
 800544e:	d90f      	bls.n	8005470 <_realloc_r+0x48>
 8005450:	4621      	mov	r1, r4
 8005452:	4638      	mov	r0, r7
 8005454:	f7ff ff8a 	bl	800536c <_malloc_r>
 8005458:	4605      	mov	r5, r0
 800545a:	2800      	cmp	r0, #0
 800545c:	d0f2      	beq.n	8005444 <_realloc_r+0x1c>
 800545e:	4631      	mov	r1, r6
 8005460:	4622      	mov	r2, r4
 8005462:	f7ff ff11 	bl	8005288 <memcpy>
 8005466:	4631      	mov	r1, r6
 8005468:	4638      	mov	r0, r7
 800546a:	f7ff ff33 	bl	80052d4 <_free_r>
 800546e:	e7e9      	b.n	8005444 <_realloc_r+0x1c>
 8005470:	4635      	mov	r5, r6
 8005472:	e7e7      	b.n	8005444 <_realloc_r+0x1c>

08005474 <_sbrk_r>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	2300      	movs	r3, #0
 8005478:	4c05      	ldr	r4, [pc, #20]	; (8005490 <_sbrk_r+0x1c>)
 800547a:	4605      	mov	r5, r0
 800547c:	4608      	mov	r0, r1
 800547e:	6023      	str	r3, [r4, #0]
 8005480:	f000 f814 	bl	80054ac <_sbrk>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d102      	bne.n	800548e <_sbrk_r+0x1a>
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	b103      	cbz	r3, 800548e <_sbrk_r+0x1a>
 800548c:	602b      	str	r3, [r5, #0]
 800548e:	bd38      	pop	{r3, r4, r5, pc}
 8005490:	20001e48 	.word	0x20001e48

08005494 <__malloc_lock>:
 8005494:	4770      	bx	lr

08005496 <__malloc_unlock>:
 8005496:	4770      	bx	lr

08005498 <_malloc_usable_size_r>:
 8005498:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800549c:	2800      	cmp	r0, #0
 800549e:	f1a0 0004 	sub.w	r0, r0, #4
 80054a2:	bfbc      	itt	lt
 80054a4:	580b      	ldrlt	r3, [r1, r0]
 80054a6:	18c0      	addlt	r0, r0, r3
 80054a8:	4770      	bx	lr
	...

080054ac <_sbrk>:
 80054ac:	4b04      	ldr	r3, [pc, #16]	; (80054c0 <_sbrk+0x14>)
 80054ae:	4602      	mov	r2, r0
 80054b0:	6819      	ldr	r1, [r3, #0]
 80054b2:	b909      	cbnz	r1, 80054b8 <_sbrk+0xc>
 80054b4:	4903      	ldr	r1, [pc, #12]	; (80054c4 <_sbrk+0x18>)
 80054b6:	6019      	str	r1, [r3, #0]
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	4402      	add	r2, r0
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	4770      	bx	lr
 80054c0:	20000410 	.word	0x20000410
 80054c4:	20001e4c 	.word	0x20001e4c

080054c8 <_init>:
 80054c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ca:	bf00      	nop
 80054cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ce:	bc08      	pop	{r3}
 80054d0:	469e      	mov	lr, r3
 80054d2:	4770      	bx	lr

080054d4 <_fini>:
 80054d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d6:	bf00      	nop
 80054d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054da:	bc08      	pop	{r3}
 80054dc:	469e      	mov	lr, r3
 80054de:	4770      	bx	lr
